{
    "name": "ns1",
    "description": "A Pulumi package for creating and managing ns1 cloud resources.",
    "keywords": [
        "pulumi",
        "ns1"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`ns1` Terraform Provider](https://github.com/ns1-terraform/terraform-provider-ns1).",
    "repository": "https://github.com/pulumi/pulumi-ns1",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apikey": {
                "type": "string",
                "description": "The ns1 API key, this is required\n"
            },
            "enableDdi": {
                "type": "boolean"
            },
            "endpoint": {
                "type": "string"
            },
            "ignoreSsl": {
                "type": "boolean"
            },
            "rateLimitParallelism": {
                "type": "integer"
            }
        }
    },
    "types": {
        "ns1:index/MonitoringJobRule:MonitoringJobRule": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "comparison",
                "key",
                "value"
            ]
        },
        "ns1:index/NotifyListNotification:NotifyListNotification": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Configuration details for the given notifier type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of notifier. Available notifiers are indicated in /notifytypes endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "config",
                "type"
            ]
        },
        "ns1:index/RecordAnswer:RecordAnswer": {
            "properties": {
                "answer": {
                    "type": "string",
                    "description": "Space delimited string of RDATA fields dependent on the record type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region (Answer Group really) that this answer\nbelongs to. This should be one of the names specified in `regions`. Only a\nsingle `region` per answer is currently supported. If you want an answer in\nmultiple regions, duplicating the answer (including metadata) is the correct\napproach.\n* ` meta` - (Optional) meta is supported at the `answer` level. Meta\nis documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "ns1:index/RecordFilter:RecordFilter": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The filters' configuration. Simple key/value pairs\ndetermined by the filter type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Determines whether the filter is applied in the\nfilter chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filter": {
                    "type": "string",
                    "description": "The type of filter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "ns1:index/RecordRegion:RecordRegion": {
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the region (or Answer Group).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "ns1:index/TeamIpWhitelist:TeamIpWhitelist": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The free form name of the team.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "ns1:index/ZoneSecondary:ZoneSecondary": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the secondary server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "- List of network IDs (`int`) for which the zone\nshould be made available. Default is network 0, the primary NSONE Global\nNetwork. Normally, you should not have to worry about this.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notify": {
                    "type": "boolean",
                    "description": "Whether we send `NOTIFY` messages to the secondary host\nwhen the zone changes. Default `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the the secondary server. Default `53`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "networks",
                        "notify",
                        "port"
                    ]
                }
            }
        },
        "ns1:index/getDNSSecDelegation:getDNSSecDelegation": {
            "properties": {
                "dnskeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/getDNSSecDelegationDnskey:getDNSSecDelegationDnskey"
                    },
                    "description": "(Computed) List of Keys. Key is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/getDNSSecDelegationD:getDNSSecDelegationD"
                    },
                    "description": "(Computed) List of Keys. Key is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Computed) TTL for the Keys (int).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnskeys",
                "ds",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getDNSSecDelegationD:getDNSSecDelegationD": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "(Computed) Algorithm of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flags": {
                    "type": "string",
                    "description": "(Computed) Flags for the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "(Computed) Protocol of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "description": "(Computed) Public key for the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "flags",
                "protocol",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getDNSSecDelegationDnskey:getDNSSecDelegationDnskey": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "(Computed) Algorithm of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flags": {
                    "type": "string",
                    "description": "(Computed) Flags for the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "(Computed) Protocol of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "description": "(Computed) Public key for the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "flags",
                "protocol",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getDNSSecKeys:getDNSSecKeys": {
            "properties": {
                "dnskeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/getDNSSecKeysDnskey:getDNSSecKeysDnskey"
                    },
                    "description": "(Computed) List of Keys. Key is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Computed) TTL for the Keys (int).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnskeys",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getDNSSecKeysDnskey:getDNSSecKeysDnskey": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "(Computed) Algorithm of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flags": {
                    "type": "string",
                    "description": "(Computed) Flags for the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "(Computed) Protocol of the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "description": "(Computed) Public key for the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "flags",
                "protocol",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getRecordAnswer:getRecordAnswer": {
            "properties": {
                "answer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of metadata\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "answer",
                "meta",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getRecordFilter:getRecordFilter": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "config",
                "disabled",
                "filter"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getRecordRegion:getRecordRegion": {
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of metadata\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "meta",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getZoneSecondary:getZoneSecondary": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the secondary server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of network IDs (`int`) for which the zone should be made\navailable. Default is network 0, the primary NSONE Global Network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notify": {
                    "type": "boolean",
                    "description": "Whether we send `NOTIFY` messages to the secondary host\nwhen the zone changes. Default `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the the secondary server. Default `53`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ip",
                "networks",
                "notify",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the ns1 package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "apikey": {
                "type": "string",
                "description": "The ns1 API key, this is required\n"
            },
            "enableDdi": {
                "type": "boolean"
            },
            "endpoint": {
                "type": "string"
            },
            "ignoreSsl": {
                "type": "boolean"
            },
            "rateLimitParallelism": {
                "type": "integer"
            }
        }
    },
    "resources": {
        "ns1:index/aPIKey:APIKey": {
            "properties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify the account plan.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the apikey can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the apikey can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the apikey can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the apikey can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify the accounts zones.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the apikey can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the apikey may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the apikey may not access.\n"
                },
                "ipWhitelistStrict": {
                    "type": "boolean",
                    "description": "Sets exclusivity on this IP whitelist.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses to whitelist for this key.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean",
                    "description": "Whether the apikey can view IPAM.\nOnly relevant for the DDI product.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The apikeys authentication token.\n"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the apikey can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the apikey.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage global two factor authentication.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams that the apikey belongs to.\n"
                }
            },
            "required": [
                "key",
                "name"
            ],
            "inputProperties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify the account plan.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the apikey can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the apikey can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the apikey can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the apikey can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify the accounts zones.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the apikey can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the apikey may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the apikey may not access.\n"
                },
                "ipWhitelistStrict": {
                    "type": "boolean",
                    "description": "Sets exclusivity on this IP whitelist.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses to whitelist for this key.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean",
                    "description": "Whether the apikey can view IPAM.\nOnly relevant for the DDI product.\n"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the apikey can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the apikey.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage global two factor authentication.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams that the apikey belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering APIKey resources.\n",
                "properties": {
                    "accountManageAccountSettings": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify account settings.\n"
                    },
                    "accountManageApikeys": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify account apikeys.\n"
                    },
                    "accountManageIpWhitelist": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage ip whitelist.\n"
                    },
                    "accountManagePaymentMethods": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify account payment methods.\n"
                    },
                    "accountManagePlan": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify the account plan.\n",
                        "deprecationMessage": "obsolete, should no longer be used"
                    },
                    "accountManageTeams": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify other teams in the account.\n"
                    },
                    "accountManageUsers": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify account users.\n"
                    },
                    "accountViewActivityLog": {
                        "type": "boolean",
                        "description": "Whether the apikey can view activity logs.\n"
                    },
                    "accountViewInvoices": {
                        "type": "boolean",
                        "description": "Whether the apikey can view invoices.\n"
                    },
                    "dataManageDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify data feeds.\n"
                    },
                    "dataManageDatasources": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify data sources.\n"
                    },
                    "dataPushToDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the apikey can publish to data feeds.\n"
                    },
                    "dhcpManageDhcp": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dhcpViewDhcp": {
                        "type": "boolean",
                        "description": "Whether the apikey can view DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dnsManageZones": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify the accounts zones.\n"
                    },
                    "dnsViewZones": {
                        "type": "boolean",
                        "description": "Whether the apikey can view the accounts zones.\n"
                    },
                    "dnsZonesAllowByDefault": {
                        "type": "boolean",
                        "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                    },
                    "dnsZonesAllows": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the apikey may access.\n"
                    },
                    "dnsZonesDenies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the apikey may not access.\n"
                    },
                    "ipWhitelistStrict": {
                        "type": "boolean",
                        "description": "Sets exclusivity on this IP whitelist.\n"
                    },
                    "ipWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP addresses to whitelist for this key.\n"
                    },
                    "ipamManageIpam": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "ipamViewIpam": {
                        "type": "boolean",
                        "description": "Whether the apikey can view IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The apikeys authentication token.\n"
                    },
                    "monitoringManageJobs": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify monitoring jobs.\n"
                    },
                    "monitoringManageLists": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify notification lists.\n"
                    },
                    "monitoringViewJobs": {
                        "type": "boolean",
                        "description": "Whether the apikey can view monitoring jobs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the apikey.\n"
                    },
                    "securityManageActiveDirectory": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage global active directory.\nOnly relevant for the DDI product.\n"
                    },
                    "securityManageGlobal2fa": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage global two factor authentication.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The teams that the apikey belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/dataFeed:DataFeed": {
            "description": "Provides a NS1 Data Feed resource. This can be used to create, modify, and delete data feeds.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst example = new ns1.DataSource(\"example\", {\n    sourcetype: \"nsone_v1\",\n});\nconst uswestFeed = new ns1.DataFeed(\"uswest_feed\", {\n    config: {\n        label: \"uswest\",\n    },\n    sourceId: example.id,\n});\nconst useastFeed = new ns1.DataFeed(\"useast_feed\", {\n    config: {\n        label: \"useast\",\n    },\n    sourceId: example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.DataSource(\"example\", sourcetype=\"nsone_v1\")\nuswest_feed = ns1.DataFeed(\"uswestFeed\",\n    config={\n        \"label\": \"uswest\",\n    },\n    source_id=example.id)\nuseast_feed = ns1.DataFeed(\"useastFeed\",\n    config={\n        \"label\": \"useast\",\n    },\n    source_id=example.id)\n```\n```csharp\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Ns1.DataSource(\"example\", new Ns1.DataSourceArgs\n        {\n            Sourcetype = \"nsone_v1\",\n        });\n        var uswestFeed = new Ns1.DataFeed(\"uswestFeed\", new Ns1.DataFeedArgs\n        {\n            Config = \n            {\n                { \"label\", \"uswest\" },\n            },\n            SourceId = example.Id,\n        });\n        var useastFeed = new Ns1.DataFeed(\"useastFeed\", new Ns1.DataFeedArgs\n        {\n            Config = \n            {\n                { \"label\", \"useast\" },\n            },\n            SourceId = example.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ns1.NewDataSource(ctx, \"example\", \u0026ns1.DataSourceArgs{\n\t\t\tSourcetype: pulumi.String(\"nsone_v1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ns1.NewDataFeed(ctx, \"uswestFeed\", \u0026ns1.DataFeedArgs{\n\t\t\tConfig: pulumi.StringMap{\n\t\t\t\t\"label\": pulumi.String(\"uswest\"),\n\t\t\t},\n\t\t\tSourceId: example.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ns1.NewDataFeed(ctx, \"useastFeed\", \u0026ns1.DataFeedArgs{\n\t\t\tConfig: pulumi.StringMap{\n\t\t\t\t\"label\": pulumi.String(\"useast\"),\n\t\t\t},\n\t\t\tSourceId: example.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[Datafeed Api Doc](https://ns1.com/api#data-feeds)\n",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The feeds configuration matching the specification in\n`feed_config` from /data/sourcetypes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the data feed.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The data source id that this feed is connected to.\n"
                }
            },
            "required": [
                "name",
                "sourceId"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The feeds configuration matching the specification in\n`feed_config` from /data/sourcetypes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the data feed.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The data source id that this feed is connected to.\n"
                }
            },
            "requiredInputs": [
                "sourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataFeed resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The feeds configuration matching the specification in\n`feed_config` from /data/sourcetypes.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the data feed.\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "The data source id that this feed is connected to.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/dataSource:DataSource": {
            "description": "Provides a NS1 Data Source resource. This can be used to create, modify, and delete data sources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst example = new ns1.DataSource(\"example\", {\n    sourcetype: \"nsone_v1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.DataSource(\"example\", sourcetype=\"nsone_v1\")\n```\n```csharp\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Ns1.DataSource(\"example\", new Ns1.DataSourceArgs\n        {\n            Sourcetype = \"nsone_v1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewDataSource(ctx, \"example\", \u0026ns1.DataSourceArgs{\n\t\t\tSourcetype: pulumi.String(\"nsone_v1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[Datasource Api Doc](https://ns1.com/api#data-sources)\n",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The data source configuration, determined by its type,\nmatching the specification in `config` from /data/sourcetypes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the data source.\n"
                },
                "sourcetype": {
                    "type": "string",
                    "description": "The data sources type, listed in API endpoint https://api.nsone.net/v1/data/sourcetypes.\n"
                }
            },
            "required": [
                "name",
                "sourcetype"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The data source configuration, determined by its type,\nmatching the specification in `config` from /data/sourcetypes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the data source.\n"
                },
                "sourcetype": {
                    "type": "string",
                    "description": "The data sources type, listed in API endpoint https://api.nsone.net/v1/data/sourcetypes.\n"
                }
            },
            "requiredInputs": [
                "sourcetype"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataSource resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The data source configuration, determined by its type,\nmatching the specification in `config` from /data/sourcetypes.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the data source.\n"
                    },
                    "sourcetype": {
                        "type": "string",
                        "description": "The data sources type, listed in API endpoint https://api.nsone.net/v1/data/sourcetypes.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/monitoringJob:MonitoringJob": {
            "description": "Provides a NS1 Monitoring Job resource. This can be used to create, modify, and delete monitoring jobs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst uswestMonitor = new ns1.MonitoringJob(\"uswest_monitor\", {\n    active: true,\n    config: {\n        host: \"example-elb-uswest.aws.amazon.com\",\n        port: 443,\n        send: `HEAD / HTTP/1.0\r\n\r\n`,\n        ssl: 1,\n    },\n    frequency: 60,\n    jobType: \"tcp\",\n    policy: \"quorum\",\n    rapidRecheck: true,\n    regions: [\n        \"sjc\",\n        \"sin\",\n        \"lga\",\n    ],\n    rules: [{\n        comparison: \"contains\",\n        key: \"output\",\n        value: \"200 OK\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nuswest_monitor = ns1.MonitoringJob(\"uswestMonitor\",\n    active=True,\n    config={\n        \"host\": \"example-elb-uswest.aws.amazon.com\",\n        \"port\": 443,\n        \"send\": \"\"\"HEAD / HTTP/1.0\r\n\r\n\n\"\"\",\n        \"ssl\": 1,\n    },\n    frequency=60,\n    job_type=\"tcp\",\n    policy=\"quorum\",\n    rapid_recheck=True,\n    regions=[\n        \"sjc\",\n        \"sin\",\n        \"lga\",\n    ],\n    rules=[ns1.MonitoringJobRuleArgs(\n        comparison=\"contains\",\n        key=\"output\",\n        value=\"200 OK\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var uswestMonitor = new Ns1.MonitoringJob(\"uswestMonitor\", new Ns1.MonitoringJobArgs\n        {\n            Active = true,\n            Config = \n            {\n                { \"host\", \"example-elb-uswest.aws.amazon.com\" },\n                { \"port\", 443 },\n                { \"send\", @\"HEAD / HTTP/1.0\r\n\r\n\n\" },\n                { \"ssl\", 1 },\n            },\n            Frequency = 60,\n            JobType = \"tcp\",\n            Policy = \"quorum\",\n            RapidRecheck = true,\n            Regions = \n            {\n                \"sjc\",\n                \"sin\",\n                \"lga\",\n            },\n            Rules = \n            {\n                new Ns1.Inputs.MonitoringJobRuleArgs\n                {\n                    Comparison = \"contains\",\n                    Key = \"output\",\n                    Value = \"200 OK\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-ns1/sdk/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewMonitoringJob(ctx, \"uswestMonitor\", \u0026ns1.MonitoringJobArgs{\n\t\t\tActive: pulumi.Bool(true),\n\t\t\tConfig: pulumi.Map{\n\t\t\t\t\"host\": pulumi.String(\"example-elb-uswest.aws.amazon.com\"),\n\t\t\t\t\"port\": pulumi.Float64(443),\n\t\t\t\t\"send\": pulumi.String(fmt.Sprintf(\"%v%v%v\", \"HEAD / HTTP/1.0\r\\n\", \"\r\\n\", \"\\n\")),\n\t\t\t\t\"ssl\": pulumi.Float64(1),\n\t\t\t},\n\t\t\tFrequency:    pulumi.Int(60),\n\t\t\tJobType:      pulumi.String(\"tcp\"),\n\t\t\tPolicy:       pulumi.String(\"quorum\"),\n\t\t\tRapidRecheck: pulumi.Bool(true),\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sjc\"),\n\t\t\t\tpulumi.String(\"sin\"),\n\t\t\t\tpulumi.String(\"lga\"),\n\t\t\t},\n\t\t\tRules: ns1.MonitoringJobRuleArray{\n\t\t\t\t\u0026ns1.MonitoringJobRuleArgs{\n\t\t\t\t\tComparison: pulumi.String(\"contains\"),\n\t\t\t\t\tKey:        pulumi.String(\"output\"),\n\t\t\t\t\tValue:      pulumi.String(\"200 OK\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[MonitoringJob Api Doc](https://ns1.com/api#monitoring-jobs)\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates if the job is active or temporarily disabled.\n"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A configuration dictionary with keys and values depending on the job_type. Configuration details for each job_type are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency, in seconds, at which to run the monitoring job in each region.\n"
                },
                "jobType": {
                    "type": "string",
                    "description": "The type of monitoring job to be run. Refer to the NS1 API documentation (https://ns1.com/api#monitoring-jobs) for supported values which include ping, tcp, dns, http.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free-form display name for the monitoring job.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Freeform notes to be included in any notifications about this job.\n"
                },
                "notifyDelay": {
                    "type": "integer",
                    "description": "The time in seconds after a failure to wait before sending a notification.\n"
                },
                "notifyFailback": {
                    "type": "boolean",
                    "description": "If true, a notification is sent when a job returns to an \"up\" state.\n"
                },
                "notifyList": {
                    "type": "string"
                },
                "notifyRegional": {
                    "type": "boolean",
                    "description": "If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.\n"
                },
                "notifyRepeat": {
                    "type": "integer",
                    "description": "The time in seconds between repeat notifications of a failed job.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The policy for determining the monitor's global status\nbased on the status of the job in all regions. See NS1 API docs for supported values.\n"
                },
                "rapidRecheck": {
                    "type": "boolean",
                    "description": "If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of region codes in which to run the monitoring\njob. See NS1 API docs for supported values.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/MonitoringJobRule:MonitoringJobRule"
                    },
                    "description": "A list of rules for determining failure conditions. Each rule acts on one of the outputs from the monitoring job. You must specify key (the output key); comparison (a comparison to perform on the the output); and value (the value to compare to). For example, {\"key\":\"rtt\", \"comparison\":\"\u003c\", \"value\":100} is a rule requiring the rtt from a job to be under 100ms, or the job will be marked failed. Available output keys, comparators, and value types are are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                }
            },
            "required": [
                "config",
                "frequency",
                "jobType",
                "name",
                "regions"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates if the job is active or temporarily disabled.\n"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A configuration dictionary with keys and values depending on the job_type. Configuration details for each job_type are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency, in seconds, at which to run the monitoring job in each region.\n"
                },
                "jobType": {
                    "type": "string",
                    "description": "The type of monitoring job to be run. Refer to the NS1 API documentation (https://ns1.com/api#monitoring-jobs) for supported values which include ping, tcp, dns, http.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free-form display name for the monitoring job.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Freeform notes to be included in any notifications about this job.\n"
                },
                "notifyDelay": {
                    "type": "integer",
                    "description": "The time in seconds after a failure to wait before sending a notification.\n"
                },
                "notifyFailback": {
                    "type": "boolean",
                    "description": "If true, a notification is sent when a job returns to an \"up\" state.\n"
                },
                "notifyList": {
                    "type": "string"
                },
                "notifyRegional": {
                    "type": "boolean",
                    "description": "If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.\n"
                },
                "notifyRepeat": {
                    "type": "integer",
                    "description": "The time in seconds between repeat notifications of a failed job.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The policy for determining the monitor's global status\nbased on the status of the job in all regions. See NS1 API docs for supported values.\n"
                },
                "rapidRecheck": {
                    "type": "boolean",
                    "description": "If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of region codes in which to run the monitoring\njob. See NS1 API docs for supported values.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/MonitoringJobRule:MonitoringJobRule"
                    },
                    "description": "A list of rules for determining failure conditions. Each rule acts on one of the outputs from the monitoring job. You must specify key (the output key); comparison (a comparison to perform on the the output); and value (the value to compare to). For example, {\"key\":\"rtt\", \"comparison\":\"\u003c\", \"value\":100} is a rule requiring the rtt from a job to be under 100ms, or the job will be marked failed. Available output keys, comparators, and value types are are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                }
            },
            "requiredInputs": [
                "config",
                "frequency",
                "jobType",
                "regions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoringJob resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Indicates if the job is active or temporarily disabled.\n"
                    },
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A configuration dictionary with keys and values depending on the job_type. Configuration details for each job_type are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The frequency, in seconds, at which to run the monitoring job in each region.\n"
                    },
                    "jobType": {
                        "type": "string",
                        "description": "The type of monitoring job to be run. Refer to the NS1 API documentation (https://ns1.com/api#monitoring-jobs) for supported values which include ping, tcp, dns, http.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free-form display name for the monitoring job.\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Freeform notes to be included in any notifications about this job.\n"
                    },
                    "notifyDelay": {
                        "type": "integer",
                        "description": "The time in seconds after a failure to wait before sending a notification.\n"
                    },
                    "notifyFailback": {
                        "type": "boolean",
                        "description": "If true, a notification is sent when a job returns to an \"up\" state.\n"
                    },
                    "notifyList": {
                        "type": "string"
                    },
                    "notifyRegional": {
                        "type": "boolean",
                        "description": "If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.\n"
                    },
                    "notifyRepeat": {
                        "type": "integer",
                        "description": "The time in seconds between repeat notifications of a failed job.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The policy for determining the monitor's global status\nbased on the status of the job in all regions. See NS1 API docs for supported values.\n"
                    },
                    "rapidRecheck": {
                        "type": "boolean",
                        "description": "If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of region codes in which to run the monitoring\njob. See NS1 API docs for supported values.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/MonitoringJobRule:MonitoringJobRule"
                        },
                        "description": "A list of rules for determining failure conditions. Each rule acts on one of the outputs from the monitoring job. You must specify key (the output key); comparison (a comparison to perform on the the output); and value (the value to compare to). For example, {\"key\":\"rtt\", \"comparison\":\"\u003c\", \"value\":100} is a rule requiring the rtt from a job to be under 100ms, or the job will be marked failed. Available output keys, comparators, and value types are are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/notifyList:NotifyList": {
            "description": "Provides a NS1 Notify List resource. This can be used to create, modify, and delete notify lists.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst nl = new ns1.NotifyList(\"nl\", {\n    notifications: [\n        {\n            config: {\n                url: \"http://www.mywebhook.com\",\n            },\n            type: \"webhook\",\n        },\n        {\n            config: {\n                email: \"test@test.com\",\n            },\n            type: \"email\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nnl = ns1.NotifyList(\"nl\", notifications=[\n    ns1.NotifyListNotificationArgs(\n        config={\n            \"url\": \"http://www.mywebhook.com\",\n        },\n        type=\"webhook\",\n    ),\n    ns1.NotifyListNotificationArgs(\n        config={\n            \"email\": \"test@test.com\",\n        },\n        type=\"email\",\n    ),\n])\n```\n```csharp\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var nl = new Ns1.NotifyList(\"nl\", new Ns1.NotifyListArgs\n        {\n            Notifications = \n            {\n                new Ns1.Inputs.NotifyListNotificationArgs\n                {\n                    Config = \n                    {\n                        { \"url\", \"http://www.mywebhook.com\" },\n                    },\n                    Type = \"webhook\",\n                },\n                new Ns1.Inputs.NotifyListNotificationArgs\n                {\n                    Config = \n                    {\n                        { \"email\", \"test@test.com\" },\n                    },\n                    Type = \"email\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewNotifyList(ctx, \"nl\", \u0026ns1.NotifyListArgs{\n\t\t\tNotifications: ns1.NotifyListNotificationArray{\n\t\t\t\t\u0026ns1.NotifyListNotificationArgs{\n\t\t\t\t\tConfig: pulumi.StringMap{\n\t\t\t\t\t\t\"url\": pulumi.String(\"http://www.mywebhook.com\"),\n\t\t\t\t\t},\n\t\t\t\t\tType: pulumi.String(\"webhook\"),\n\t\t\t\t},\n\t\t\t\t\u0026ns1.NotifyListNotificationArgs{\n\t\t\t\t\tConfig: pulumi.StringMap{\n\t\t\t\t\t\t\"email\": pulumi.String(\"test@test.com\"),\n\t\t\t\t\t},\n\t\t\t\t\tType: pulumi.String(\"email\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[NotifyList Api Doc](https://ns1.com/api#notification-lists)\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The free-form display name for the notify list.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/NotifyListNotification:NotifyListNotification"
                    },
                    "description": "A list of notifiers. All notifiers in a notification list will receive notifications whenever an event is send to the list (e.g., when a monitoring job fails). Notifiers are documented below.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The free-form display name for the notify list.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/NotifyListNotification:NotifyListNotification"
                    },
                    "description": "A list of notifiers. All notifiers in a notification list will receive notifications whenever an event is send to the list (e.g., when a monitoring job fails). Notifiers are documented below.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotifyList resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The free-form display name for the notify list.\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/NotifyListNotification:NotifyListNotification"
                        },
                        "description": "A list of notifiers. All notifiers in a notification list will receive notifications whenever an event is send to the list (e.g., when a monitoring job fails). Notifiers are documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/record:Record": {
            "description": "Provides a NS1 Record resource. This can be used to create, modify, and delete records.\n\n## NS1 Documentation\n\n[Record Api Doc](https://ns1.com/api#records)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/record:Record \u003cname\u003e \u003czone\u003e/\u003cdomain\u003e/\u003ctype\u003e`\n```\n\n So for the example above\n\n```sh\n $ pulumi import ns1:index/record:Record www terraform.example.io/www.terraform.example.io/CNAME`\n```\n\n ",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordAnswer:RecordAnswer"
                    },
                    "description": "One or more NS1 answers for the records' specified type.\nAnswers are documented below.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The records' domain. Cannot have leading or trailing\ndots - see the example above and `FQDN formatting` below.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordFilter:RecordFilter"
                    },
                    "description": "One or more NS1 filters for the record(order matters).\nFilters are documented below.\n"
                },
                "link": {
                    "type": "string",
                    "description": "The target record to link to. This means this record is a\n'linked' record, and it inherits all properties from its target.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordRegion:RecordRegion"
                    },
                    "description": "One or more \"regions\" for the record. These are really\njust groupings based on metadata, and are called \"Answer Groups\" in the NS1 UI,\nbut remain `regions` here for legacy reasons. Regions are\ndocumented below. Please note the ordering requirement!\n"
                },
                "shortAnswers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "short_answers will be deprecated in a future release. It is suggested to migrate to a regular \"answers\" block."
                },
                "ttl": {
                    "type": "integer",
                    "description": "The records' time to live (in seconds).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The records' RR type.\n"
                },
                "useClientSubnet": {
                    "type": "boolean",
                    "description": "Whether to use EDNS client subnet data when\navailable(in filter chain).\n* ` meta` - (Optional) meta is supported at the `record` level. Meta\nis documented below.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone the record belongs to. Cannot have leading or\ntrailing dots (\".\") - see the example above and `FQDN formatting` below.\n"
                }
            },
            "required": [
                "domain",
                "ttl",
                "type",
                "zone"
            ],
            "inputProperties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordAnswer:RecordAnswer"
                    },
                    "description": "One or more NS1 answers for the records' specified type.\nAnswers are documented below.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The records' domain. Cannot have leading or trailing\ndots - see the example above and `FQDN formatting` below.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordFilter:RecordFilter"
                    },
                    "description": "One or more NS1 filters for the record(order matters).\nFilters are documented below.\n"
                },
                "link": {
                    "type": "string",
                    "description": "The target record to link to. This means this record is a\n'linked' record, and it inherits all properties from its target.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordRegion:RecordRegion"
                    },
                    "description": "One or more \"regions\" for the record. These are really\njust groupings based on metadata, and are called \"Answer Groups\" in the NS1 UI,\nbut remain `regions` here for legacy reasons. Regions are\ndocumented below. Please note the ordering requirement!\n"
                },
                "shortAnswers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "short_answers will be deprecated in a future release. It is suggested to migrate to a regular \"answers\" block."
                },
                "ttl": {
                    "type": "integer",
                    "description": "The records' time to live (in seconds).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The records' RR type.\n"
                },
                "useClientSubnet": {
                    "type": "boolean",
                    "description": "Whether to use EDNS client subnet data when\navailable(in filter chain).\n* ` meta` - (Optional) meta is supported at the `record` level. Meta\nis documented below.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone the record belongs to. Cannot have leading or\ntrailing dots (\".\") - see the example above and `FQDN formatting` below.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "type",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Record resources.\n",
                "properties": {
                    "answers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/RecordAnswer:RecordAnswer"
                        },
                        "description": "One or more NS1 answers for the records' specified type.\nAnswers are documented below.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The records' domain. Cannot have leading or trailing\ndots - see the example above and `FQDN formatting` below.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/RecordFilter:RecordFilter"
                        },
                        "description": "One or more NS1 filters for the record(order matters).\nFilters are documented below.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The target record to link to. This means this record is a\n'linked' record, and it inherits all properties from its target.\n"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/RecordRegion:RecordRegion"
                        },
                        "description": "One or more \"regions\" for the record. These are really\njust groupings based on metadata, and are called \"Answer Groups\" in the NS1 UI,\nbut remain `regions` here for legacy reasons. Regions are\ndocumented below. Please note the ordering requirement!\n"
                    },
                    "shortAnswers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "short_answers will be deprecated in a future release. It is suggested to migrate to a regular \"answers\" block."
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The records' time to live (in seconds).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The records' RR type.\n"
                    },
                    "useClientSubnet": {
                        "type": "boolean",
                        "description": "Whether to use EDNS client subnet data when\navailable(in filter chain).\n* ` meta` - (Optional) meta is supported at the `record` level. Meta\nis documented below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone the record belongs to. Cannot have leading or\ntrailing dots (\".\") - see the example above and `FQDN formatting` below.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/team:Team": {
            "description": "Provides a NS1 Team resource. This can be used to create, modify, and delete\nteams. The credentials used must have the `manage_teams` permission set.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\n// Create a new NS1 Team\nconst example = new ns1.Team(\"example\", {\n    accountManageUsers: false,\n    // Configure permissions\n    dnsViewZones: false,\n    ipWhitelists: [\n        // Optional IP whitelists\n        {\n            name: \"whitelist-1\",\n            values: [\n                \"1.1.1.1\",\n                \"2.2.2.2\",\n            ],\n        },\n        {\n            name: \"whitelist-2\",\n            values: [\n                \"3.3.3.3\",\n                \"4.4.4.4\",\n            ],\n        },\n    ],\n});\n// Another team\nconst example2 = new ns1.Team(\"example2\", {\n    dataManageDatasources: true,\n    dnsViewZones: true,\n    dnsZonesAllows: [\"mytest.zone\"],\n    dnsZonesAllowByDefault: true,\n    dnsZonesDenies: [\"myother.zone\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\n# Create a new NS1 Team\nexample = ns1.Team(\"example\",\n    account_manage_users=False,\n    dns_view_zones=False,\n    ip_whitelists=[\n        ns1.TeamIpWhitelistArgs(\n            name=\"whitelist-1\",\n            values=[\n                \"1.1.1.1\",\n                \"2.2.2.2\",\n            ],\n        ),\n        ns1.TeamIpWhitelistArgs(\n            name=\"whitelist-2\",\n            values=[\n                \"3.3.3.3\",\n                \"4.4.4.4\",\n            ],\n        ),\n    ])\n# Another team\nexample2 = ns1.Team(\"example2\",\n    data_manage_datasources=True,\n    dns_view_zones=True,\n    dns_zones_allows=[\"mytest.zone\"],\n    dns_zones_allow_by_default=True,\n    dns_zones_denies=[\"myother.zone\"])\n```\n```csharp\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new NS1 Team\n        var example = new Ns1.Team(\"example\", new Ns1.TeamArgs\n        {\n            AccountManageUsers = false,\n            DnsViewZones = false,\n            IpWhitelists = \n            {\n                new Ns1.Inputs.TeamIpWhitelistArgs\n                {\n                    Name = \"whitelist-1\",\n                    Values = \n                    {\n                        \"1.1.1.1\",\n                        \"2.2.2.2\",\n                    },\n                },\n                new Ns1.Inputs.TeamIpWhitelistArgs\n                {\n                    Name = \"whitelist-2\",\n                    Values = \n                    {\n                        \"3.3.3.3\",\n                        \"4.4.4.4\",\n                    },\n                },\n            },\n        });\n        // Another team\n        var example2 = new Ns1.Team(\"example2\", new Ns1.TeamArgs\n        {\n            DataManageDatasources = true,\n            DnsViewZones = true,\n            DnsZonesAllows = \n            {\n                \"mytest.zone\",\n            },\n            DnsZonesAllowByDefault = true,\n            DnsZonesDenies = \n            {\n                \"myother.zone\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewTeam(ctx, \"example\", \u0026ns1.TeamArgs{\n\t\t\tAccountManageUsers: pulumi.Bool(false),\n\t\t\tDnsViewZones:       pulumi.Bool(false),\n\t\t\tIpWhitelists: ns1.TeamIpWhitelistArray{\n\t\t\t\t\u0026ns1.TeamIpWhitelistArgs{\n\t\t\t\t\tName: pulumi.String(\"whitelist-1\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"1.1.1.1\"),\n\t\t\t\t\t\tpulumi.String(\"2.2.2.2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026ns1.TeamIpWhitelistArgs{\n\t\t\t\t\tName: pulumi.String(\"whitelist-2\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"3.3.3.3\"),\n\t\t\t\t\t\tpulumi.String(\"4.4.4.4\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ns1.NewTeam(ctx, \"example2\", \u0026ns1.TeamArgs{\n\t\t\tDataManageDatasources: pulumi.Bool(true),\n\t\t\tDnsViewZones:          pulumi.Bool(true),\n\t\t\tDnsZonesAllows: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"mytest.zone\"),\n\t\t\t},\n\t\t\tDnsZonesAllowByDefault: pulumi.Bool(true),\n\t\t\tDnsZonesDenies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"myother.zone\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[Team Api Docs](https://ns1.com/api#team)\n",
            "properties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the team can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the team can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the team can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the team can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "Whether the team can modify the account plan.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the team can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the team can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the team can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the team can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the team can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the team can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the team can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the team can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the team can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the team can modify the accounts zones.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the team can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the team may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the team may not access.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/TeamIpWhitelist:TeamIpWhitelist"
                    },
                    "description": "The IP addresses to whitelist for this key.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the team can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean",
                    "description": "Whether the team can view IPAM.\nOnly relevant for the DDI product.\n"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the team can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the team can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the team can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the team.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the team can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the team can manage global two factor authentication.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the team can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the team can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the team can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the team can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "Whether the team can modify the account plan.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the team can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the team can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the team can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the team can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the team can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the team can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the team can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the team can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the team can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the team can modify the accounts zones.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the team can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the team may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the team may not access.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/TeamIpWhitelist:TeamIpWhitelist"
                    },
                    "description": "The IP addresses to whitelist for this key.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the team can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean",
                    "description": "Whether the team can view IPAM.\nOnly relevant for the DDI product.\n"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the team can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the team can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the team can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the team.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the team can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the team can manage global two factor authentication.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "accountManageAccountSettings": {
                        "type": "boolean",
                        "description": "Whether the team can modify account settings.\n"
                    },
                    "accountManageApikeys": {
                        "type": "boolean",
                        "description": "Whether the team can modify account apikeys.\n"
                    },
                    "accountManageIpWhitelist": {
                        "type": "boolean",
                        "description": "Whether the team can manage ip whitelist.\n"
                    },
                    "accountManagePaymentMethods": {
                        "type": "boolean",
                        "description": "Whether the team can modify account payment methods.\n"
                    },
                    "accountManagePlan": {
                        "type": "boolean",
                        "description": "Whether the team can modify the account plan.\n",
                        "deprecationMessage": "obsolete, should no longer be used"
                    },
                    "accountManageTeams": {
                        "type": "boolean",
                        "description": "Whether the team can modify other teams in the account.\n"
                    },
                    "accountManageUsers": {
                        "type": "boolean",
                        "description": "Whether the team can modify account users.\n"
                    },
                    "accountViewActivityLog": {
                        "type": "boolean",
                        "description": "Whether the team can view activity logs.\n"
                    },
                    "accountViewInvoices": {
                        "type": "boolean",
                        "description": "Whether the team can view invoices.\n"
                    },
                    "dataManageDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the team can modify data feeds.\n"
                    },
                    "dataManageDatasources": {
                        "type": "boolean",
                        "description": "Whether the team can modify data sources.\n"
                    },
                    "dataPushToDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the team can publish to data feeds.\n"
                    },
                    "dhcpManageDhcp": {
                        "type": "boolean",
                        "description": "Whether the team can manage DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dhcpViewDhcp": {
                        "type": "boolean",
                        "description": "Whether the team can view DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dnsManageZones": {
                        "type": "boolean",
                        "description": "Whether the team can modify the accounts zones.\n"
                    },
                    "dnsViewZones": {
                        "type": "boolean",
                        "description": "Whether the team can view the accounts zones.\n"
                    },
                    "dnsZonesAllowByDefault": {
                        "type": "boolean",
                        "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                    },
                    "dnsZonesAllows": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the team may access.\n"
                    },
                    "dnsZonesDenies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the team may not access.\n"
                    },
                    "ipWhitelists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/TeamIpWhitelist:TeamIpWhitelist"
                        },
                        "description": "The IP addresses to whitelist for this key.\n"
                    },
                    "ipamManageIpam": {
                        "type": "boolean",
                        "description": "Whether the team can manage IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "ipamViewIpam": {
                        "type": "boolean",
                        "description": "Whether the team can view IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "monitoringManageJobs": {
                        "type": "boolean",
                        "description": "Whether the team can modify monitoring jobs.\n"
                    },
                    "monitoringManageLists": {
                        "type": "boolean",
                        "description": "Whether the team can modify notification lists.\n"
                    },
                    "monitoringViewJobs": {
                        "type": "boolean",
                        "description": "Whether the team can view monitoring jobs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the team.\n"
                    },
                    "securityManageActiveDirectory": {
                        "type": "boolean",
                        "description": "Whether the team can manage global active directory.\nOnly relevant for the DDI product.\n"
                    },
                    "securityManageGlobal2fa": {
                        "type": "boolean",
                        "description": "Whether the team can manage global two factor authentication.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/user:User": {
            "properties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the user can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the user can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the user can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the user can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "**Deprecated** Whether the user can modify the account plan.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the user can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the user can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the user can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the user can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the user can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the user can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the user can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the user can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the user can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the user can modify the accounts zones.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the user can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the user may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the user may not access.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user.\n"
                },
                "ipWhitelistStrict": {
                    "type": "boolean",
                    "description": "Sets exclusivity on this IP whitelist.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses to whitelist for this key.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the user can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the user can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the user can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the user can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the user.\n"
                },
                "notify": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether or not to notify the user of specified events. Only `billing` is available currently.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the user can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the user can manage global two factor authentication.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams that the user belongs to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The users login name.\n"
                }
            },
            "required": [
                "email",
                "name",
                "username"
            ],
            "inputProperties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the user can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the user can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the user can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the user can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "**Deprecated** Whether the user can modify the account plan.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the user can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the user can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the user can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the user can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the user can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the user can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the user can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the user can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the user can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the user can modify the accounts zones.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the user can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the user may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the user may not access.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user.\n"
                },
                "ipWhitelistStrict": {
                    "type": "boolean",
                    "description": "Sets exclusivity on this IP whitelist.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses to whitelist for this key.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the user can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the user can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the user can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the user can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the user.\n"
                },
                "notify": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether or not to notify the user of specified events. Only `billing` is available currently.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the user can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the user can manage global two factor authentication.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams that the user belongs to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The users login name.\n"
                }
            },
            "requiredInputs": [
                "email",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountManageAccountSettings": {
                        "type": "boolean",
                        "description": "Whether the user can modify account settings.\n"
                    },
                    "accountManageApikeys": {
                        "type": "boolean",
                        "description": "Whether the user can modify account apikeys.\n"
                    },
                    "accountManageIpWhitelist": {
                        "type": "boolean",
                        "description": "Whether the user can manage ip whitelist.\n"
                    },
                    "accountManagePaymentMethods": {
                        "type": "boolean",
                        "description": "Whether the user can modify account payment methods.\n"
                    },
                    "accountManagePlan": {
                        "type": "boolean",
                        "description": "**Deprecated** Whether the user can modify the account plan.\n",
                        "deprecationMessage": "obsolete, should no longer be used"
                    },
                    "accountManageTeams": {
                        "type": "boolean",
                        "description": "Whether the user can modify other teams in the account.\n"
                    },
                    "accountManageUsers": {
                        "type": "boolean",
                        "description": "Whether the user can modify account users.\n"
                    },
                    "accountViewActivityLog": {
                        "type": "boolean",
                        "description": "Whether the user can view activity logs.\n"
                    },
                    "accountViewInvoices": {
                        "type": "boolean",
                        "description": "Whether the user can view invoices.\n"
                    },
                    "dataManageDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the user can modify data feeds.\n"
                    },
                    "dataManageDatasources": {
                        "type": "boolean",
                        "description": "Whether the user can modify data sources.\n"
                    },
                    "dataPushToDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the user can publish to data feeds.\n"
                    },
                    "dhcpManageDhcp": {
                        "type": "boolean",
                        "description": "Whether the user can manage DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dhcpViewDhcp": {
                        "type": "boolean",
                        "description": "Whether the user can view DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dnsManageZones": {
                        "type": "boolean",
                        "description": "Whether the user can modify the accounts zones.\n"
                    },
                    "dnsViewZones": {
                        "type": "boolean",
                        "description": "Whether the user can view the accounts zones.\n"
                    },
                    "dnsZonesAllowByDefault": {
                        "type": "boolean",
                        "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                    },
                    "dnsZonesAllows": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the user may access.\n"
                    },
                    "dnsZonesDenies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the user may not access.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user.\n"
                    },
                    "ipWhitelistStrict": {
                        "type": "boolean",
                        "description": "Sets exclusivity on this IP whitelist.\n"
                    },
                    "ipWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP addresses to whitelist for this key.\n"
                    },
                    "ipamManageIpam": {
                        "type": "boolean",
                        "description": "Whether the user can manage IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "ipamViewIpam": {
                        "type": "boolean"
                    },
                    "monitoringManageJobs": {
                        "type": "boolean",
                        "description": "Whether the user can modify monitoring jobs.\n"
                    },
                    "monitoringManageLists": {
                        "type": "boolean",
                        "description": "Whether the user can modify notification lists.\n"
                    },
                    "monitoringViewJobs": {
                        "type": "boolean",
                        "description": "Whether the user can view monitoring jobs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the user.\n"
                    },
                    "notify": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Whether or not to notify the user of specified events. Only `billing` is available currently.\n"
                    },
                    "securityManageActiveDirectory": {
                        "type": "boolean",
                        "description": "Whether the user can manage global active directory.\nOnly relevant for the DDI product.\n"
                    },
                    "securityManageGlobal2fa": {
                        "type": "boolean",
                        "description": "Whether the user can manage global two factor authentication.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The teams that the user belongs to.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The users login name.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/zone:Zone": {
            "description": "\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/zone:Zone \u003cname\u003e \u003czone\u003e`\n```\n\n So for the example above\n\n```sh\n $ pulumi import ns1:index/zone:Zone example terraform.example.io`\n```\n\n ",
            "properties": {
                "additionalPrimaries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional IPv4 addresses for the primary\nzone. Conflicts with `secondaries`.\n"
                },
                "autogenerateNsRecord": {
                    "type": "boolean"
                },
                "dnsServers": {
                    "type": "string",
                    "description": "(Computed) Authoritative Name Servers.\n"
                },
                "dnssec": {
                    "type": "boolean",
                    "description": "Whether or not DNSSEC is enabled for the zone.\nNote that DNSSEC must be enabled on the account by support for this to be set\nto `true`.\n"
                },
                "expiry": {
                    "type": "integer",
                    "description": "The SOA Expiry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "hostmaster": {
                    "type": "string",
                    "description": "(Computed) The SOA Hostmaster.\n"
                },
                "link": {
                    "type": "string",
                    "description": "The target zone(domain name) to link to.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "- List of network IDs (`int`) for which the zone\nshould be made available. Default is network 0, the primary NSONE Global\nNetwork. Normally, you should not have to worry about this.\n"
                },
                "nxTtl": {
                    "type": "integer",
                    "description": "The SOA NX TTL. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "primary": {
                    "type": "string",
                    "description": "The primary zones' IPv4 address. This makes the zone a\nsecondary. Conflicts with `secondaries`.\n"
                },
                "refresh": {
                    "type": "integer",
                    "description": "The SOA Refresh. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "The SOA Retry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "secondaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/ZoneSecondary:ZoneSecondary"
                    },
                    "description": "List of secondary servers. This makes the zone a\nprimary. Conflicts with `primary` and `additional_primaries`.\nSecondaries is documented below.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The SOA TTL.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The domain name of the zone.\n",
                    "language": {
                        "csharp": {
                            "name": "ZoneName"
                        }
                    }
                }
            },
            "required": [
                "dnsServers",
                "dnssec",
                "expiry",
                "hostmaster",
                "networks",
                "nxTtl",
                "refresh",
                "retry",
                "ttl",
                "zone"
            ],
            "inputProperties": {
                "additionalPrimaries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional IPv4 addresses for the primary\nzone. Conflicts with `secondaries`.\n"
                },
                "autogenerateNsRecord": {
                    "type": "boolean"
                },
                "dnssec": {
                    "type": "boolean",
                    "description": "Whether or not DNSSEC is enabled for the zone.\nNote that DNSSEC must be enabled on the account by support for this to be set\nto `true`.\n"
                },
                "expiry": {
                    "type": "integer",
                    "description": "The SOA Expiry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "link": {
                    "type": "string",
                    "description": "The target zone(domain name) to link to.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "- List of network IDs (`int`) for which the zone\nshould be made available. Default is network 0, the primary NSONE Global\nNetwork. Normally, you should not have to worry about this.\n"
                },
                "nxTtl": {
                    "type": "integer",
                    "description": "The SOA NX TTL. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "primary": {
                    "type": "string",
                    "description": "The primary zones' IPv4 address. This makes the zone a\nsecondary. Conflicts with `secondaries`.\n"
                },
                "refresh": {
                    "type": "integer",
                    "description": "The SOA Refresh. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "The SOA Retry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "secondaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/ZoneSecondary:ZoneSecondary"
                    },
                    "description": "List of secondary servers. This makes the zone a\nprimary. Conflicts with `primary` and `additional_primaries`.\nSecondaries is documented below.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The SOA TTL.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The domain name of the zone.\n",
                    "language": {
                        "csharp": {
                            "name": "ZoneName"
                        }
                    }
                }
            },
            "requiredInputs": [
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Zone resources.\n",
                "properties": {
                    "additionalPrimaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of additional IPv4 addresses for the primary\nzone. Conflicts with `secondaries`.\n"
                    },
                    "autogenerateNsRecord": {
                        "type": "boolean"
                    },
                    "dnsServers": {
                        "type": "string",
                        "description": "(Computed) Authoritative Name Servers.\n"
                    },
                    "dnssec": {
                        "type": "boolean",
                        "description": "Whether or not DNSSEC is enabled for the zone.\nNote that DNSSEC must be enabled on the account by support for this to be set\nto `true`.\n"
                    },
                    "expiry": {
                        "type": "integer",
                        "description": "The SOA Expiry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                    },
                    "hostmaster": {
                        "type": "string",
                        "description": "(Computed) The SOA Hostmaster.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The target zone(domain name) to link to.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "- List of network IDs (`int`) for which the zone\nshould be made available. Default is network 0, the primary NSONE Global\nNetwork. Normally, you should not have to worry about this.\n"
                    },
                    "nxTtl": {
                        "type": "integer",
                        "description": "The SOA NX TTL. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                    },
                    "primary": {
                        "type": "string",
                        "description": "The primary zones' IPv4 address. This makes the zone a\nsecondary. Conflicts with `secondaries`.\n"
                    },
                    "refresh": {
                        "type": "integer",
                        "description": "The SOA Refresh. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "The SOA Retry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                    },
                    "secondaries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/ZoneSecondary:ZoneSecondary"
                        },
                        "description": "List of secondary servers. This makes the zone a\nprimary. Conflicts with `primary` and `additional_primaries`.\nSecondaries is documented below.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The SOA TTL.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The domain name of the zone.\n",
                        "language": {
                            "csharp": {
                                "name": "ZoneName"
                            }
                        }
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "ns1:index/getDNSSec:getDNSSec": {
            "description": "Provides DNSSEC details about a NS1 Zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\n// Get DNSSEC details about a NS1 Zone.\nconst exampleZone = new ns1.Zone(\"example\", {\n    dnssec: true,\n    zone: \"terraform.example.io\",\n});\nconst exampleDNSSec = exampleZone.zone.apply(zone =\u003e ns1.getDNSSec({\n    zone: zone,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\n# Get DNSSEC details about a NS1 Zone.\nexample_zone = ns1.Zone(\"exampleZone\",\n    dnssec=True,\n    zone=\"terraform.example.io\")\nexample_dns_sec = example_zone.zone.apply(lambda zone: ns1.get_dns_sec(zone=zone))\n```\n```csharp\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Get DNSSEC details about a NS1 Zone.\n        var exampleZone = new Ns1.Zone(\"exampleZone\", new Ns1.ZoneArgs\n        {\n            Dnssec = true,\n            Zone = \"terraform.example.io\",\n        });\n        var exampleDNSSec = exampleZone.ZoneName.Apply(zone =\u003e Ns1.GetDNSSec.InvokeAsync(new Ns1.GetDNSSecArgs\n        {\n            Zone = zone,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleZone, err := ns1.NewZone(ctx, \"exampleZone\", \u0026ns1.ZoneArgs{\n\t\t\tDnssec: pulumi.Bool(true),\n\t\t\tZone:   pulumi.String(\"terraform.example.io\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDNSSec.\n",
                "properties": {
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone to get DNSSEC details for.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDNSSec.\n",
                "properties": {
                    "delegation": {
                        "$ref": "#/types/ns1:index/getDNSSecDelegation:getDNSSecDelegation",
                        "description": "(Computed) - Delegation field is documented\nbelow.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "$ref": "#/types/ns1:index/getDNSSecKeys:getDNSSecKeys",
                        "description": "(Computed) - Keys field is documented below.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "delegation",
                    "keys",
                    "zone",
                    "id"
                ]
            }
        },
        "ns1:index/getRecord:getRecord": {
            "description": "Provides details about a NS1 Record. Use this if you would simply like to read\ninformation from NS1 into your configurations. For read/write operations, you\nshould use a resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\n// Get details about a NS1 Record.\nconst example = pulumi.output(ns1.getRecord({\n    domain: \"terraform.example.io\",\n    type: \"A\",\n    zone: \"example.io\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.get_record(domain=\"terraform.example.io\",\n    type=\"A\",\n    zone=\"example.io\")\n```\n```csharp\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ns1.GetRecord.InvokeAsync(new Ns1.GetRecordArgs\n        {\n            Domain = \"terraform.example.io\",\n            Type = \"A\",\n            Zone = \"example.io\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.LookupRecord(ctx, \u0026ns1.LookupRecordArgs{\n\t\t\tDomain: \"terraform.example.io\",\n\t\t\tType:   \"A\",\n\t\t\tZone:   \"example.io\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRecord.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The records' domain.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The records' RR type.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone the record belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "type",
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRecord.\n",
                "properties": {
                    "answers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getRecordAnswer:getRecordAnswer"
                        },
                        "description": "List of NS1 answers.\n"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getRecordFilter:getRecordFilter"
                        },
                        "description": "List of NS1 filters.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The target record this links to.\n"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map of metadata\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getRecordRegion:getRecordRegion"
                        },
                        "description": "List of regions.\n"
                    },
                    "shortAnswers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The records' time to live (in seconds).\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "useClientSubnet": {
                        "type": "boolean",
                        "description": "Whether to use EDNS client subnet data when available (in filter chain).\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "answers",
                    "domain",
                    "filters",
                    "link",
                    "meta",
                    "regions",
                    "shortAnswers",
                    "ttl",
                    "type",
                    "useClientSubnet",
                    "zone",
                    "id"
                ]
            }
        },
        "ns1:index/getZone:getZone": {
            "description": "Provides details about a NS1 Zone. Use this if you would simply like to read\ninformation from NS1 into your configurations. For read/write operations, you\nshould use a resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\n// Get details about a NS1 Zone.\nconst example = pulumi.output(ns1.getZone({\n    zone: \"terraform.example.io\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.get_zone(zone=\"terraform.example.io\")\n```\n```csharp\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Ns1.GetZone.InvokeAsync(new Ns1.GetZoneArgs\n        {\n            Zone = \"terraform.example.io\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.LookupZone(ctx, \u0026ns1.LookupZoneArgs{\n\t\t\tZone: \"terraform.example.io\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZone.\n",
                "properties": {
                    "additionalPrimaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of additional IPv4 addresses for the primary\nzone.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The domain name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getZone.\n",
                "properties": {
                    "additionalPrimaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of additional IPv4 addresses for the primary\nzone.\n"
                    },
                    "dnsServers": {
                        "type": "string",
                        "description": "Authoritative Name Servers.\n"
                    },
                    "dnssec": {
                        "type": "boolean",
                        "description": "Whether or not DNSSEC is enabled for the zone.\n"
                    },
                    "expiry": {
                        "type": "integer",
                        "description": "The SOA Expiry.\n"
                    },
                    "hostmaster": {
                        "type": "string",
                        "description": "The SOA Hostmaster.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The linked target zone.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of network IDs (`int`) for which the zone should be made\navailable. Default is network 0, the primary NSONE Global Network.\n"
                    },
                    "nxTtl": {
                        "type": "integer",
                        "description": "The SOA NX TTL.\n"
                    },
                    "primary": {
                        "type": "string",
                        "description": "The primary zones' IPv4 address.\n"
                    },
                    "refresh": {
                        "type": "integer",
                        "description": "The SOA Refresh.\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "The SOA Retry.\n"
                    },
                    "secondaries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getZoneSecondary:getZoneSecondary"
                        },
                        "description": "List of secondary servers. Secondaries is\ndocumented below.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The SOA TTL.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dnsServers",
                    "dnssec",
                    "expiry",
                    "hostmaster",
                    "link",
                    "networks",
                    "nxTtl",
                    "primary",
                    "refresh",
                    "retry",
                    "secondaries",
                    "ttl",
                    "zone",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-ns1/sdk/go/ns1"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.15.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing ns1 cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ns1-terraform/terraform-provider-ns1)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-ns1` repo](https://github.com/pulumi/pulumi-ns1/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`ns1-terraform/terraform-provider-ns1` repo](https://github.com/ns1-terraform/terraform-provider-ns1/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ns1-terraform/terraform-provider-ns1)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-ns1` repo](https://github.com/pulumi/pulumi-ns1/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`ns1-terraform/terraform-provider-ns1` repo](https://github.com/ns1-terraform/terraform-provider-ns1/issues).",
            "requires": {
                "pulumi": "\u003e=2.15.0,\u003c3.0.0"
            }
        }
    }
}