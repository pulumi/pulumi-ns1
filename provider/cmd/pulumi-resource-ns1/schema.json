{
    "name": "ns1",
    "description": "A Pulumi package for creating and managing ns1 cloud resources.",
    "keywords": [
        "pulumi",
        "ns1"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`ns1` Terraform Provider](https://github.com/ns1-terraform/terraform-provider-ns1).",
    "repository": "https://github.com/pulumi/pulumi-ns1",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing ns1 cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ns1-terraform/terraform-provider-ns1)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-ns1` repo](https://github.com/pulumi/pulumi-ns1/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-ns1` repo](https://github.com/ns1-terraform/terraform-provider-ns1/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ns1-terraform/terraform-provider-ns1)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-ns1` repo](https://github.com/pulumi/pulumi-ns1/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-ns1` repo](https://github.com/ns1-terraform/terraform-provider-ns1/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apikey": {
                "type": "string",
                "description": "The ns1 API key (required)\n"
            },
            "enableDdi": {
                "type": "boolean",
                "description": "Deprecated, no longer in use\n"
            },
            "endpoint": {
                "type": "string",
                "description": "URL prefix (including version) for API calls\n"
            },
            "ignoreSsl": {
                "type": "boolean",
                "description": "Don't validate server SSL/TLS certificate\n"
            },
            "rateLimitParallelism": {
                "type": "integer",
                "description": "Tune response to rate limits, see docs\n"
            },
            "retryMax": {
                "type": "integer",
                "description": "Maximum retries for 50x errors (-1 to disable)\n"
            },
            "userAgent": {
                "type": "string",
                "description": "User-Agent string to use in NS1 API requests\n"
            }
        }
    },
    "types": {
        "ns1:index/APIKeyDnsRecordsAllow:APIKeyDnsRecordsAllow": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "includeSubdomains": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "includeSubdomains",
                "type",
                "zone"
            ]
        },
        "ns1:index/APIKeyDnsRecordsDeny:APIKeyDnsRecordsDeny": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "includeSubdomains": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "includeSubdomains",
                "type",
                "zone"
            ]
        },
        "ns1:index/ApplicationDefaultConfig:ApplicationDefaultConfig": {
            "properties": {
                "http": {
                    "type": "boolean",
                    "description": "Indicates whether or not to use HTTP in measurements.\n"
                },
                "https": {
                    "type": "boolean",
                    "description": "Indicates whether or not to use HTTPS in measurements.\n"
                },
                "jobTimeoutMillis": {
                    "type": "integer",
                    "description": "Maximum timeout per job\n0, the primary NSONE Global Network. Normally, you should not have to worry about this.\n"
                },
                "requestTimeoutMillis": {
                    "type": "integer",
                    "description": "Maximum timeout per request.\n"
                },
                "staticValues": {
                    "type": "boolean",
                    "description": "Indicates whether or not to skip aggregation for this job's measurements\n"
                },
                "useXhr": {
                    "type": "boolean",
                    "description": "Whether to use XMLHttpRequest (XHR) when taking measurements.\n"
                }
            },
            "type": "object",
            "required": [
                "http"
            ]
        },
        "ns1:index/MonitoringJobRule:MonitoringJobRule": {
            "properties": {
                "comparison": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comparison",
                "key",
                "value"
            ]
        },
        "ns1:index/NotifyListNotification:NotifyListNotification": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Configuration details for the given notifier type.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of notifier. Available notifiers are indicated in /notifytypes endpoint.\n"
                }
            },
            "type": "object",
            "required": [
                "config",
                "type"
            ]
        },
        "ns1:index/PulsarJobBlendMetricWeights:PulsarJobBlendMetricWeights": {
            "properties": {
                "timestamp": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "timestamp"
            ]
        },
        "ns1:index/PulsarJobConfig:PulsarJobConfig": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "http": {
                    "type": "boolean"
                },
                "https": {
                    "type": "boolean"
                },
                "jobTimeoutMillis": {
                    "type": "integer"
                },
                "requestTimeoutMillis": {
                    "type": "integer"
                },
                "staticValues": {
                    "type": "boolean"
                },
                "urlPath": {
                    "type": "string"
                },
                "useXhr": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ns1:index/PulsarJobWeight:PulsarJobWeight": {
            "properties": {
                "defaultValue": {
                    "type": "number"
                },
                "maximize": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "defaultValue",
                "name",
                "weight"
            ]
        },
        "ns1:index/RecordAnswer:RecordAnswer": {
            "properties": {
                "answer": {
                    "type": "string",
                    "description": "Space delimited string of RDATA fields dependent on the record type.\n\nA:\n\nCNAME:\n\nMX:\n\nSRV:\n\nSPF:\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The region (Answer Group really) that this answer\nbelongs to. This should be one of the names specified in `regions`. Only a\nsingle `region` per answer is currently supported. If you want an answer in\nmultiple regions, duplicating the answer (including metadata) is the correct\napproach.\n"
                }
            },
            "type": "object"
        },
        "ns1:index/RecordFilter:RecordFilter": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The filters' configuration. Simple key/value pairs\ndetermined by the filter type.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Determines whether the filter is applied in the\nfilter chain.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "The type of filter.\n"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "ns1:index/RecordRegion:RecordRegion": {
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the region (or Answer Group).\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "ns1:index/TeamDnsRecordsAllow:TeamDnsRecordsAllow": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "includeSubdomains": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "includeSubdomains",
                "type",
                "zone"
            ]
        },
        "ns1:index/TeamDnsRecordsDeny:TeamDnsRecordsDeny": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "includeSubdomains": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "includeSubdomains",
                "type",
                "zone"
            ]
        },
        "ns1:index/TeamIpWhitelist:TeamIpWhitelist": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The free form name of the team.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "ns1:index/UserDnsRecordsAllow:UserDnsRecordsAllow": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "includeSubdomains": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "includeSubdomains",
                "type",
                "zone"
            ]
        },
        "ns1:index/UserDnsRecordsDeny:UserDnsRecordsDeny": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "includeSubdomains": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "includeSubdomains",
                "type",
                "zone"
            ]
        },
        "ns1:index/ZoneSecondary:ZoneSecondary": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the secondary server.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of network IDs (`int`) for which the zone\nshould be made available. Default is network 0, the primary NSONE Global\nNetwork. Normally, you should not have to worry about this.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Whether we send `NOTIFY` messages to the secondary host\nwhen the zone changes. Default `false`.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the the secondary server. Default `53`.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "networks",
                        "notify",
                        "port"
                    ]
                }
            }
        },
        "ns1:index/getDNSSecDelegation:getDNSSecDelegation": {
            "properties": {
                "dnskeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/getDNSSecDelegationDnskey:getDNSSecDelegationDnskey"
                    },
                    "description": "(Computed) List of Keys. Key is documented below.\n"
                },
                "ds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/getDNSSecDelegationD:getDNSSecDelegationD"
                    },
                    "description": "(Computed) List of Keys. Key is documented below.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Computed) TTL for the Keys (int).\n"
                }
            },
            "type": "object",
            "required": [
                "dnskeys",
                "ds",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getDNSSecDelegationD:getDNSSecDelegationD": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "(Computed) Algorithm of the key.\n"
                },
                "flags": {
                    "type": "string",
                    "description": "(Computed) Flags for the key.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "(Computed) Protocol of the key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "(Computed) Public key for the key.\n"
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "flags",
                "protocol",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getDNSSecDelegationDnskey:getDNSSecDelegationDnskey": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "(Computed) Algorithm of the key.\n"
                },
                "flags": {
                    "type": "string",
                    "description": "(Computed) Flags for the key.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "(Computed) Protocol of the key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "(Computed) Public key for the key.\n"
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "flags",
                "protocol",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getDNSSecKey:getDNSSecKey": {
            "properties": {
                "dnskeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/getDNSSecKeyDnskey:getDNSSecKeyDnskey"
                    },
                    "description": "(Computed) List of Keys. Key is documented below.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "(Computed) TTL for the Keys (int).\n"
                }
            },
            "type": "object",
            "required": [
                "dnskeys",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getDNSSecKeyDnskey:getDNSSecKeyDnskey": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "(Computed) Algorithm of the key.\n"
                },
                "flags": {
                    "type": "string",
                    "description": "(Computed) Flags for the key.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "(Computed) Protocol of the key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "(Computed) Public key for the key.\n"
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "flags",
                "protocol",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getNetworksNetwork:getNetworksNetwork": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Label associated with the network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "network ID (`int`). Default is network 0, the primary NS1 Managed DNS Network.\n"
                }
            },
            "type": "object",
            "required": [
                "label",
                "name",
                "networkId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getRecordAnswer:getRecordAnswer": {
            "properties": {
                "answer": {
                    "type": "string"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of metadata\n"
                },
                "region": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "answer",
                "meta",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getRecordFilter:getRecordFilter": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "disabled": {
                    "type": "boolean"
                },
                "filter": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "config",
                "disabled",
                "filter"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getRecordRegion:getRecordRegion": {
            "properties": {
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of metadata\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "meta",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "ns1:index/getZoneSecondary:getZoneSecondary": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IPv4 address of the secondary server.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of network IDs (`int`) for which the zone should be made\navailable. Default is network 0, the primary NSONE Global Network.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Whether we send `NOTIFY` messages to the secondary host\nwhen the zone changes. Default `false`.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the the secondary server. Default `53`.\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "networks",
                "notify",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the ns1 package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apikey": {
                "type": "string",
                "description": "The ns1 API key (required)\n"
            },
            "enableDdi": {
                "type": "boolean",
                "description": "Deprecated, no longer in use\n"
            },
            "endpoint": {
                "type": "string",
                "description": "URL prefix (including version) for API calls\n"
            },
            "ignoreSsl": {
                "type": "boolean",
                "description": "Don't validate server SSL/TLS certificate\n"
            },
            "rateLimitParallelism": {
                "type": "integer",
                "description": "Tune response to rate limits, see docs\n"
            },
            "retryMax": {
                "type": "integer",
                "description": "Maximum retries for 50x errors (-1 to disable)\n"
            },
            "userAgent": {
                "type": "string",
                "description": "User-Agent string to use in NS1 API requests\n"
            }
        },
        "inputProperties": {
            "apikey": {
                "type": "string",
                "description": "The ns1 API key (required)\n"
            },
            "enableDdi": {
                "type": "boolean",
                "description": "Deprecated, no longer in use\n"
            },
            "endpoint": {
                "type": "string",
                "description": "URL prefix (including version) for API calls\n"
            },
            "ignoreSsl": {
                "type": "boolean",
                "description": "Don't validate server SSL/TLS certificate\n"
            },
            "rateLimitParallelism": {
                "type": "integer",
                "description": "Tune response to rate limits, see docs\n"
            },
            "retryMax": {
                "type": "integer",
                "description": "Maximum retries for 50x errors (-1 to disable)\n"
            },
            "userAgent": {
                "type": "string",
                "description": "User-Agent string to use in NS1 API requests\n"
            }
        }
    },
    "resources": {
        "ns1:index/aPIKey:APIKey": {
            "description": "Provides a NS1 Api Key resource. This can be used to create, modify, and delete api keys.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst exampleTeam = new ns1.Team(\"exampleTeam\", {});\nconst exampleAPIKey = new ns1.APIKey(\"exampleAPIKey\", {\n    teams: [exampleTeam.id],\n    ipWhitelists: [\n        \"1.1.1.1\",\n        \"2.2.2.2\",\n    ],\n    dnsViewZones: false,\n    accountManageUsers: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample_team = ns1.Team(\"exampleTeam\")\nexample_api_key = ns1.APIKey(\"exampleAPIKey\",\n    teams=[example_team.id],\n    ip_whitelists=[\n        \"1.1.1.1\",\n        \"2.2.2.2\",\n    ],\n    dns_view_zones=False,\n    account_manage_users=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = new Ns1.Team(\"exampleTeam\");\n\n    var exampleAPIKey = new Ns1.APIKey(\"exampleAPIKey\", new()\n    {\n        Teams = new[]\n        {\n            exampleTeam.Id,\n        },\n        IpWhitelists = new[]\n        {\n            \"1.1.1.1\",\n            \"2.2.2.2\",\n        },\n        DnsViewZones = false,\n        AccountManageUsers = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := ns1.NewTeam(ctx, \"exampleTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ns1.NewAPIKey(ctx, \"exampleAPIKey\", \u0026ns1.APIKeyArgs{\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texampleTeam.ID(),\n\t\t\t},\n\t\t\tIpWhitelists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1.1.1.1\"),\n\t\t\t\tpulumi.String(\"2.2.2.2\"),\n\t\t\t},\n\t\t\tDnsViewZones:       pulumi.Bool(false),\n\t\t\tAccountManageUsers: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.Team;\nimport com.pulumi.ns1.APIKey;\nimport com.pulumi.ns1.APIKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleTeam = new Team(\"exampleTeam\");\n\n        var exampleAPIKey = new APIKey(\"exampleAPIKey\", APIKeyArgs.builder()        \n            .teams(exampleTeam.id())\n            .ipWhitelists(            \n                \"1.1.1.1\",\n                \"2.2.2.2\")\n            .dnsViewZones(false)\n            .accountManageUsers(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTeam:\n    type: ns1:Team\n  exampleAPIKey:\n    type: ns1:APIKey\n    properties:\n      teams:\n        - ${exampleTeam.id}\n      # Optional IP whitelist\n      ipWhitelists:\n        - 1.1.1.1\n        - 2.2.2.2\n      # Configure permissions\n      dnsViewZones: false\n      accountManageUsers: false\n```\n{{% /example %}}\n{{% /examples %}}\n## Permissions\n\nAn API key will inherit permissions from the teams it is assigned to.\nIf a key is assigned to a team and also has individual permissions set on the key, the individual permissions\nwill be overridden by the inherited team permissions.\nIn a future release, setting permissions on a key that is part of a team will be explicitly disabled.\n\nWhen a key is removed from all teams completely, it will inherit whatever permissions it had previously.\nIf a key is removed from all it's teams, it will probably be necessary to run `pulumi up` a second time\nto update the keys permissions from it's old team permissions to new key-specific permissions.\n\nSee [the NS1 API docs](https://ns1.com/api#getget-all-account-users) for an overview of permission semantics or for [more details](https://help.ns1.com/hc/en-us/articles/360024409034-Managing-user-permissions) about the individual permission flags.\n\n## NS1 Documentation\n\n[ApiKeys Api Doc](https://ns1.com/api#api-key)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/aPIKey:APIKey `ns1_apikey`\n```\n\n So for the example above\n\n```sh\n $ pulumi import ns1:index/aPIKey:APIKey example \u003cID\u003e`\n```\n\n ",
            "properties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "(Deprecated) No longer in use.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the apikey can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the apikey can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the apikey can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the apikey can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify the accounts zones.\n"
                },
                "dnsRecordsAllows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/APIKeyDnsRecordsAllow:APIKeyDnsRecordsAllow"
                    },
                    "description": "List of records that the apikey may access.\n"
                },
                "dnsRecordsDenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/APIKeyDnsRecordsDeny:APIKeyDnsRecordsDeny"
                    },
                    "description": "List of records that the apikey may not access.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the apikey can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the apikey may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the apikey may not access.\n"
                },
                "ipWhitelistStrict": {
                    "type": "boolean",
                    "description": "Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IP addresses/networks to which to grant the API key access.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean",
                    "description": "Whether the apikey can view IPAM.\nOnly relevant for the DDI product.\n"
                },
                "key": {
                    "type": "string",
                    "description": "(Computed) The apikeys authentication token.\n",
                    "secret": true
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the apikey can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the apikey.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage global two factor authentication.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams that the apikey belongs to.\n"
                }
            },
            "required": [
                "key",
                "name"
            ],
            "inputProperties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "(Deprecated) No longer in use.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the apikey can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the apikey can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the apikey can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the apikey can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify the accounts zones.\n"
                },
                "dnsRecordsAllows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/APIKeyDnsRecordsAllow:APIKeyDnsRecordsAllow"
                    },
                    "description": "List of records that the apikey may access.\n"
                },
                "dnsRecordsDenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/APIKeyDnsRecordsDeny:APIKeyDnsRecordsDeny"
                    },
                    "description": "List of records that the apikey may not access.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the apikey can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the apikey may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the apikey may not access.\n"
                },
                "ipWhitelistStrict": {
                    "type": "boolean",
                    "description": "Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IP addresses/networks to which to grant the API key access.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean",
                    "description": "Whether the apikey can view IPAM.\nOnly relevant for the DDI product.\n"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the apikey can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the apikey can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the apikey.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the apikey can manage global two factor authentication.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams that the apikey belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering APIKey resources.\n",
                "properties": {
                    "accountManageAccountSettings": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify account settings.\n"
                    },
                    "accountManageApikeys": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify account apikeys.\n"
                    },
                    "accountManageIpWhitelist": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage ip whitelist.\n"
                    },
                    "accountManagePaymentMethods": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify account payment methods.\n"
                    },
                    "accountManagePlan": {
                        "type": "boolean",
                        "description": "(Deprecated) No longer in use.\n",
                        "deprecationMessage": "obsolete, should no longer be used"
                    },
                    "accountManageTeams": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify other teams in the account.\n"
                    },
                    "accountManageUsers": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify account users.\n"
                    },
                    "accountViewActivityLog": {
                        "type": "boolean",
                        "description": "Whether the apikey can view activity logs.\n"
                    },
                    "accountViewInvoices": {
                        "type": "boolean",
                        "description": "Whether the apikey can view invoices.\n"
                    },
                    "dataManageDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify data feeds.\n"
                    },
                    "dataManageDatasources": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify data sources.\n"
                    },
                    "dataPushToDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the apikey can publish to data feeds.\n"
                    },
                    "dhcpManageDhcp": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dhcpViewDhcp": {
                        "type": "boolean",
                        "description": "Whether the apikey can view DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dnsManageZones": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify the accounts zones.\n"
                    },
                    "dnsRecordsAllows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/APIKeyDnsRecordsAllow:APIKeyDnsRecordsAllow"
                        },
                        "description": "List of records that the apikey may access.\n"
                    },
                    "dnsRecordsDenies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/APIKeyDnsRecordsDeny:APIKeyDnsRecordsDeny"
                        },
                        "description": "List of records that the apikey may not access.\n"
                    },
                    "dnsViewZones": {
                        "type": "boolean",
                        "description": "Whether the apikey can view the accounts zones.\n"
                    },
                    "dnsZonesAllowByDefault": {
                        "type": "boolean",
                        "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                    },
                    "dnsZonesAllows": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the apikey may access.\n"
                    },
                    "dnsZonesDenies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the apikey may not access.\n"
                    },
                    "ipWhitelistStrict": {
                        "type": "boolean",
                        "description": "Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.\n"
                    },
                    "ipWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of IP addresses/networks to which to grant the API key access.\n"
                    },
                    "ipamManageIpam": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "ipamViewIpam": {
                        "type": "boolean",
                        "description": "Whether the apikey can view IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "(Computed) The apikeys authentication token.\n",
                        "secret": true
                    },
                    "monitoringManageJobs": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify monitoring jobs.\n"
                    },
                    "monitoringManageLists": {
                        "type": "boolean",
                        "description": "Whether the apikey can modify notification lists.\n"
                    },
                    "monitoringViewJobs": {
                        "type": "boolean",
                        "description": "Whether the apikey can view monitoring jobs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the apikey.\n"
                    },
                    "securityManageActiveDirectory": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage global active directory.\nOnly relevant for the DDI product.\n"
                    },
                    "securityManageGlobal2fa": {
                        "type": "boolean",
                        "description": "Whether the apikey can manage global two factor authentication.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The teams that the apikey belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/accountWhitelist:AccountWhitelist": {
            "description": "Provides a NS1 Global IP Whitelist resource.\n\nThis can be used to create, modify, and delete Global IP Whitelists.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst example = new ns1.AccountWhitelist(\"example\", {values: [\n    \"1.1.1.1\",\n    \"2.2.2.2\",\n]});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.AccountWhitelist(\"example\", values=[\n    \"1.1.1.1\",\n    \"2.2.2.2\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ns1.AccountWhitelist(\"example\", new()\n    {\n        Values = new[]\n        {\n            \"1.1.1.1\",\n            \"2.2.2.2\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewAccountWhitelist(ctx, \"example\", \u0026ns1.AccountWhitelistArgs{\n\t\t\tValues: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1.1.1.1\"),\n\t\t\t\tpulumi.String(\"2.2.2.2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.AccountWhitelist;\nimport com.pulumi.ns1.AccountWhitelistArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AccountWhitelist(\"example\", AccountWhitelistArgs.builder()        \n            .values(            \n                \"1.1.1.1\",\n                \"2.2.2.2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ns1:AccountWhitelist\n    properties:\n      values:\n        - 1.1.1.1\n        - 2.2.2.2\n```\n\n\u003e You current source IP must be present in one of the whitelists to prevent locking yourself out.\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[Global IP Whitelist Doc](https://ns1.com/api?docId=2282)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/accountWhitelist:AccountWhitelist example \u003cID\u003e`\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The free form name of the whitelist.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IP addresses/networks from which to allow access.\n"
                }
            },
            "required": [
                "name",
                "values"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The free form name of the whitelist.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IP addresses/networks from which to allow access.\n"
                }
            },
            "requiredInputs": [
                "values"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountWhitelist resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The free form name of the whitelist.\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of IP addresses/networks from which to allow access.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/application:Application": {
            "description": "Provides a NS1 Pulsar application resource. This can be used to create, modify, and delete applications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\n// Create a new pulsar application with default config\nconst ns1App = new ns1.Application(\"ns1App\", {defaultConfig: {\n    http: true,\n    https: false,\n    jobTimeoutMillis: 100,\n    requestTimeoutMillis: 100,\n    staticValues: true,\n}});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\n# Create a new pulsar application with default config\nns1_app = ns1.Application(\"ns1App\", default_config=ns1.ApplicationDefaultConfigArgs(\n    http=True,\n    https=False,\n    job_timeout_millis=100,\n    request_timeout_millis=100,\n    static_values=True,\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new pulsar application with default config\n    var ns1App = new Ns1.Application(\"ns1App\", new()\n    {\n        DefaultConfig = new Ns1.Inputs.ApplicationDefaultConfigArgs\n        {\n            Http = true,\n            Https = false,\n            JobTimeoutMillis = 100,\n            RequestTimeoutMillis = 100,\n            StaticValues = true,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewApplication(ctx, \"ns1App\", \u0026ns1.ApplicationArgs{\n\t\t\tDefaultConfig: \u0026ns1.ApplicationDefaultConfigArgs{\n\t\t\t\tHttp:                 pulumi.Bool(true),\n\t\t\t\tHttps:                pulumi.Bool(false),\n\t\t\t\tJobTimeoutMillis:     pulumi.Int(100),\n\t\t\t\tRequestTimeoutMillis: pulumi.Int(100),\n\t\t\t\tStaticValues:         pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.Application;\nimport com.pulumi.ns1.ApplicationArgs;\nimport com.pulumi.ns1.inputs.ApplicationDefaultConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ns1App = new Application(\"ns1App\", ApplicationArgs.builder()        \n            .defaultConfig(ApplicationDefaultConfigArgs.builder()\n                .http(true)\n                .https(false)\n                .jobTimeoutMillis(100)\n                .requestTimeoutMillis(100)\n                .staticValues(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new pulsar application with default config\n  ns1App:\n    type: ns1:Application\n    properties:\n      defaultConfig:\n        http: true\n        https: false\n        jobTimeoutMillis: 100\n        requestTimeoutMillis: 100\n        staticValues: true\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[Application Api Docs](https://ns1.com/api#get-list-pulsar-applications)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/application:Application `ns1_application`\n```\n\n So for the example above\n\n```sh\n $ pulumi import ns1:index/application:Application example terraform.example.io`\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether or not this application is currently active and usable for traffic\nsteering.\n"
                },
                "browserWaitMillis": {
                    "type": "integer",
                    "description": "The amount of time (in milliseconds) the browser should wait before running\nmeasurements.\n"
                },
                "defaultConfig": {
                    "$ref": "#/types/ns1:index/ApplicationDefaultConfig:ApplicationDefaultConfig",
                    "description": "Default job configuration. If a field is present here and not on a specific job\nassociated with this application, the default value specified here is used..\n"
                },
                "jobsPerTransaction": {
                    "type": "integer",
                    "description": "Number of jobs to measure per user impression.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Descriptive name for this Pulsar app.\n"
                }
            },
            "required": [
                "defaultConfig",
                "name"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether or not this application is currently active and usable for traffic\nsteering.\n"
                },
                "browserWaitMillis": {
                    "type": "integer",
                    "description": "The amount of time (in milliseconds) the browser should wait before running\nmeasurements.\n"
                },
                "defaultConfig": {
                    "$ref": "#/types/ns1:index/ApplicationDefaultConfig:ApplicationDefaultConfig",
                    "description": "Default job configuration. If a field is present here and not on a specific job\nassociated with this application, the default value specified here is used..\n"
                },
                "jobsPerTransaction": {
                    "type": "integer",
                    "description": "Number of jobs to measure per user impression.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Descriptive name for this Pulsar app.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Application resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Indicates whether or not this application is currently active and usable for traffic\nsteering.\n"
                    },
                    "browserWaitMillis": {
                        "type": "integer",
                        "description": "The amount of time (in milliseconds) the browser should wait before running\nmeasurements.\n"
                    },
                    "defaultConfig": {
                        "$ref": "#/types/ns1:index/ApplicationDefaultConfig:ApplicationDefaultConfig",
                        "description": "Default job configuration. If a field is present here and not on a specific job\nassociated with this application, the default value specified here is used..\n"
                    },
                    "jobsPerTransaction": {
                        "type": "integer",
                        "description": "Number of jobs to measure per user impression.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Descriptive name for this Pulsar app.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/dataFeed:DataFeed": {
            "description": "Provides a NS1 Data Feed resource. This can be used to create, modify, and delete data feeds.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst example = new ns1.DataSource(\"example\", {sourcetype: \"nsone_v1\"});\nconst exampleMonitoring = new ns1.DataSource(\"exampleMonitoring\", {sourcetype: \"nsone_monitoring\"});\nconst uswestFeed = new ns1.DataFeed(\"uswestFeed\", {\n    sourceId: example.id,\n    config: {\n        label: \"uswest\",\n    },\n});\nconst useastFeed = new ns1.DataFeed(\"useastFeed\", {\n    sourceId: example.id,\n    config: {\n        label: \"useast\",\n    },\n});\nconst useastMonitorFeed = new ns1.DataFeed(\"useastMonitorFeed\", {\n    sourceId: exampleMonitoring.id,\n    config: {\n        jobid: ns1_monitoringjob.example_job.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.DataSource(\"example\", sourcetype=\"nsone_v1\")\nexample_monitoring = ns1.DataSource(\"exampleMonitoring\", sourcetype=\"nsone_monitoring\")\nuswest_feed = ns1.DataFeed(\"uswestFeed\",\n    source_id=example.id,\n    config={\n        \"label\": \"uswest\",\n    })\nuseast_feed = ns1.DataFeed(\"useastFeed\",\n    source_id=example.id,\n    config={\n        \"label\": \"useast\",\n    })\nuseast_monitor_feed = ns1.DataFeed(\"useastMonitorFeed\",\n    source_id=example_monitoring.id,\n    config={\n        \"jobid\": ns1_monitoringjob[\"example_job\"][\"id\"],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ns1.DataSource(\"example\", new()\n    {\n        Sourcetype = \"nsone_v1\",\n    });\n\n    var exampleMonitoring = new Ns1.DataSource(\"exampleMonitoring\", new()\n    {\n        Sourcetype = \"nsone_monitoring\",\n    });\n\n    var uswestFeed = new Ns1.DataFeed(\"uswestFeed\", new()\n    {\n        SourceId = example.Id,\n        Config = \n        {\n            { \"label\", \"uswest\" },\n        },\n    });\n\n    var useastFeed = new Ns1.DataFeed(\"useastFeed\", new()\n    {\n        SourceId = example.Id,\n        Config = \n        {\n            { \"label\", \"useast\" },\n        },\n    });\n\n    var useastMonitorFeed = new Ns1.DataFeed(\"useastMonitorFeed\", new()\n    {\n        SourceId = exampleMonitoring.Id,\n        Config = \n        {\n            { \"jobid\", ns1_monitoringjob.Example_job.Id },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ns1.NewDataSource(ctx, \"example\", \u0026ns1.DataSourceArgs{\n\t\t\tSourcetype: pulumi.String(\"nsone_v1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleMonitoring, err := ns1.NewDataSource(ctx, \"exampleMonitoring\", \u0026ns1.DataSourceArgs{\n\t\t\tSourcetype: pulumi.String(\"nsone_monitoring\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ns1.NewDataFeed(ctx, \"uswestFeed\", \u0026ns1.DataFeedArgs{\n\t\t\tSourceId: example.ID(),\n\t\t\tConfig: pulumi.Map{\n\t\t\t\t\"label\": pulumi.Any(\"uswest\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ns1.NewDataFeed(ctx, \"useastFeed\", \u0026ns1.DataFeedArgs{\n\t\t\tSourceId: example.ID(),\n\t\t\tConfig: pulumi.Map{\n\t\t\t\t\"label\": pulumi.Any(\"useast\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ns1.NewDataFeed(ctx, \"useastMonitorFeed\", \u0026ns1.DataFeedArgs{\n\t\t\tSourceId: exampleMonitoring.ID(),\n\t\t\tConfig: pulumi.Map{\n\t\t\t\t\"jobid\": pulumi.Any(ns1_monitoringjob.Example_job.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.DataSource;\nimport com.pulumi.ns1.DataSourceArgs;\nimport com.pulumi.ns1.DataFeed;\nimport com.pulumi.ns1.DataFeedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DataSource(\"example\", DataSourceArgs.builder()        \n            .sourcetype(\"nsone_v1\")\n            .build());\n\n        var exampleMonitoring = new DataSource(\"exampleMonitoring\", DataSourceArgs.builder()        \n            .sourcetype(\"nsone_monitoring\")\n            .build());\n\n        var uswestFeed = new DataFeed(\"uswestFeed\", DataFeedArgs.builder()        \n            .sourceId(example.id())\n            .config(Map.of(\"label\", \"uswest\"))\n            .build());\n\n        var useastFeed = new DataFeed(\"useastFeed\", DataFeedArgs.builder()        \n            .sourceId(example.id())\n            .config(Map.of(\"label\", \"useast\"))\n            .build());\n\n        var useastMonitorFeed = new DataFeed(\"useastMonitorFeed\", DataFeedArgs.builder()        \n            .sourceId(exampleMonitoring.id())\n            .config(Map.of(\"jobid\", ns1_monitoringjob.example_job().id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ns1:DataSource\n    properties:\n      sourcetype: nsone_v1\n  exampleMonitoring:\n    type: ns1:DataSource\n    properties:\n      sourcetype: nsone_monitoring\n  uswestFeed:\n    type: ns1:DataFeed\n    properties:\n      sourceId: ${example.id}\n      config:\n        label: uswest\n  useastFeed:\n    type: ns1:DataFeed\n    properties:\n      sourceId: ${example.id}\n      config:\n        label: useast\n  useastMonitorFeed:\n    type: ns1:DataFeed\n    properties:\n      sourceId: ${exampleMonitoring.id}\n      config:\n        jobid: ${ns1_monitoringjob.example_job.id}\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[Datafeed Api Doc](https://ns1.com/api#data-feeds)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/dataFeed:DataFeed \u003cname\u003e \u003cdatasource_id\u003e/\u003cdatafeed_id\u003e`\n```\n\n ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The feeds configuration matching the specification in\n`feed_config` from /data/sourcetypes. `jobid` is required in the `config` for datafeeds connected to NS1 monitoring.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the data feed.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The data source id that this feed is connected to.\n"
                }
            },
            "required": [
                "name",
                "sourceId"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The feeds configuration matching the specification in\n`feed_config` from /data/sourcetypes. `jobid` is required in the `config` for datafeeds connected to NS1 monitoring.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the data feed.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "The data source id that this feed is connected to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "sourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataFeed resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The feeds configuration matching the specification in\n`feed_config` from /data/sourcetypes. `jobid` is required in the `config` for datafeeds connected to NS1 monitoring.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the data feed.\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "The data source id that this feed is connected to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/dataSource:DataSource": {
            "description": "Provides a NS1 Data Source resource. This can be used to create, modify, and delete data sources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst example = new ns1.DataSource(\"example\", {sourcetype: \"nsone_v1\"});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.DataSource(\"example\", sourcetype=\"nsone_v1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ns1.DataSource(\"example\", new()\n    {\n        Sourcetype = \"nsone_v1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewDataSource(ctx, \"example\", \u0026ns1.DataSourceArgs{\n\t\t\tSourcetype: pulumi.String(\"nsone_v1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.DataSource;\nimport com.pulumi.ns1.DataSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DataSource(\"example\", DataSourceArgs.builder()        \n            .sourcetype(\"nsone_v1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ns1:DataSource\n    properties:\n      sourcetype: nsone_v1\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[Datasource Api Doc](https://ns1.com/api#data-sources)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/dataSource:DataSource \u003cname\u003e \u003cdatasource_id\u003e`\n```\n\n ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The data source configuration, determined by its type,\nmatching the specification in `config` from /data/sourcetypes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the data source.\n"
                },
                "sourcetype": {
                    "type": "string",
                    "description": "The data sources type, listed in API endpoint https://api.nsone.net/v1/data/sourcetypes.\n"
                }
            },
            "required": [
                "name",
                "sourcetype"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The data source configuration, determined by its type,\nmatching the specification in `config` from /data/sourcetypes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the data source.\n"
                },
                "sourcetype": {
                    "type": "string",
                    "description": "The data sources type, listed in API endpoint https://api.nsone.net/v1/data/sourcetypes.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "sourcetype"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataSource resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The data source configuration, determined by its type,\nmatching the specification in `config` from /data/sourcetypes.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the data source.\n"
                    },
                    "sourcetype": {
                        "type": "string",
                        "description": "The data sources type, listed in API endpoint https://api.nsone.net/v1/data/sourcetypes.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/dnsview:Dnsview": {
            "properties": {
                "createdAt": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "preference": {
                    "type": "integer"
                },
                "readAcls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updateAcls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "integer"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "createdAt",
                "name",
                "preference",
                "updatedAt"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "preference": {
                    "type": "integer"
                },
                "readAcls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updateAcls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dnsview resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "preference": {
                        "type": "integer"
                    },
                    "readAcls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updateAcls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/monitoringJob:MonitoringJob": {
            "description": "Provides a NS1 Monitoring Job resource. This can be used to create, modify, and delete monitoring jobs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst uswestMonitor = new ns1.MonitoringJob(\"uswestMonitor\", {\n    active: true,\n    config: {\n        host: \"example-elb-uswest.aws.amazon.com\",\n        port: 443,\n        send: \"HEAD / HTTP/1.0\\\\r\\\\n\\\\r\\\\n\",\n        ssl: 1,\n    },\n    frequency: 60,\n    jobType: \"tcp\",\n    mute: true,\n    policy: \"quorum\",\n    rapidRecheck: true,\n    regions: [\n        \"lga\",\n        \"sjc\",\n        \"sin\",\n    ],\n    rules: [{\n        comparison: \"contains\",\n        key: \"output\",\n        value: \"200 OK\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nuswest_monitor = ns1.MonitoringJob(\"uswestMonitor\",\n    active=True,\n    config={\n        \"host\": \"example-elb-uswest.aws.amazon.com\",\n        \"port\": 443,\n        \"send\": \"HEAD / HTTP/1.0\\\\r\\\\n\\\\r\\\\n\",\n        \"ssl\": 1,\n    },\n    frequency=60,\n    job_type=\"tcp\",\n    mute=True,\n    policy=\"quorum\",\n    rapid_recheck=True,\n    regions=[\n        \"lga\",\n        \"sjc\",\n        \"sin\",\n    ],\n    rules=[ns1.MonitoringJobRuleArgs(\n        comparison=\"contains\",\n        key=\"output\",\n        value=\"200 OK\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var uswestMonitor = new Ns1.MonitoringJob(\"uswestMonitor\", new()\n    {\n        Active = true,\n        Config = \n        {\n            { \"host\", \"example-elb-uswest.aws.amazon.com\" },\n            { \"port\", 443 },\n            { \"send\", \"HEAD / HTTP/1.0\\\\r\\\\n\\\\r\\\\n\" },\n            { \"ssl\", 1 },\n        },\n        Frequency = 60,\n        JobType = \"tcp\",\n        Mute = true,\n        Policy = \"quorum\",\n        RapidRecheck = true,\n        Regions = new[]\n        {\n            \"lga\",\n            \"sjc\",\n            \"sin\",\n        },\n        Rules = new[]\n        {\n            new Ns1.Inputs.MonitoringJobRuleArgs\n            {\n                Comparison = \"contains\",\n                Key = \"output\",\n                Value = \"200 OK\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewMonitoringJob(ctx, \"uswestMonitor\", \u0026ns1.MonitoringJobArgs{\n\t\t\tActive: pulumi.Bool(true),\n\t\t\tConfig: pulumi.Map{\n\t\t\t\t\"host\": pulumi.Any(\"example-elb-uswest.aws.amazon.com\"),\n\t\t\t\t\"port\": pulumi.Any(443),\n\t\t\t\t\"send\": pulumi.Any(\"HEAD / HTTP/1.0\\\\r\\\\n\\\\r\\\\n\"),\n\t\t\t\t\"ssl\":  pulumi.Any(1),\n\t\t\t},\n\t\t\tFrequency:    pulumi.Int(60),\n\t\t\tJobType:      pulumi.String(\"tcp\"),\n\t\t\tMute:         pulumi.Bool(true),\n\t\t\tPolicy:       pulumi.String(\"quorum\"),\n\t\t\tRapidRecheck: pulumi.Bool(true),\n\t\t\tRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"lga\"),\n\t\t\t\tpulumi.String(\"sjc\"),\n\t\t\t\tpulumi.String(\"sin\"),\n\t\t\t},\n\t\t\tRules: ns1.MonitoringJobRuleArray{\n\t\t\t\t\u0026ns1.MonitoringJobRuleArgs{\n\t\t\t\t\tComparison: pulumi.String(\"contains\"),\n\t\t\t\t\tKey:        pulumi.String(\"output\"),\n\t\t\t\t\tValue:      pulumi.String(\"200 OK\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.MonitoringJob;\nimport com.pulumi.ns1.MonitoringJobArgs;\nimport com.pulumi.ns1.inputs.MonitoringJobRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var uswestMonitor = new MonitoringJob(\"uswestMonitor\", MonitoringJobArgs.builder()        \n            .active(true)\n            .config(Map.ofEntries(\n                Map.entry(\"host\", \"example-elb-uswest.aws.amazon.com\"),\n                Map.entry(\"port\", 443),\n                Map.entry(\"send\", \"HEAD / HTTP/1.0\\\\r\\\\n\\\\r\\\\n\"),\n                Map.entry(\"ssl\", 1)\n            ))\n            .frequency(60)\n            .jobType(\"tcp\")\n            .mute(true)\n            .policy(\"quorum\")\n            .rapidRecheck(true)\n            .regions(            \n                \"lga\",\n                \"sjc\",\n                \"sin\")\n            .rules(MonitoringJobRuleArgs.builder()\n                .comparison(\"contains\")\n                .key(\"output\")\n                .value(\"200 OK\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  uswestMonitor:\n    type: ns1:MonitoringJob\n    properties:\n      active: true\n      config:\n        host: example-elb-uswest.aws.amazon.com\n        port: 443\n        send: HEAD / HTTP/1.0\\r\\n\\r\\n\n        ssl: 1\n      frequency: 60\n      jobType: tcp\n      mute: true\n      policy: quorum\n      rapidRecheck: true\n      regions:\n        - lga\n        - sjc\n        - sin\n      rules:\n        - comparison: contains\n          key: output\n          value: 200 OK\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[MonitoringJob Api Doc](https://ns1.com/api#monitoring-jobs)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/monitoringJob:MonitoringJob \u003cname\u003e \u003cmonitoringjob_id\u003e`\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates if the job is active or temporarily disabled.\n"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A configuration dictionary with keys and values depending on the job_type. Configuration details for each job_type are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency, in seconds, at which to run the monitoring job in each region.\n"
                },
                "jobType": {
                    "type": "string",
                    "description": "The type of monitoring job to be run. Refer to the NS1 API documentation (https://ns1.com/api#monitoring-jobs) for supported values which include ping, tcp, dns, http.\n"
                },
                "mute": {
                    "type": "boolean",
                    "description": "turn off the notifications for the monitoring job.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free-form display name for the monitoring job.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Freeform notes to be included in any notifications about this job.\n"
                },
                "notifyDelay": {
                    "type": "integer",
                    "description": "The time in seconds after a failure to wait before sending a notification.\n"
                },
                "notifyFailback": {
                    "type": "boolean",
                    "description": "If true, a notification is sent when a job returns to an \"up\" state.\n"
                },
                "notifyList": {
                    "type": "string"
                },
                "notifyRegional": {
                    "type": "boolean",
                    "description": "If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.\n"
                },
                "notifyRepeat": {
                    "type": "integer",
                    "description": "The time in seconds between repeat notifications of a failed job.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The policy for determining the monitor's global status\nbased on the status of the job in all regions. See NS1 API docs for supported values.\n"
                },
                "rapidRecheck": {
                    "type": "boolean",
                    "description": "If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of region codes in which to run the monitoring\njob. See NS1 API docs for supported values.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/MonitoringJobRule:MonitoringJobRule"
                    },
                    "description": "A list of rules for determining failure conditions. Each rule acts on one of the outputs from the monitoring job. You must specify key (the output key); comparison (a comparison to perform on the the output); and value (the value to compare to). For example, {\"key\":\"rtt\", \"comparison\":\"\u003c\", \"value\":100} is a rule requiring the rtt from a job to be under 100ms, or the job will be marked failed. Available output keys, comparators, and value types are are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                }
            },
            "required": [
                "config",
                "frequency",
                "jobType",
                "name",
                "regions"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicates if the job is active or temporarily disabled.\n"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A configuration dictionary with keys and values depending on the job_type. Configuration details for each job_type are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency, in seconds, at which to run the monitoring job in each region.\n"
                },
                "jobType": {
                    "type": "string",
                    "description": "The type of monitoring job to be run. Refer to the NS1 API documentation (https://ns1.com/api#monitoring-jobs) for supported values which include ping, tcp, dns, http.\n",
                    "willReplaceOnChanges": true
                },
                "mute": {
                    "type": "boolean",
                    "description": "turn off the notifications for the monitoring job.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free-form display name for the monitoring job.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Freeform notes to be included in any notifications about this job.\n"
                },
                "notifyDelay": {
                    "type": "integer",
                    "description": "The time in seconds after a failure to wait before sending a notification.\n"
                },
                "notifyFailback": {
                    "type": "boolean",
                    "description": "If true, a notification is sent when a job returns to an \"up\" state.\n"
                },
                "notifyList": {
                    "type": "string"
                },
                "notifyRegional": {
                    "type": "boolean",
                    "description": "If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.\n"
                },
                "notifyRepeat": {
                    "type": "integer",
                    "description": "The time in seconds between repeat notifications of a failed job.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The policy for determining the monitor's global status\nbased on the status of the job in all regions. See NS1 API docs for supported values.\n"
                },
                "rapidRecheck": {
                    "type": "boolean",
                    "description": "If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of region codes in which to run the monitoring\njob. See NS1 API docs for supported values.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/MonitoringJobRule:MonitoringJobRule"
                    },
                    "description": "A list of rules for determining failure conditions. Each rule acts on one of the outputs from the monitoring job. You must specify key (the output key); comparison (a comparison to perform on the the output); and value (the value to compare to). For example, {\"key\":\"rtt\", \"comparison\":\"\u003c\", \"value\":100} is a rule requiring the rtt from a job to be under 100ms, or the job will be marked failed. Available output keys, comparators, and value types are are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                }
            },
            "requiredInputs": [
                "config",
                "frequency",
                "jobType",
                "regions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoringJob resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Indicates if the job is active or temporarily disabled.\n"
                    },
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A configuration dictionary with keys and values depending on the job_type. Configuration details for each job_type are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The frequency, in seconds, at which to run the monitoring job in each region.\n"
                    },
                    "jobType": {
                        "type": "string",
                        "description": "The type of monitoring job to be run. Refer to the NS1 API documentation (https://ns1.com/api#monitoring-jobs) for supported values which include ping, tcp, dns, http.\n",
                        "willReplaceOnChanges": true
                    },
                    "mute": {
                        "type": "boolean",
                        "description": "turn off the notifications for the monitoring job.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free-form display name for the monitoring job.\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Freeform notes to be included in any notifications about this job.\n"
                    },
                    "notifyDelay": {
                        "type": "integer",
                        "description": "The time in seconds after a failure to wait before sending a notification.\n"
                    },
                    "notifyFailback": {
                        "type": "boolean",
                        "description": "If true, a notification is sent when a job returns to an \"up\" state.\n"
                    },
                    "notifyList": {
                        "type": "string"
                    },
                    "notifyRegional": {
                        "type": "boolean",
                        "description": "If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.\n"
                    },
                    "notifyRepeat": {
                        "type": "integer",
                        "description": "The time in seconds between repeat notifications of a failed job.\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The policy for determining the monitor's global status\nbased on the status of the job in all regions. See NS1 API docs for supported values.\n"
                    },
                    "rapidRecheck": {
                        "type": "boolean",
                        "description": "If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of region codes in which to run the monitoring\njob. See NS1 API docs for supported values.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/MonitoringJobRule:MonitoringJobRule"
                        },
                        "description": "A list of rules for determining failure conditions. Each rule acts on one of the outputs from the monitoring job. You must specify key (the output key); comparison (a comparison to perform on the the output); and value (the value to compare to). For example, {\"key\":\"rtt\", \"comparison\":\"\u003c\", \"value\":100} is a rule requiring the rtt from a job to be under 100ms, or the job will be marked failed. Available output keys, comparators, and value types are are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/notifyList:NotifyList": {
            "description": "Provides a NS1 Notify List resource. This can be used to create, modify, and delete notify lists.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst nl = new ns1.NotifyList(\"nl\", {notifications: [\n    {\n        config: {\n            url: \"http://www.mywebhook.com\",\n        },\n        type: \"webhook\",\n    },\n    {\n        config: {\n            email: \"test@test.com\",\n        },\n        type: \"email\",\n    },\n]});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nnl = ns1.NotifyList(\"nl\", notifications=[\n    ns1.NotifyListNotificationArgs(\n        config={\n            \"url\": \"http://www.mywebhook.com\",\n        },\n        type=\"webhook\",\n    ),\n    ns1.NotifyListNotificationArgs(\n        config={\n            \"email\": \"test@test.com\",\n        },\n        type=\"email\",\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nl = new Ns1.NotifyList(\"nl\", new()\n    {\n        Notifications = new[]\n        {\n            new Ns1.Inputs.NotifyListNotificationArgs\n            {\n                Config = \n                {\n                    { \"url\", \"http://www.mywebhook.com\" },\n                },\n                Type = \"webhook\",\n            },\n            new Ns1.Inputs.NotifyListNotificationArgs\n            {\n                Config = \n                {\n                    { \"email\", \"test@test.com\" },\n                },\n                Type = \"email\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewNotifyList(ctx, \"nl\", \u0026ns1.NotifyListArgs{\n\t\t\tNotifications: ns1.NotifyListNotificationArray{\n\t\t\t\t\u0026ns1.NotifyListNotificationArgs{\n\t\t\t\t\tConfig: pulumi.Map{\n\t\t\t\t\t\t\"url\": pulumi.Any(\"http://www.mywebhook.com\"),\n\t\t\t\t\t},\n\t\t\t\t\tType: pulumi.String(\"webhook\"),\n\t\t\t\t},\n\t\t\t\t\u0026ns1.NotifyListNotificationArgs{\n\t\t\t\t\tConfig: pulumi.Map{\n\t\t\t\t\t\t\"email\": pulumi.Any(\"test@test.com\"),\n\t\t\t\t\t},\n\t\t\t\t\tType: pulumi.String(\"email\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.NotifyList;\nimport com.pulumi.ns1.NotifyListArgs;\nimport com.pulumi.ns1.inputs.NotifyListNotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nl = new NotifyList(\"nl\", NotifyListArgs.builder()        \n            .notifications(            \n                NotifyListNotificationArgs.builder()\n                    .config(Map.of(\"url\", \"http://www.mywebhook.com\"))\n                    .type(\"webhook\")\n                    .build(),\n                NotifyListNotificationArgs.builder()\n                    .config(Map.of(\"email\", \"test@test.com\"))\n                    .type(\"email\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nl:\n    type: ns1:NotifyList\n    properties:\n      notifications:\n        - config:\n            url: http://www.mywebhook.com\n          type: webhook\n        - config:\n            email: test@test.com\n          type: email\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[NotifyList Api Doc](https://ns1.com/api#notification-lists)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/notifyList:NotifyList \u003cname\u003e \u003cnotifylist_id\u003e`\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The free-form display name for the notify list.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/NotifyListNotification:NotifyListNotification"
                    },
                    "description": "A list of notifiers. All notifiers in a notification list will receive notifications whenever an event is send to the list (e.g., when a monitoring job fails). Notifiers are documented below.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The free-form display name for the notify list.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/NotifyListNotification:NotifyListNotification"
                    },
                    "description": "A list of notifiers. All notifiers in a notification list will receive notifications whenever an event is send to the list (e.g., when a monitoring job fails). Notifiers are documented below.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotifyList resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The free-form display name for the notify list.\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/NotifyListNotification:NotifyListNotification"
                        },
                        "description": "A list of notifiers. All notifiers in a notification list will receive notifications whenever an event is send to the list (e.g., when a monitoring job fails). Notifiers are documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/pulsarJob:PulsarJob": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "appId": {
                    "type": "string"
                },
                "blendMetricWeights": {
                    "$ref": "#/types/ns1:index/PulsarJobBlendMetricWeights:PulsarJobBlendMetricWeights"
                },
                "community": {
                    "type": "boolean"
                },
                "config": {
                    "$ref": "#/types/ns1:index/PulsarJobConfig:PulsarJobConfig"
                },
                "customer": {
                    "type": "integer"
                },
                "jobId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "shared": {
                    "type": "boolean"
                },
                "typeId": {
                    "type": "string"
                },
                "weights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/PulsarJobWeight:PulsarJobWeight"
                    }
                }
            },
            "required": [
                "appId",
                "community",
                "customer",
                "jobId",
                "name",
                "typeId"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean"
                },
                "appId": {
                    "type": "string"
                },
                "blendMetricWeights": {
                    "$ref": "#/types/ns1:index/PulsarJobBlendMetricWeights:PulsarJobBlendMetricWeights"
                },
                "config": {
                    "$ref": "#/types/ns1:index/PulsarJobConfig:PulsarJobConfig"
                },
                "name": {
                    "type": "string"
                },
                "shared": {
                    "type": "boolean"
                },
                "typeId": {
                    "type": "string"
                },
                "weights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/PulsarJobWeight:PulsarJobWeight"
                    }
                }
            },
            "requiredInputs": [
                "appId",
                "typeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PulsarJob resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "appId": {
                        "type": "string"
                    },
                    "blendMetricWeights": {
                        "$ref": "#/types/ns1:index/PulsarJobBlendMetricWeights:PulsarJobBlendMetricWeights"
                    },
                    "community": {
                        "type": "boolean"
                    },
                    "config": {
                        "$ref": "#/types/ns1:index/PulsarJobConfig:PulsarJobConfig"
                    },
                    "customer": {
                        "type": "integer"
                    },
                    "jobId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "shared": {
                        "type": "boolean"
                    },
                    "typeId": {
                        "type": "string"
                    },
                    "weights": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/PulsarJobWeight:PulsarJobWeight"
                        }
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/record:Record": {
            "description": "Provides a NS1 Record resource. This can be used to create, modify, and delete records.\n\n## NS1 Documentation\n\n[Record Api Doc](https://ns1.com/api#records)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/record:Record \u003cname\u003e \u003czone\u003e/\u003cdomain\u003e/\u003ctype\u003e`\n```\n\n So for the example above\n\n```sh\n $ pulumi import ns1:index/record:Record www terraform.example.io/www.terraform.example.io/CNAME`\n```\n\n ",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordAnswer:RecordAnswer"
                    },
                    "description": "One or more NS1 answers for the records' specified type.\nAnswers are documented below.\n"
                },
                "blockedTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "The records' domain. Cannot have leading or trailing\ndots - see the example above and `FQDN formatting` below.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordFilter:RecordFilter"
                    },
                    "description": "One or more NS1 filters for the record(order matters).\nFilters are documented below.\n"
                },
                "link": {
                    "type": "string",
                    "description": "The target record to link to. This means this record is a\n'linked' record, and it inherits all properties from its target.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "overrideTtl": {
                    "type": "boolean"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordRegion:RecordRegion"
                    },
                    "description": "One or more \"regions\" for the record. These are really\njust groupings based on metadata, and are called \"Answer Groups\" in the NS1 UI,\nbut remain `regions` here for legacy reasons. Regions are\ndocumented below. Please note the ordering requirement!\n"
                },
                "shortAnswers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "short_answers will be deprecated in a future release. It is suggested to migrate to a regular \"answers\" block."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "The records' time to live (in seconds).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The records' RR type.\n"
                },
                "useClientSubnet": {
                    "type": "boolean",
                    "description": "Whether to use EDNS client subnet data when\navailable(in filter chain).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone the record belongs to. Cannot have leading or\ntrailing dots (\".\") - see the example above and `FQDN formatting` below.\n"
                }
            },
            "required": [
                "domain",
                "ttl",
                "type",
                "zone"
            ],
            "inputProperties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordAnswer:RecordAnswer"
                    },
                    "description": "One or more NS1 answers for the records' specified type.\nAnswers are documented below.\n"
                },
                "blockedTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "The records' domain. Cannot have leading or trailing\ndots - see the example above and `FQDN formatting` below.\n",
                    "willReplaceOnChanges": true
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordFilter:RecordFilter"
                    },
                    "description": "One or more NS1 filters for the record(order matters).\nFilters are documented below.\n"
                },
                "link": {
                    "type": "string",
                    "description": "The target record to link to. This means this record is a\n'linked' record, and it inherits all properties from its target.\n"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "overrideTtl": {
                    "type": "boolean"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/RecordRegion:RecordRegion"
                    },
                    "description": "One or more \"regions\" for the record. These are really\njust groupings based on metadata, and are called \"Answer Groups\" in the NS1 UI,\nbut remain `regions` here for legacy reasons. Regions are\ndocumented below. Please note the ordering requirement!\n"
                },
                "shortAnswers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "deprecationMessage": "short_answers will be deprecated in a future release. It is suggested to migrate to a regular \"answers\" block."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "The records' time to live (in seconds).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The records' RR type.\n",
                    "willReplaceOnChanges": true
                },
                "useClientSubnet": {
                    "type": "boolean",
                    "description": "Whether to use EDNS client subnet data when\navailable(in filter chain).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The zone the record belongs to. Cannot have leading or\ntrailing dots (\".\") - see the example above and `FQDN formatting` below.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domain",
                "type",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Record resources.\n",
                "properties": {
                    "answers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/RecordAnswer:RecordAnswer"
                        },
                        "description": "One or more NS1 answers for the records' specified type.\nAnswers are documented below.\n"
                    },
                    "blockedTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "domain": {
                        "type": "string",
                        "description": "The records' domain. Cannot have leading or trailing\ndots - see the example above and `FQDN formatting` below.\n",
                        "willReplaceOnChanges": true
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/RecordFilter:RecordFilter"
                        },
                        "description": "One or more NS1 filters for the record(order matters).\nFilters are documented below.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The target record to link to. This means this record is a\n'linked' record, and it inherits all properties from its target.\n"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "overrideTtl": {
                        "type": "boolean"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/RecordRegion:RecordRegion"
                        },
                        "description": "One or more \"regions\" for the record. These are really\njust groupings based on metadata, and are called \"Answer Groups\" in the NS1 UI,\nbut remain `regions` here for legacy reasons. Regions are\ndocumented below. Please note the ordering requirement!\n"
                    },
                    "shortAnswers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "short_answers will be deprecated in a future release. It is suggested to migrate to a regular \"answers\" block."
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The records' time to live (in seconds).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The records' RR type.\n",
                        "willReplaceOnChanges": true
                    },
                    "useClientSubnet": {
                        "type": "boolean",
                        "description": "Whether to use EDNS client subnet data when\navailable(in filter chain).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone the record belongs to. Cannot have leading or\ntrailing dots (\".\") - see the example above and `FQDN formatting` below.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/subnet:Subnet": {
            "properties": {
                "children": {
                    "type": "integer"
                },
                "desc": {
                    "type": "string"
                },
                "dhcpScoped": {
                    "type": "boolean"
                },
                "freeAddresses": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "networkId": {
                    "type": "integer"
                },
                "parentId": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "totalAddresses": {
                    "type": "string"
                },
                "usedAddresses": {
                    "type": "string"
                }
            },
            "required": [
                "children",
                "dhcpScoped",
                "freeAddresses",
                "name",
                "parentId",
                "status",
                "tags",
                "totalAddresses",
                "usedAddresses"
            ],
            "inputProperties": {
                "children": {
                    "type": "integer"
                },
                "desc": {
                    "type": "string"
                },
                "dhcpScoped": {
                    "type": "boolean"
                },
                "freeAddresses": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "networkId": {
                    "type": "integer"
                },
                "parentId": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "totalAddresses": {
                    "type": "string"
                },
                "usedAddresses": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subnet resources.\n",
                "properties": {
                    "children": {
                        "type": "integer"
                    },
                    "desc": {
                        "type": "string"
                    },
                    "dhcpScoped": {
                        "type": "boolean"
                    },
                    "freeAddresses": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "integer"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "prefix": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "totalAddresses": {
                        "type": "string"
                    },
                    "usedAddresses": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/team:Team": {
            "description": "Provides a NS1 Team resource. This can be used to create, modify, and delete\nteams. The credentials used must have the `manage_teams` permission set.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\n// Create a new NS1 Team\nconst example = new ns1.Team(\"example\", {\n    accountManageUsers: false,\n    dnsViewZones: false,\n    ipWhitelists: [\n        {\n            name: \"whitelist-1\",\n            values: [\n                \"1.1.1.1\",\n                \"2.2.2.2\",\n            ],\n        },\n        {\n            name: \"whitelist-2\",\n            values: [\n                \"3.3.3.3\",\n                \"4.4.4.4\",\n            ],\n        },\n    ],\n});\n// Another team\nconst example2 = new ns1.Team(\"example2\", {\n    dataManageDatasources: true,\n    dnsRecordsAllows: [{\n        domain: \"terraform.example.io\",\n        includeSubdomains: false,\n        type: \"A\",\n        zone: \"example.io\",\n    }],\n    dnsViewZones: true,\n    dnsZonesAllows: [\"mytest.zone\"],\n    dnsZonesAllowByDefault: true,\n    dnsZonesDenies: [\"myother.zone\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\n# Create a new NS1 Team\nexample = ns1.Team(\"example\",\n    account_manage_users=False,\n    dns_view_zones=False,\n    ip_whitelists=[\n        ns1.TeamIpWhitelistArgs(\n            name=\"whitelist-1\",\n            values=[\n                \"1.1.1.1\",\n                \"2.2.2.2\",\n            ],\n        ),\n        ns1.TeamIpWhitelistArgs(\n            name=\"whitelist-2\",\n            values=[\n                \"3.3.3.3\",\n                \"4.4.4.4\",\n            ],\n        ),\n    ])\n# Another team\nexample2 = ns1.Team(\"example2\",\n    data_manage_datasources=True,\n    dns_records_allows=[ns1.TeamDnsRecordsAllowArgs(\n        domain=\"terraform.example.io\",\n        include_subdomains=False,\n        type=\"A\",\n        zone=\"example.io\",\n    )],\n    dns_view_zones=True,\n    dns_zones_allows=[\"mytest.zone\"],\n    dns_zones_allow_by_default=True,\n    dns_zones_denies=[\"myother.zone\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new NS1 Team\n    var example = new Ns1.Team(\"example\", new()\n    {\n        AccountManageUsers = false,\n        DnsViewZones = false,\n        IpWhitelists = new[]\n        {\n            new Ns1.Inputs.TeamIpWhitelistArgs\n            {\n                Name = \"whitelist-1\",\n                Values = new[]\n                {\n                    \"1.1.1.1\",\n                    \"2.2.2.2\",\n                },\n            },\n            new Ns1.Inputs.TeamIpWhitelistArgs\n            {\n                Name = \"whitelist-2\",\n                Values = new[]\n                {\n                    \"3.3.3.3\",\n                    \"4.4.4.4\",\n                },\n            },\n        },\n    });\n\n    // Another team\n    var example2 = new Ns1.Team(\"example2\", new()\n    {\n        DataManageDatasources = true,\n        DnsRecordsAllows = new[]\n        {\n            new Ns1.Inputs.TeamDnsRecordsAllowArgs\n            {\n                Domain = \"terraform.example.io\",\n                IncludeSubdomains = false,\n                Type = \"A\",\n                Zone = \"example.io\",\n            },\n        },\n        DnsViewZones = true,\n        DnsZonesAllows = new[]\n        {\n            \"mytest.zone\",\n        },\n        DnsZonesAllowByDefault = true,\n        DnsZonesDenies = new[]\n        {\n            \"myother.zone\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewTeam(ctx, \"example\", \u0026ns1.TeamArgs{\n\t\t\tAccountManageUsers: pulumi.Bool(false),\n\t\t\tDnsViewZones:       pulumi.Bool(false),\n\t\t\tIpWhitelists: ns1.TeamIpWhitelistArray{\n\t\t\t\t\u0026ns1.TeamIpWhitelistArgs{\n\t\t\t\t\tName: pulumi.String(\"whitelist-1\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"1.1.1.1\"),\n\t\t\t\t\t\tpulumi.String(\"2.2.2.2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026ns1.TeamIpWhitelistArgs{\n\t\t\t\t\tName: pulumi.String(\"whitelist-2\"),\n\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"3.3.3.3\"),\n\t\t\t\t\t\tpulumi.String(\"4.4.4.4\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ns1.NewTeam(ctx, \"example2\", \u0026ns1.TeamArgs{\n\t\t\tDataManageDatasources: pulumi.Bool(true),\n\t\t\tDnsRecordsAllows: ns1.TeamDnsRecordsAllowArray{\n\t\t\t\t\u0026ns1.TeamDnsRecordsAllowArgs{\n\t\t\t\t\tDomain:            pulumi.String(\"terraform.example.io\"),\n\t\t\t\t\tIncludeSubdomains: pulumi.Bool(false),\n\t\t\t\t\tType:              pulumi.String(\"A\"),\n\t\t\t\t\tZone:              pulumi.String(\"example.io\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDnsViewZones: pulumi.Bool(true),\n\t\t\tDnsZonesAllows: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"mytest.zone\"),\n\t\t\t},\n\t\t\tDnsZonesAllowByDefault: pulumi.Bool(true),\n\t\t\tDnsZonesDenies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"myother.zone\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.Team;\nimport com.pulumi.ns1.TeamArgs;\nimport com.pulumi.ns1.inputs.TeamIpWhitelistArgs;\nimport com.pulumi.ns1.inputs.TeamDnsRecordsAllowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Team(\"example\", TeamArgs.builder()        \n            .accountManageUsers(false)\n            .dnsViewZones(false)\n            .ipWhitelists(            \n                TeamIpWhitelistArgs.builder()\n                    .name(\"whitelist-1\")\n                    .values(                    \n                        \"1.1.1.1\",\n                        \"2.2.2.2\")\n                    .build(),\n                TeamIpWhitelistArgs.builder()\n                    .name(\"whitelist-2\")\n                    .values(                    \n                        \"3.3.3.3\",\n                        \"4.4.4.4\")\n                    .build())\n            .build());\n\n        var example2 = new Team(\"example2\", TeamArgs.builder()        \n            .dataManageDatasources(true)\n            .dnsRecordsAllows(TeamDnsRecordsAllowArgs.builder()\n                .domain(\"terraform.example.io\")\n                .includeSubdomains(false)\n                .type(\"A\")\n                .zone(\"example.io\")\n                .build())\n            .dnsViewZones(true)\n            .dnsZonesAllows(\"mytest.zone\")\n            .dnsZonesAllowByDefault(true)\n            .dnsZonesDenies(\"myother.zone\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new NS1 Team\n  example:\n    type: ns1:Team\n    properties:\n      accountManageUsers: false\n      # Configure permissions\n      dnsViewZones: false\n      ipWhitelists:\n        - name: whitelist-1\n          values:\n            - 1.1.1.1\n            - 2.2.2.2\n        - name: whitelist-2\n          values:\n            - 3.3.3.3\n            - 4.4.4.4\n  # Another team\n  example2:\n    type: ns1:Team\n    properties:\n      dataManageDatasources: true\n      dnsRecordsAllows:\n        - domain: terraform.example.io\n          includeSubdomains: false\n          type: A\n          zone: example.io\n      dnsViewZones: true\n      dnsZonesAllows:\n        - mytest.zone\n      dnsZonesAllowByDefault: true\n      dnsZonesDenies:\n        - myother.zone\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[Team Api Docs](https://ns1.com/api#team)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/team:Team \u003cname\u003e \u003cteam_id\u003e`\n```\n\n ",
            "properties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the team can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the team can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the team can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the team can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "(Deprecated) No longer in use.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the team can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the team can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the team can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the team can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the team can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the team can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the team can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the team can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the team can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the team can modify the accounts zones.\n"
                },
                "dnsRecordsAllows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/TeamDnsRecordsAllow:TeamDnsRecordsAllow"
                    },
                    "description": "List of records that the team may access.\n"
                },
                "dnsRecordsDenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/TeamDnsRecordsDeny:TeamDnsRecordsDeny"
                    },
                    "description": "List of records that the team may not access.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the team can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the team may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the team may not access.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/TeamIpWhitelist:TeamIpWhitelist"
                    },
                    "description": "Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each \"allow\" list.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the team can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean",
                    "description": "Whether the team can view IPAM.\nOnly relevant for the DDI product.\n"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the team can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the team can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the team can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the team.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the team can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the team can manage global two factor authentication.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the team can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the team can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the team can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the team can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "(Deprecated) No longer in use.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the team can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the team can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the team can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the team can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the team can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the team can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the team can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the team can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the team can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the team can modify the accounts zones.\n"
                },
                "dnsRecordsAllows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/TeamDnsRecordsAllow:TeamDnsRecordsAllow"
                    },
                    "description": "List of records that the team may access.\n"
                },
                "dnsRecordsDenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/TeamDnsRecordsDeny:TeamDnsRecordsDeny"
                    },
                    "description": "List of records that the team may not access.\n"
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the team can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the team may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the team may not access.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/TeamIpWhitelist:TeamIpWhitelist"
                    },
                    "description": "Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each \"allow\" list.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the team can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean",
                    "description": "Whether the team can view IPAM.\nOnly relevant for the DDI product.\n"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the team can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the team can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the team can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the team.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the team can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the team can manage global two factor authentication.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "accountManageAccountSettings": {
                        "type": "boolean",
                        "description": "Whether the team can modify account settings.\n"
                    },
                    "accountManageApikeys": {
                        "type": "boolean",
                        "description": "Whether the team can modify account apikeys.\n"
                    },
                    "accountManageIpWhitelist": {
                        "type": "boolean",
                        "description": "Whether the team can manage ip whitelist.\n"
                    },
                    "accountManagePaymentMethods": {
                        "type": "boolean",
                        "description": "Whether the team can modify account payment methods.\n"
                    },
                    "accountManagePlan": {
                        "type": "boolean",
                        "description": "(Deprecated) No longer in use.\n",
                        "deprecationMessage": "obsolete, should no longer be used"
                    },
                    "accountManageTeams": {
                        "type": "boolean",
                        "description": "Whether the team can modify other teams in the account.\n"
                    },
                    "accountManageUsers": {
                        "type": "boolean",
                        "description": "Whether the team can modify account users.\n"
                    },
                    "accountViewActivityLog": {
                        "type": "boolean",
                        "description": "Whether the team can view activity logs.\n"
                    },
                    "accountViewInvoices": {
                        "type": "boolean",
                        "description": "Whether the team can view invoices.\n"
                    },
                    "dataManageDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the team can modify data feeds.\n"
                    },
                    "dataManageDatasources": {
                        "type": "boolean",
                        "description": "Whether the team can modify data sources.\n"
                    },
                    "dataPushToDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the team can publish to data feeds.\n"
                    },
                    "dhcpManageDhcp": {
                        "type": "boolean",
                        "description": "Whether the team can manage DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dhcpViewDhcp": {
                        "type": "boolean",
                        "description": "Whether the team can view DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dnsManageZones": {
                        "type": "boolean",
                        "description": "Whether the team can modify the accounts zones.\n"
                    },
                    "dnsRecordsAllows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/TeamDnsRecordsAllow:TeamDnsRecordsAllow"
                        },
                        "description": "List of records that the team may access.\n"
                    },
                    "dnsRecordsDenies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/TeamDnsRecordsDeny:TeamDnsRecordsDeny"
                        },
                        "description": "List of records that the team may not access.\n"
                    },
                    "dnsViewZones": {
                        "type": "boolean",
                        "description": "Whether the team can view the accounts zones.\n"
                    },
                    "dnsZonesAllowByDefault": {
                        "type": "boolean",
                        "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                    },
                    "dnsZonesAllows": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the team may access.\n"
                    },
                    "dnsZonesDenies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the team may not access.\n"
                    },
                    "ipWhitelists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/TeamIpWhitelist:TeamIpWhitelist"
                        },
                        "description": "Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each \"allow\" list.\n"
                    },
                    "ipamManageIpam": {
                        "type": "boolean",
                        "description": "Whether the team can manage IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "ipamViewIpam": {
                        "type": "boolean",
                        "description": "Whether the team can view IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "monitoringManageJobs": {
                        "type": "boolean",
                        "description": "Whether the team can modify monitoring jobs.\n"
                    },
                    "monitoringManageLists": {
                        "type": "boolean",
                        "description": "Whether the team can modify notification lists.\n"
                    },
                    "monitoringViewJobs": {
                        "type": "boolean",
                        "description": "Whether the team can view monitoring jobs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the team.\n"
                    },
                    "securityManageActiveDirectory": {
                        "type": "boolean",
                        "description": "Whether the team can manage global active directory.\nOnly relevant for the DDI product.\n"
                    },
                    "securityManageGlobal2fa": {
                        "type": "boolean",
                        "description": "Whether the team can manage global two factor authentication.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/tsigkey:Tsigkey": {
            "description": "Provides a NS1 TSIG Key resource. This can be used to create, modify, and delete TSIG keys.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst example = new ns1.Tsigkey(\"example\", {\n    algorithm: \"hmac-sha256\",\n    secret: \"Ok1qR5IW1ajVka5cHPEJQIXfLyx5V3PSkFBROAzOn21JumDq6nIpoj6H8rfj5Uo+Ok55ZWQ0Wgrf302fDscHLA==\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.Tsigkey(\"example\",\n    algorithm=\"hmac-sha256\",\n    secret=\"Ok1qR5IW1ajVka5cHPEJQIXfLyx5V3PSkFBROAzOn21JumDq6nIpoj6H8rfj5Uo+Ok55ZWQ0Wgrf302fDscHLA==\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Ns1.Tsigkey(\"example\", new()\n    {\n        Algorithm = \"hmac-sha256\",\n        Secret = \"Ok1qR5IW1ajVka5cHPEJQIXfLyx5V3PSkFBROAzOn21JumDq6nIpoj6H8rfj5Uo+Ok55ZWQ0Wgrf302fDscHLA==\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.NewTsigkey(ctx, \"example\", \u0026ns1.TsigkeyArgs{\n\t\t\tAlgorithm: pulumi.String(\"hmac-sha256\"),\n\t\t\tSecret:    pulumi.String(\"Ok1qR5IW1ajVka5cHPEJQIXfLyx5V3PSkFBROAzOn21JumDq6nIpoj6H8rfj5Uo+Ok55ZWQ0Wgrf302fDscHLA==\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.Tsigkey;\nimport com.pulumi.ns1.TsigkeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Tsigkey(\"example\", TsigkeyArgs.builder()        \n            .algorithm(\"hmac-sha256\")\n            .secret(\"Ok1qR5IW1ajVka5cHPEJQIXfLyx5V3PSkFBROAzOn21JumDq6nIpoj6H8rfj5Uo+Ok55ZWQ0Wgrf302fDscHLA==\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: ns1:Tsigkey\n    properties:\n      algorithm: hmac-sha256\n      secret: Ok1qR5IW1ajVka5cHPEJQIXfLyx5V3PSkFBROAzOn21JumDq6nIpoj6H8rfj5Uo+Ok55ZWQ0Wgrf302fDscHLA==\n```\n{{% /example %}}\n{{% /examples %}}\n## NS1 Documentation\n\n[TSIG Keys Api Doc](https://ns1.com/api/#tsig)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/tsigkey:Tsigkey importTest \u003cname\u003e`\n```\n\n ",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "The algorithm used to hash the TSIG key's secret.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the tsigkey.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The key's secret to be hashed.\n"
                }
            },
            "required": [
                "algorithm",
                "name",
                "secret"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "The algorithm used to hash the TSIG key's secret.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the tsigkey.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The key's secret to be hashed.\n"
                }
            },
            "requiredInputs": [
                "algorithm",
                "secret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tsigkey resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The algorithm used to hash the TSIG key's secret.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the tsigkey.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The key's secret to be hashed.\n"
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/user:User": {
            "description": "Provides a NS1 User resource. Creating a user sends an invitation email to the\nuser's email address. This can be used to create, modify, and delete users.\nThe credentials used must have the `manage_users` permission set.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst exampleTeam = new ns1.Team(\"exampleTeam\", {\n    ipWhitelists: [\n        \"1.1.1.1\",\n        \"2.2.2.2\",\n    ],\n    dnsViewZones: false,\n    accountManageUsers: false,\n});\nconst exampleUser = new ns1.User(\"exampleUser\", {\n    username: \"example_user\",\n    email: \"user@example.com\",\n    teams: [exampleTeam.id],\n    notify: {\n        billing: false,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample_team = ns1.Team(\"exampleTeam\",\n    ip_whitelists=[\n        \"1.1.1.1\",\n        \"2.2.2.2\",\n    ],\n    dns_view_zones=False,\n    account_manage_users=False)\nexample_user = ns1.User(\"exampleUser\",\n    username=\"example_user\",\n    email=\"user@example.com\",\n    teams=[example_team.id],\n    notify={\n        \"billing\": False,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = new Ns1.Team(\"exampleTeam\", new()\n    {\n        IpWhitelists = new[]\n        {\n            \"1.1.1.1\",\n            \"2.2.2.2\",\n        },\n        DnsViewZones = false,\n        AccountManageUsers = false,\n    });\n\n    var exampleUser = new Ns1.User(\"exampleUser\", new()\n    {\n        Username = \"example_user\",\n        Email = \"user@example.com\",\n        Teams = new[]\n        {\n            exampleTeam.Id,\n        },\n        Notify = \n        {\n            { \"billing\", false },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := ns1.NewTeam(ctx, \"exampleTeam\", \u0026ns1.TeamArgs{\n\t\t\tIpWhitelists: ns1.TeamIpWhitelistArray{\n\t\t\t\t\"1.1.1.1\",\n\t\t\t\t\"2.2.2.2\",\n\t\t\t},\n\t\t\tDnsViewZones:       pulumi.Bool(false),\n\t\t\tAccountManageUsers: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ns1.NewUser(ctx, \"exampleUser\", \u0026ns1.UserArgs{\n\t\t\tUsername: pulumi.String(\"example_user\"),\n\t\t\tEmail:    pulumi.String(\"user@example.com\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\texampleTeam.ID(),\n\t\t\t},\n\t\t\tNotify: pulumi.Map{\n\t\t\t\t\"billing\": pulumi.Any(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.Team;\nimport com.pulumi.ns1.TeamArgs;\nimport com.pulumi.ns1.User;\nimport com.pulumi.ns1.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleTeam = new Team(\"exampleTeam\", TeamArgs.builder()        \n            .ipWhitelists(            \n                \"1.1.1.1\",\n                \"2.2.2.2\")\n            .dnsViewZones(false)\n            .accountManageUsers(false)\n            .build());\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .username(\"example_user\")\n            .email(\"user@example.com\")\n            .teams(exampleTeam.id())\n            .notify(Map.of(\"billing\", false))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTeam:\n    type: ns1:Team\n    properties:\n      # Optional IP whitelist\n      ipWhitelists:\n        - 1.1.1.1\n        - 2.2.2.2\n      dnsViewZones: false\n      accountManageUsers: false\n  exampleUser:\n    type: ns1:User\n    properties:\n      username: example_user\n      email: user@example.com\n      teams:\n        - ${exampleTeam.id}\n      notify:\n        billing: false\n```\n{{% /example %}}\n{{% /examples %}}\n## Permissions\n\nA user will inherit permissions from the teams they are assigned to.\nIf a user is assigned to a team and also has individual permissions set on the user, the individual permissions\nwill be overridden by the inherited team permissions.\nIn a future release, setting permissions on a user that is part of a team will be explicitly disabled.\n\nWhen a user is removed from all teams completely, they will inherit whatever permissions they had previously.\nIf a user is removed from all their teams, it will probably be necessary to run `pulumi up` a second time\nto update the users permissions from their old team permissions to new user-specific permissions.\n\nSee [this NS1 Help Center article](https://help.ns1.com/hc/en-us/articles/360024409034-Managing-user-permissions) for an overview of user permission settings.\n\n## NS1 Documentation\n\n[User Api Docs](https://ns1.com/api#user)\n\n[Managing user permissions](https://help.ns1.com/hc/en-us/articles/360024409034-Managing-user-permissions)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/user:User \u003cname\u003e \u003cusername\u003e`\n```\n\n ",
            "properties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the user can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the user can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the user can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the user can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "(Deprecated) No longer in use.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the user can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the user can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the user can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the user can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the user can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the user can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the user can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the user can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the user can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the user can modify the accounts zones.\n"
                },
                "dnsRecordsAllows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/UserDnsRecordsAllow:UserDnsRecordsAllow"
                    }
                },
                "dnsRecordsDenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/UserDnsRecordsDeny:UserDnsRecordsDeny"
                    }
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the user can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the user may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the user may not access.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user.\n"
                },
                "ipWhitelistStrict": {
                    "type": "boolean",
                    "description": "Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IP addresses/networks to which to grant the user access.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the user can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the user can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the user can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the user can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the user.\n"
                },
                "notify": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether or not to notify the user of specified events. Only `billing` is available currently.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the user can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the user can manage global two factor authentication.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams that the user belongs to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The users login name.\n"
                }
            },
            "required": [
                "email",
                "name",
                "username"
            ],
            "inputProperties": {
                "accountManageAccountSettings": {
                    "type": "boolean",
                    "description": "Whether the user can modify account settings.\n"
                },
                "accountManageApikeys": {
                    "type": "boolean",
                    "description": "Whether the user can modify account apikeys.\n"
                },
                "accountManageIpWhitelist": {
                    "type": "boolean",
                    "description": "Whether the user can manage ip whitelist.\n"
                },
                "accountManagePaymentMethods": {
                    "type": "boolean",
                    "description": "Whether the user can modify account payment methods.\n"
                },
                "accountManagePlan": {
                    "type": "boolean",
                    "description": "(Deprecated) No longer in use.\n",
                    "deprecationMessage": "obsolete, should no longer be used"
                },
                "accountManageTeams": {
                    "type": "boolean",
                    "description": "Whether the user can modify other teams in the account.\n"
                },
                "accountManageUsers": {
                    "type": "boolean",
                    "description": "Whether the user can modify account users.\n"
                },
                "accountViewActivityLog": {
                    "type": "boolean",
                    "description": "Whether the user can view activity logs.\n"
                },
                "accountViewInvoices": {
                    "type": "boolean",
                    "description": "Whether the user can view invoices.\n"
                },
                "dataManageDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the user can modify data feeds.\n"
                },
                "dataManageDatasources": {
                    "type": "boolean",
                    "description": "Whether the user can modify data sources.\n"
                },
                "dataPushToDatafeeds": {
                    "type": "boolean",
                    "description": "Whether the user can publish to data feeds.\n"
                },
                "dhcpManageDhcp": {
                    "type": "boolean",
                    "description": "Whether the user can manage DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dhcpViewDhcp": {
                    "type": "boolean",
                    "description": "Whether the user can view DHCP.\nOnly relevant for the DDI product.\n"
                },
                "dnsManageZones": {
                    "type": "boolean",
                    "description": "Whether the user can modify the accounts zones.\n"
                },
                "dnsRecordsAllows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/UserDnsRecordsAllow:UserDnsRecordsAllow"
                    }
                },
                "dnsRecordsDenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/UserDnsRecordsDeny:UserDnsRecordsDeny"
                    }
                },
                "dnsViewZones": {
                    "type": "boolean",
                    "description": "Whether the user can view the accounts zones.\n"
                },
                "dnsZonesAllowByDefault": {
                    "type": "boolean",
                    "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                },
                "dnsZonesAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the user may access.\n"
                },
                "dnsZonesDenies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of zones that the user may not access.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user.\n"
                },
                "ipWhitelistStrict": {
                    "type": "boolean",
                    "description": "Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.\n"
                },
                "ipWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of IP addresses/networks to which to grant the user access.\n"
                },
                "ipamManageIpam": {
                    "type": "boolean",
                    "description": "Whether the user can manage IPAM.\nOnly relevant for the DDI product.\n"
                },
                "ipamViewIpam": {
                    "type": "boolean"
                },
                "monitoringManageJobs": {
                    "type": "boolean",
                    "description": "Whether the user can modify monitoring jobs.\n"
                },
                "monitoringManageLists": {
                    "type": "boolean",
                    "description": "Whether the user can modify notification lists.\n"
                },
                "monitoringViewJobs": {
                    "type": "boolean",
                    "description": "Whether the user can view monitoring jobs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The free form name of the user.\n"
                },
                "notify": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Whether or not to notify the user of specified events. Only `billing` is available currently.\n"
                },
                "securityManageActiveDirectory": {
                    "type": "boolean",
                    "description": "Whether the user can manage global active directory.\nOnly relevant for the DDI product.\n"
                },
                "securityManageGlobal2fa": {
                    "type": "boolean",
                    "description": "Whether the user can manage global two factor authentication.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams that the user belongs to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The users login name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "email",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountManageAccountSettings": {
                        "type": "boolean",
                        "description": "Whether the user can modify account settings.\n"
                    },
                    "accountManageApikeys": {
                        "type": "boolean",
                        "description": "Whether the user can modify account apikeys.\n"
                    },
                    "accountManageIpWhitelist": {
                        "type": "boolean",
                        "description": "Whether the user can manage ip whitelist.\n"
                    },
                    "accountManagePaymentMethods": {
                        "type": "boolean",
                        "description": "Whether the user can modify account payment methods.\n"
                    },
                    "accountManagePlan": {
                        "type": "boolean",
                        "description": "(Deprecated) No longer in use.\n",
                        "deprecationMessage": "obsolete, should no longer be used"
                    },
                    "accountManageTeams": {
                        "type": "boolean",
                        "description": "Whether the user can modify other teams in the account.\n"
                    },
                    "accountManageUsers": {
                        "type": "boolean",
                        "description": "Whether the user can modify account users.\n"
                    },
                    "accountViewActivityLog": {
                        "type": "boolean",
                        "description": "Whether the user can view activity logs.\n"
                    },
                    "accountViewInvoices": {
                        "type": "boolean",
                        "description": "Whether the user can view invoices.\n"
                    },
                    "dataManageDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the user can modify data feeds.\n"
                    },
                    "dataManageDatasources": {
                        "type": "boolean",
                        "description": "Whether the user can modify data sources.\n"
                    },
                    "dataPushToDatafeeds": {
                        "type": "boolean",
                        "description": "Whether the user can publish to data feeds.\n"
                    },
                    "dhcpManageDhcp": {
                        "type": "boolean",
                        "description": "Whether the user can manage DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dhcpViewDhcp": {
                        "type": "boolean",
                        "description": "Whether the user can view DHCP.\nOnly relevant for the DDI product.\n"
                    },
                    "dnsManageZones": {
                        "type": "boolean",
                        "description": "Whether the user can modify the accounts zones.\n"
                    },
                    "dnsRecordsAllows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/UserDnsRecordsAllow:UserDnsRecordsAllow"
                        }
                    },
                    "dnsRecordsDenies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/UserDnsRecordsDeny:UserDnsRecordsDeny"
                        }
                    },
                    "dnsViewZones": {
                        "type": "boolean",
                        "description": "Whether the user can view the accounts zones.\n"
                    },
                    "dnsZonesAllowByDefault": {
                        "type": "boolean",
                        "description": "If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.\n"
                    },
                    "dnsZonesAllows": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the user may access.\n"
                    },
                    "dnsZonesDenies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones that the user may not access.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user.\n"
                    },
                    "ipWhitelistStrict": {
                        "type": "boolean",
                        "description": "Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.\n"
                    },
                    "ipWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of IP addresses/networks to which to grant the user access.\n"
                    },
                    "ipamManageIpam": {
                        "type": "boolean",
                        "description": "Whether the user can manage IPAM.\nOnly relevant for the DDI product.\n"
                    },
                    "ipamViewIpam": {
                        "type": "boolean"
                    },
                    "monitoringManageJobs": {
                        "type": "boolean",
                        "description": "Whether the user can modify monitoring jobs.\n"
                    },
                    "monitoringManageLists": {
                        "type": "boolean",
                        "description": "Whether the user can modify notification lists.\n"
                    },
                    "monitoringViewJobs": {
                        "type": "boolean",
                        "description": "Whether the user can view monitoring jobs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The free form name of the user.\n"
                    },
                    "notify": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Whether or not to notify the user of specified events. Only `billing` is available currently.\n"
                    },
                    "securityManageActiveDirectory": {
                        "type": "boolean",
                        "description": "Whether the user can manage global active directory.\nOnly relevant for the DDI product.\n"
                    },
                    "securityManageGlobal2fa": {
                        "type": "boolean",
                        "description": "Whether the user can manage global two factor authentication.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The teams that the user belongs to.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The users login name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "ns1:index/zone:Zone": {
            "description": "\n\n\n## Import\n\n\n\n```sh\n $ pulumi import ns1:index/zone:Zone \u003cname\u003e \u003czone\u003e`\n```\n\n So for the example above\n\n```sh\n $ pulumi import ns1:index/zone:Zone example terraform.example.io`\n```\n\n ",
            "properties": {
                "additionalPorts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "additionalPrimaries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional IPv4 addresses for the primary\nzone. Conflicts with `secondaries`.\n"
                },
                "autogenerateNsRecord": {
                    "type": "boolean"
                },
                "dnsServers": {
                    "type": "string",
                    "description": "(Computed) Authoritative Name Servers.\n"
                },
                "dnssec": {
                    "type": "boolean",
                    "description": "Whether or not DNSSEC is enabled for the zone.\nNote that DNSSEC must be enabled on the account by support for this to be set\nto `true`.\n"
                },
                "expiry": {
                    "type": "integer",
                    "description": "The SOA Expiry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "hostmaster": {
                    "type": "string",
                    "description": "(Computed) The SOA Hostmaster.\n"
                },
                "link": {
                    "type": "string",
                    "description": "The target zone(domain name) to link to.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of network IDs for which the zone is\navailable. If no network is provided, the zone will be created in network 0,\nthe primary NS1 Global Network.\n"
                },
                "nxTtl": {
                    "type": "integer",
                    "description": "The SOA NX TTL. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "primary": {
                    "type": "string",
                    "description": "The primary zones' IPv4 address. This makes the zone a\nsecondary. Conflicts with `secondaries`.\n"
                },
                "primaryPort": {
                    "type": "integer"
                },
                "refresh": {
                    "type": "integer",
                    "description": "The SOA Refresh. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "The SOA Retry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "secondaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/ZoneSecondary:ZoneSecondary"
                    },
                    "description": "List of secondary servers. This makes the zone a\nprimary. Conflicts with `primary` and `additional_primaries`.\nSecondaries is documented below.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tsig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "TSIG is documented below\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The SOA TTL.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The domain name of the zone.\n",
                    "language": {
                        "csharp": {
                            "name": "ZoneName"
                        }
                    }
                }
            },
            "required": [
                "dnsServers",
                "dnssec",
                "expiry",
                "hostmaster",
                "networks",
                "nxTtl",
                "primaryPort",
                "refresh",
                "retry",
                "ttl",
                "zone"
            ],
            "inputProperties": {
                "additionalPorts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "additionalPrimaries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional IPv4 addresses for the primary\nzone. Conflicts with `secondaries`.\n"
                },
                "autogenerateNsRecord": {
                    "type": "boolean"
                },
                "dnssec": {
                    "type": "boolean",
                    "description": "Whether or not DNSSEC is enabled for the zone.\nNote that DNSSEC must be enabled on the account by support for this to be set\nto `true`.\n"
                },
                "expiry": {
                    "type": "integer",
                    "description": "The SOA Expiry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "hostmaster": {
                    "type": "string",
                    "description": "(Computed) The SOA Hostmaster.\n"
                },
                "link": {
                    "type": "string",
                    "description": "The target zone(domain name) to link to.\n",
                    "willReplaceOnChanges": true
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of network IDs for which the zone is\navailable. If no network is provided, the zone will be created in network 0,\nthe primary NS1 Global Network.\n"
                },
                "nxTtl": {
                    "type": "integer",
                    "description": "The SOA NX TTL. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "primary": {
                    "type": "string",
                    "description": "The primary zones' IPv4 address. This makes the zone a\nsecondary. Conflicts with `secondaries`.\n"
                },
                "primaryPort": {
                    "type": "integer"
                },
                "refresh": {
                    "type": "integer",
                    "description": "The SOA Refresh. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "The SOA Retry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                },
                "secondaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/ns1:index/ZoneSecondary:ZoneSecondary"
                    },
                    "description": "List of secondary servers. This makes the zone a\nprimary. Conflicts with `primary` and `additional_primaries`.\nSecondaries is documented below.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tsig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "TSIG is documented below\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The SOA TTL.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The domain name of the zone.\n",
                    "language": {
                        "csharp": {
                            "name": "ZoneName"
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Zone resources.\n",
                "properties": {
                    "additionalPorts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "additionalPrimaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of additional IPv4 addresses for the primary\nzone. Conflicts with `secondaries`.\n"
                    },
                    "autogenerateNsRecord": {
                        "type": "boolean"
                    },
                    "dnsServers": {
                        "type": "string",
                        "description": "(Computed) Authoritative Name Servers.\n"
                    },
                    "dnssec": {
                        "type": "boolean",
                        "description": "Whether or not DNSSEC is enabled for the zone.\nNote that DNSSEC must be enabled on the account by support for this to be set\nto `true`.\n"
                    },
                    "expiry": {
                        "type": "integer",
                        "description": "The SOA Expiry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                    },
                    "hostmaster": {
                        "type": "string",
                        "description": "(Computed) The SOA Hostmaster.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The target zone(domain name) to link to.\n",
                        "willReplaceOnChanges": true
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of network IDs for which the zone is\navailable. If no network is provided, the zone will be created in network 0,\nthe primary NS1 Global Network.\n"
                    },
                    "nxTtl": {
                        "type": "integer",
                        "description": "The SOA NX TTL. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                    },
                    "primary": {
                        "type": "string",
                        "description": "The primary zones' IPv4 address. This makes the zone a\nsecondary. Conflicts with `secondaries`.\n"
                    },
                    "primaryPort": {
                        "type": "integer"
                    },
                    "refresh": {
                        "type": "integer",
                        "description": "The SOA Refresh. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "The SOA Retry. Conflicts with `primary` and\n`additional_primaries` (default must be accepted).\n"
                    },
                    "secondaries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/ZoneSecondary:ZoneSecondary"
                        },
                        "description": "List of secondary servers. This makes the zone a\nprimary. Conflicts with `primary` and `additional_primaries`.\nSecondaries is documented below.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tsig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "TSIG is documented below\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The SOA TTL.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The domain name of the zone.\n",
                        "language": {
                            "csharp": {
                                "name": "ZoneName"
                            }
                        },
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "ns1:index/getDNSSec:getDNSSec": {
            "description": "Provides DNSSEC details about a NS1 Zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\n// Get DNSSEC details about a NS1 Zone.\nconst exampleZone = new ns1.Zone(\"exampleZone\", {\n    dnssec: true,\n    zone: \"terraform.example.io\",\n});\nconst exampleDNSSec = ns1.getDNSSecOutput({\n    zone: exampleZone.zone,\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\n# Get DNSSEC details about a NS1 Zone.\nexample_zone = ns1.Zone(\"exampleZone\",\n    dnssec=True,\n    zone=\"terraform.example.io\")\nexample_dns_sec = ns1.get_dns_sec_output(zone=example_zone.zone)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get DNSSEC details about a NS1 Zone.\n    var exampleZone = new Ns1.Zone(\"exampleZone\", new()\n    {\n        Dnssec = true,\n        ZoneName = \"terraform.example.io\",\n    });\n\n    var exampleDNSSec = Ns1.GetDNSSec.Invoke(new()\n    {\n        Zone = exampleZone.ZoneName,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleZone, err := ns1.NewZone(ctx, \"exampleZone\", \u0026ns1.ZoneArgs{\n\t\t\tDnssec: pulumi.Bool(true),\n\t\t\tZone:   pulumi.String(\"terraform.example.io\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = ns1.GetDNSSecOutput(ctx, ns1.GetDNSSecOutputArgs{\n\t\t\tZone: exampleZone.Zone,\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.Zone;\nimport com.pulumi.ns1.ZoneArgs;\nimport com.pulumi.ns1.Ns1Functions;\nimport com.pulumi.ns1.inputs.GetDNSSecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleZone = new Zone(\"exampleZone\", ZoneArgs.builder()        \n            .dnssec(true)\n            .zone(\"terraform.example.io\")\n            .build());\n\n        final var exampleDNSSec = Ns1Functions.getDNSSec(GetDNSSecArgs.builder()\n            .zone(exampleZone.zone())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Get DNSSEC details about a NS1 Zone.\n  exampleZone:\n    type: ns1:Zone\n    properties:\n      dnssec: true\n      zone: terraform.example.io\nvariables:\n  exampleDNSSec:\n    fn::invoke:\n      Function: ns1:getDNSSec\n      Arguments:\n        zone: ${exampleZone.zone}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDNSSec.\n",
                "properties": {
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone to get DNSSEC details for.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDNSSec.\n",
                "properties": {
                    "delegations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getDNSSecDelegation:getDNSSecDelegation"
                        },
                        "description": "(Computed) - Delegation field is documented\nbelow.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getDNSSecKey:getDNSSecKey"
                        },
                        "description": "(Computed) - Keys field is documented below.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "delegations",
                    "keys",
                    "zone",
                    "id"
                ]
            }
        },
        "ns1:index/getNetworks:getNetworks": {
            "description": "Provides details about NS1 Networks. Use this if you would simply like to read\ninformation from NS1 into your configurations. For read/write operations, you\nshould use a resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst example = ns1.getNetworks({});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.get_networks()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ns1.GetNetworks.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.GetNetworks(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.Ns1Functions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Ns1Functions.getNetworks();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ns1:getNetworks\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getNetworks.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getNetworksNetwork:getNetworksNetwork"
                        },
                        "description": "A set of the available networks. Networks is\ndocumented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networks",
                    "id"
                ]
            }
        },
        "ns1:index/getRecord:getRecord": {
            "description": "Provides details about a NS1 Record. Use this if you would simply like to read\ninformation from NS1 into your configurations. For read/write operations, you\nshould use a resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst example = ns1.getRecord({\n    domain: \"terraform.example.io\",\n    type: \"A\",\n    zone: \"example.io\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.get_record(domain=\"terraform.example.io\",\n    type=\"A\",\n    zone=\"example.io\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ns1.GetRecord.Invoke(new()\n    {\n        Domain = \"terraform.example.io\",\n        Type = \"A\",\n        Zone = \"example.io\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.LookupRecord(ctx, \u0026ns1.LookupRecordArgs{\n\t\t\tDomain: \"terraform.example.io\",\n\t\t\tType:   \"A\",\n\t\t\tZone:   \"example.io\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.Ns1Functions;\nimport com.pulumi.ns1.inputs.GetRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Ns1Functions.getRecord(GetRecordArgs.builder()\n            .domain(\"terraform.example.io\")\n            .type(\"A\")\n            .zone(\"example.io\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ns1:getRecord\n      Arguments:\n        domain: terraform.example.io\n        type: A\n        zone: example.io\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRecord.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The records' domain.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The records' RR type.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The zone the record belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "type",
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRecord.\n",
                "properties": {
                    "answers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getRecordAnswer:getRecordAnswer"
                        },
                        "description": "List of NS1 answers.\n"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getRecordFilter:getRecordFilter"
                        },
                        "description": "List of NS1 filters.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The target record this links to.\n"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map of metadata\n"
                    },
                    "overrideTtl": {
                        "type": "boolean"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getRecordRegion:getRecordRegion"
                        },
                        "description": "List of regions.\n"
                    },
                    "shortAnswers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The records' time to live (in seconds).\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "useClientSubnet": {
                        "type": "boolean",
                        "description": "Whether to use EDNS client subnet data when available (in filter chain).\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "answers",
                    "domain",
                    "filters",
                    "link",
                    "meta",
                    "overrideTtl",
                    "regions",
                    "shortAnswers",
                    "tags",
                    "ttl",
                    "type",
                    "useClientSubnet",
                    "zone",
                    "id"
                ]
            }
        },
        "ns1:index/getZone:getZone": {
            "description": "Provides details about a NS1 Zone. Use this if you would simply like to read\ninformation from NS1 into your configurations. For read/write operations, you\nshould use a resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as ns1 from \"@pulumi/ns1\";\n\nconst example = ns1.getZone({\n    zone: \"terraform.example.io\",\n});\n```\n```python\nimport pulumi\nimport pulumi_ns1 as ns1\n\nexample = ns1.get_zone(zone=\"terraform.example.io\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Ns1 = Pulumi.Ns1;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Ns1.GetZone.Invoke(new()\n    {\n        Zone = \"terraform.example.io\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ns1.LookupZone(ctx, \u0026ns1.LookupZoneArgs{\n\t\t\tZone: \"terraform.example.io\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.ns1.Ns1Functions;\nimport com.pulumi.ns1.inputs.GetZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Ns1Functions.getZone(GetZoneArgs.builder()\n            .zone(\"terraform.example.io\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: ns1:getZone\n      Arguments:\n        zone: terraform.example.io\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZone.\n",
                "properties": {
                    "additionalPorts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "additionalPrimaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of additional IPv4 addresses for the primary\nzone.\n"
                    },
                    "primaryPort": {
                        "type": "integer"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The domain name of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getZone.\n",
                "properties": {
                    "additionalPorts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "additionalPrimaries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of additional IPv4 addresses for the primary\nzone.\n"
                    },
                    "dnsServers": {
                        "type": "string",
                        "description": "Authoritative Name Servers.\n"
                    },
                    "dnssec": {
                        "type": "boolean",
                        "description": "Whether or not DNSSEC is enabled for the zone.\n"
                    },
                    "expiry": {
                        "type": "integer",
                        "description": "The SOA Expiry.\n"
                    },
                    "hostmaster": {
                        "type": "string",
                        "description": "The SOA Hostmaster.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The linked target zone.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of network IDs (`int`) for which the zone should be made\navailable. Default is network 0, the primary NSONE Global Network.\n"
                    },
                    "nxTtl": {
                        "type": "integer",
                        "description": "The SOA NX TTL.\n"
                    },
                    "primary": {
                        "type": "string",
                        "description": "The primary zones' IPv4 address.\n"
                    },
                    "primaryPort": {
                        "type": "integer"
                    },
                    "refresh": {
                        "type": "integer",
                        "description": "The SOA Refresh.\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "The SOA Retry.\n"
                    },
                    "secondaries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/ns1:index/getZoneSecondary:getZoneSecondary"
                        },
                        "description": "List of secondary servers. Secondaries is\ndocumented below.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The SOA TTL.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dnsServers",
                    "dnssec",
                    "expiry",
                    "hostmaster",
                    "link",
                    "networks",
                    "nxTtl",
                    "primary",
                    "refresh",
                    "retry",
                    "secondaries",
                    "tags",
                    "ttl",
                    "zone",
                    "id"
                ]
            }
        }
    }
}