// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZonePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetZonePlainArgs Empty = new GetZonePlainArgs();

    @Import(name="additionalPorts")
    private @Nullable List<Integer> additionalPorts;

    public Optional<List<Integer>> additionalPorts() {
        return Optional.ofNullable(this.additionalPorts);
    }

    /**
     * List of additional IPv4 addresses for the primary
     * zone.
     * 
     */
    @Import(name="additionalPrimaries")
    private @Nullable List<String> additionalPrimaries;

    /**
     * @return List of additional IPv4 addresses for the primary
     * zone.
     * 
     */
    public Optional<List<String>> additionalPrimaries() {
        return Optional.ofNullable(this.additionalPrimaries);
    }

    @Import(name="primaryNetwork")
    private @Nullable Integer primaryNetwork;

    public Optional<Integer> primaryNetwork() {
        return Optional.ofNullable(this.primaryNetwork);
    }

    @Import(name="primaryPort")
    private @Nullable Integer primaryPort;

    public Optional<Integer> primaryPort() {
        return Optional.ofNullable(this.primaryPort);
    }

    /**
     * The domain name of the zone.
     * 
     */
    @Import(name="zone", required=true)
    private String zone;

    /**
     * @return The domain name of the zone.
     * 
     */
    public String zone() {
        return this.zone;
    }

    private GetZonePlainArgs() {}

    private GetZonePlainArgs(GetZonePlainArgs $) {
        this.additionalPorts = $.additionalPorts;
        this.additionalPrimaries = $.additionalPrimaries;
        this.primaryNetwork = $.primaryNetwork;
        this.primaryPort = $.primaryPort;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZonePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZonePlainArgs $;

        public Builder() {
            $ = new GetZonePlainArgs();
        }

        public Builder(GetZonePlainArgs defaults) {
            $ = new GetZonePlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder additionalPorts(@Nullable List<Integer> additionalPorts) {
            $.additionalPorts = additionalPorts;
            return this;
        }

        public Builder additionalPorts(Integer... additionalPorts) {
            return additionalPorts(List.of(additionalPorts));
        }

        /**
         * @param additionalPrimaries List of additional IPv4 addresses for the primary
         * zone.
         * 
         * @return builder
         * 
         */
        public Builder additionalPrimaries(@Nullable List<String> additionalPrimaries) {
            $.additionalPrimaries = additionalPrimaries;
            return this;
        }

        /**
         * @param additionalPrimaries List of additional IPv4 addresses for the primary
         * zone.
         * 
         * @return builder
         * 
         */
        public Builder additionalPrimaries(String... additionalPrimaries) {
            return additionalPrimaries(List.of(additionalPrimaries));
        }

        public Builder primaryNetwork(@Nullable Integer primaryNetwork) {
            $.primaryNetwork = primaryNetwork;
            return this;
        }

        public Builder primaryPort(@Nullable Integer primaryPort) {
            $.primaryPort = primaryPort;
            return this;
        }

        /**
         * @param zone The domain name of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            $.zone = zone;
            return this;
        }

        public GetZonePlainArgs build() {
            if ($.zone == null) {
                throw new MissingRequiredPropertyException("GetZonePlainArgs", "zone");
            }
            return $;
        }
    }

}
