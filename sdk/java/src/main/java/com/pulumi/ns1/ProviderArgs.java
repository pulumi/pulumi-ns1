// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The ns1 API key, this is required
     * 
     */
    @Import(name="apikey")
    private @Nullable Output<String> apikey;

    /**
     * @return The ns1 API key, this is required
     * 
     */
    public Optional<Output<String>> apikey() {
        return Optional.ofNullable(this.apikey);
    }

    @Import(name="enableDdi", json=true)
    private @Nullable Output<Boolean> enableDdi;

    public Optional<Output<Boolean>> enableDdi() {
        return Optional.ofNullable(this.enableDdi);
    }

    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    @Import(name="ignoreSsl", json=true)
    private @Nullable Output<Boolean> ignoreSsl;

    public Optional<Output<Boolean>> ignoreSsl() {
        return Optional.ofNullable(this.ignoreSsl);
    }

    @Import(name="rateLimitParallelism", json=true)
    private @Nullable Output<Integer> rateLimitParallelism;

    public Optional<Output<Integer>> rateLimitParallelism() {
        return Optional.ofNullable(this.rateLimitParallelism);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.apikey = $.apikey;
        this.enableDdi = $.enableDdi;
        this.endpoint = $.endpoint;
        this.ignoreSsl = $.ignoreSsl;
        this.rateLimitParallelism = $.rateLimitParallelism;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apikey The ns1 API key, this is required
         * 
         * @return builder
         * 
         */
        public Builder apikey(@Nullable Output<String> apikey) {
            $.apikey = apikey;
            return this;
        }

        /**
         * @param apikey The ns1 API key, this is required
         * 
         * @return builder
         * 
         */
        public Builder apikey(String apikey) {
            return apikey(Output.of(apikey));
        }

        public Builder enableDdi(@Nullable Output<Boolean> enableDdi) {
            $.enableDdi = enableDdi;
            return this;
        }

        public Builder enableDdi(Boolean enableDdi) {
            return enableDdi(Output.of(enableDdi));
        }

        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder ignoreSsl(@Nullable Output<Boolean> ignoreSsl) {
            $.ignoreSsl = ignoreSsl;
            return this;
        }

        public Builder ignoreSsl(Boolean ignoreSsl) {
            return ignoreSsl(Output.of(ignoreSsl));
        }

        public Builder rateLimitParallelism(@Nullable Output<Integer> rateLimitParallelism) {
            $.rateLimitParallelism = rateLimitParallelism;
            return this;
        }

        public Builder rateLimitParallelism(Integer rateLimitParallelism) {
            return rateLimitParallelism(Output.of(rateLimitParallelism));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
