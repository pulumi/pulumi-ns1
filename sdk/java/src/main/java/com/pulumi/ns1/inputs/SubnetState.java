// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubnetState extends com.pulumi.resources.ResourceArgs {

    public static final SubnetState Empty = new SubnetState();

    @Import(name="children")
    private @Nullable Output<Integer> children;

    public Optional<Output<Integer>> children() {
        return Optional.ofNullable(this.children);
    }

    @Import(name="desc")
    private @Nullable Output<String> desc;

    public Optional<Output<String>> desc() {
        return Optional.ofNullable(this.desc);
    }

    @Import(name="dhcpScoped")
    private @Nullable Output<Boolean> dhcpScoped;

    public Optional<Output<Boolean>> dhcpScoped() {
        return Optional.ofNullable(this.dhcpScoped);
    }

    @Import(name="freeAddresses")
    private @Nullable Output<String> freeAddresses;

    public Optional<Output<String>> freeAddresses() {
        return Optional.ofNullable(this.freeAddresses);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="networkId")
    private @Nullable Output<Integer> networkId;

    public Optional<Output<Integer>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    @Import(name="parentId")
    private @Nullable Output<Integer> parentId;

    public Optional<Output<Integer>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="totalAddresses")
    private @Nullable Output<String> totalAddresses;

    public Optional<Output<String>> totalAddresses() {
        return Optional.ofNullable(this.totalAddresses);
    }

    @Import(name="usedAddresses")
    private @Nullable Output<String> usedAddresses;

    public Optional<Output<String>> usedAddresses() {
        return Optional.ofNullable(this.usedAddresses);
    }

    private SubnetState() {}

    private SubnetState(SubnetState $) {
        this.children = $.children;
        this.desc = $.desc;
        this.dhcpScoped = $.dhcpScoped;
        this.freeAddresses = $.freeAddresses;
        this.name = $.name;
        this.networkId = $.networkId;
        this.parentId = $.parentId;
        this.prefix = $.prefix;
        this.status = $.status;
        this.tags = $.tags;
        this.totalAddresses = $.totalAddresses;
        this.usedAddresses = $.usedAddresses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetState $;

        public Builder() {
            $ = new SubnetState();
        }

        public Builder(SubnetState defaults) {
            $ = new SubnetState(Objects.requireNonNull(defaults));
        }

        public Builder children(@Nullable Output<Integer> children) {
            $.children = children;
            return this;
        }

        public Builder children(Integer children) {
            return children(Output.of(children));
        }

        public Builder desc(@Nullable Output<String> desc) {
            $.desc = desc;
            return this;
        }

        public Builder desc(String desc) {
            return desc(Output.of(desc));
        }

        public Builder dhcpScoped(@Nullable Output<Boolean> dhcpScoped) {
            $.dhcpScoped = dhcpScoped;
            return this;
        }

        public Builder dhcpScoped(Boolean dhcpScoped) {
            return dhcpScoped(Output.of(dhcpScoped));
        }

        public Builder freeAddresses(@Nullable Output<String> freeAddresses) {
            $.freeAddresses = freeAddresses;
            return this;
        }

        public Builder freeAddresses(String freeAddresses) {
            return freeAddresses(Output.of(freeAddresses));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networkId(@Nullable Output<Integer> networkId) {
            $.networkId = networkId;
            return this;
        }

        public Builder networkId(Integer networkId) {
            return networkId(Output.of(networkId));
        }

        public Builder parentId(@Nullable Output<Integer> parentId) {
            $.parentId = parentId;
            return this;
        }

        public Builder parentId(Integer parentId) {
            return parentId(Output.of(parentId));
        }

        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        public Builder totalAddresses(@Nullable Output<String> totalAddresses) {
            $.totalAddresses = totalAddresses;
            return this;
        }

        public Builder totalAddresses(String totalAddresses) {
            return totalAddresses(Output.of(totalAddresses));
        }

        public Builder usedAddresses(@Nullable Output<String> usedAddresses) {
            $.usedAddresses = usedAddresses;
            return this;
        }

        public Builder usedAddresses(String usedAddresses) {
            return usedAddresses(Output.of(usedAddresses));
        }

        public SubnetState build() {
            return $;
        }
    }

}
