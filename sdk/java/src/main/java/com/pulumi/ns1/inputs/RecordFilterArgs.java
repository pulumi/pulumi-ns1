// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecordFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecordFilterArgs Empty = new RecordFilterArgs();

    /**
     * The filters&#39; configuration. Simple key/value pairs
     * determined by the filter type.
     * 
     */
    @Import(name="config")
    private @Nullable Output<Map<String,Object>> config;

    /**
     * @return The filters&#39; configuration. Simple key/value pairs
     * determined by the filter type.
     * 
     */
    public Optional<Output<Map<String,Object>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * Determines whether the filter is applied in the
     * filter chain.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Determines whether the filter is applied in the
     * filter chain.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The type of filter.
     * 
     */
    @Import(name="filter", required=true)
    private Output<String> filter;

    /**
     * @return The type of filter.
     * 
     */
    public Output<String> filter() {
        return this.filter;
    }

    private RecordFilterArgs() {}

    private RecordFilterArgs(RecordFilterArgs $) {
        this.config = $.config;
        this.disabled = $.disabled;
        this.filter = $.filter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecordFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecordFilterArgs $;

        public Builder() {
            $ = new RecordFilterArgs();
        }

        public Builder(RecordFilterArgs defaults) {
            $ = new RecordFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config The filters&#39; configuration. Simple key/value pairs
         * determined by the filter type.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<Map<String,Object>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The filters&#39; configuration. Simple key/value pairs
         * determined by the filter type.
         * 
         * @return builder
         * 
         */
        public Builder config(Map<String,Object> config) {
            return config(Output.of(config));
        }

        /**
         * @param disabled Determines whether the filter is applied in the
         * filter chain.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Determines whether the filter is applied in the
         * filter chain.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param filter The type of filter.
         * 
         * @return builder
         * 
         */
        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The type of filter.
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public RecordFilterArgs build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            return $;
        }
    }

}
