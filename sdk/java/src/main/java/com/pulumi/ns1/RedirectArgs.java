// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RedirectArgs extends com.pulumi.resources.ResourceArgs {

    public static final RedirectArgs Empty = new RedirectArgs();

    /**
     * The certificate redirect id.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return The certificate redirect id.
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * The domain the redirect refers to.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The domain the redirect refers to.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * How the target is interpreted:
     * * __all__       appends the entire incoming path to the target destination;
     * * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
     * * __none__      does not append any part of the incoming path.
     * 
     */
    @Import(name="forwardingMode")
    private @Nullable Output<String> forwardingMode;

    /**
     * @return How the target is interpreted:
     * * __all__       appends the entire incoming path to the target destination;
     * * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
     * * __none__      does not append any part of the incoming path.
     * 
     */
    public Optional<Output<String>> forwardingMode() {
        return Optional.ofNullable(this.forwardingMode);
    }

    /**
     * How the redirect is executed:
     * * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
     *   their database and replace it with the new target page (this is recommended for SEO);
     * * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
     *   page indexed as the redirect is only temporary (while both pages might appear in the
     *   search results, a temporary redirect suggests to the search engine that it should
     *   prefer the new target page);
     * * __masking__   preserves the redirected domain in the browser&#39;s address bar (this lets users see the
     *   address they entered, even though the displayed content comes from a different web page).
     * 
     */
    @Import(name="forwardingType")
    private @Nullable Output<String> forwardingType;

    /**
     * @return How the redirect is executed:
     * * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
     *   their database and replace it with the new target page (this is recommended for SEO);
     * * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
     *   page indexed as the redirect is only temporary (while both pages might appear in the
     *   search results, a temporary redirect suggests to the search engine that it should
     *   prefer the new target page);
     * * __masking__   preserves the redirected domain in the browser&#39;s address bar (this lets users see the
     *   address they entered, even though the displayed content comes from a different web page).
     * 
     */
    public Optional<Output<String>> forwardingType() {
        return Optional.ofNullable(this.forwardingType);
    }

    /**
     * Forces redirect for users that try to visit HTTP domain to HTTPS instead.
     * 
     */
    @Import(name="httpsForced")
    private @Nullable Output<Boolean> httpsForced;

    /**
     * @return Forces redirect for users that try to visit HTTP domain to HTTPS instead.
     * 
     */
    public Optional<Output<Boolean>> httpsForced() {
        return Optional.ofNullable(this.httpsForced);
    }

    /**
     * The path on the domain to redirect from.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path on the domain to redirect from.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Enables the query string of a URL to be applied directly to the new target URL.
     * 
     */
    @Import(name="queryForwarding")
    private @Nullable Output<Boolean> queryForwarding;

    /**
     * @return Enables the query string of a URL to be applied directly to the new target URL.
     * 
     */
    public Optional<Output<Boolean>> queryForwarding() {
        return Optional.ofNullable(this.queryForwarding);
    }

    /**
     * Tags associated with the configuration.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags associated with the configuration.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The URL to redirect to.
     * 
     */
    @Import(name="target", required=true)
    private Output<String> target;

    /**
     * @return The URL to redirect to.
     * 
     */
    public Output<String> target() {
        return this.target;
    }

    private RedirectArgs() {}

    private RedirectArgs(RedirectArgs $) {
        this.certificateId = $.certificateId;
        this.domain = $.domain;
        this.forwardingMode = $.forwardingMode;
        this.forwardingType = $.forwardingType;
        this.httpsForced = $.httpsForced;
        this.path = $.path;
        this.queryForwarding = $.queryForwarding;
        this.tags = $.tags;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedirectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedirectArgs $;

        public Builder() {
            $ = new RedirectArgs();
        }

        public Builder(RedirectArgs defaults) {
            $ = new RedirectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId The certificate redirect id.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId The certificate redirect id.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param domain The domain the redirect refers to.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain the redirect refers to.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param forwardingMode How the target is interpreted:
         * * __all__       appends the entire incoming path to the target destination;
         * * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
         * * __none__      does not append any part of the incoming path.
         * 
         * @return builder
         * 
         */
        public Builder forwardingMode(@Nullable Output<String> forwardingMode) {
            $.forwardingMode = forwardingMode;
            return this;
        }

        /**
         * @param forwardingMode How the target is interpreted:
         * * __all__       appends the entire incoming path to the target destination;
         * * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
         * * __none__      does not append any part of the incoming path.
         * 
         * @return builder
         * 
         */
        public Builder forwardingMode(String forwardingMode) {
            return forwardingMode(Output.of(forwardingMode));
        }

        /**
         * @param forwardingType How the redirect is executed:
         * * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
         *   their database and replace it with the new target page (this is recommended for SEO);
         * * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
         *   page indexed as the redirect is only temporary (while both pages might appear in the
         *   search results, a temporary redirect suggests to the search engine that it should
         *   prefer the new target page);
         * * __masking__   preserves the redirected domain in the browser&#39;s address bar (this lets users see the
         *   address they entered, even though the displayed content comes from a different web page).
         * 
         * @return builder
         * 
         */
        public Builder forwardingType(@Nullable Output<String> forwardingType) {
            $.forwardingType = forwardingType;
            return this;
        }

        /**
         * @param forwardingType How the redirect is executed:
         * * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
         *   their database and replace it with the new target page (this is recommended for SEO);
         * * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
         *   page indexed as the redirect is only temporary (while both pages might appear in the
         *   search results, a temporary redirect suggests to the search engine that it should
         *   prefer the new target page);
         * * __masking__   preserves the redirected domain in the browser&#39;s address bar (this lets users see the
         *   address they entered, even though the displayed content comes from a different web page).
         * 
         * @return builder
         * 
         */
        public Builder forwardingType(String forwardingType) {
            return forwardingType(Output.of(forwardingType));
        }

        /**
         * @param httpsForced Forces redirect for users that try to visit HTTP domain to HTTPS instead.
         * 
         * @return builder
         * 
         */
        public Builder httpsForced(@Nullable Output<Boolean> httpsForced) {
            $.httpsForced = httpsForced;
            return this;
        }

        /**
         * @param httpsForced Forces redirect for users that try to visit HTTP domain to HTTPS instead.
         * 
         * @return builder
         * 
         */
        public Builder httpsForced(Boolean httpsForced) {
            return httpsForced(Output.of(httpsForced));
        }

        /**
         * @param path The path on the domain to redirect from.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path on the domain to redirect from.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param queryForwarding Enables the query string of a URL to be applied directly to the new target URL.
         * 
         * @return builder
         * 
         */
        public Builder queryForwarding(@Nullable Output<Boolean> queryForwarding) {
            $.queryForwarding = queryForwarding;
            return this;
        }

        /**
         * @param queryForwarding Enables the query string of a URL to be applied directly to the new target URL.
         * 
         * @return builder
         * 
         */
        public Builder queryForwarding(Boolean queryForwarding) {
            return queryForwarding(Output.of(queryForwarding));
        }

        /**
         * @param tags Tags associated with the configuration.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags associated with the configuration.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags associated with the configuration.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param target The URL to redirect to.
         * 
         * @return builder
         * 
         */
        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The URL to redirect to.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public RedirectArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("RedirectArgs", "domain");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("RedirectArgs", "path");
            }
            if ($.target == null) {
                throw new MissingRequiredPropertyException("RedirectArgs", "target");
            }
            return $;
        }
    }

}
