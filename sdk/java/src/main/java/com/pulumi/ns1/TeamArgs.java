// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ns1.inputs.TeamDnsRecordsAllowArgs;
import com.pulumi.ns1.inputs.TeamDnsRecordsDenyArgs;
import com.pulumi.ns1.inputs.TeamIpWhitelistArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamArgs Empty = new TeamArgs();

    /**
     * Whether the team can modify account settings.
     * 
     */
    @Import(name="accountManageAccountSettings")
    private @Nullable Output<Boolean> accountManageAccountSettings;

    /**
     * @return Whether the team can modify account settings.
     * 
     */
    public Optional<Output<Boolean>> accountManageAccountSettings() {
        return Optional.ofNullable(this.accountManageAccountSettings);
    }

    /**
     * Whether the team can modify account apikeys.
     * 
     */
    @Import(name="accountManageApikeys")
    private @Nullable Output<Boolean> accountManageApikeys;

    /**
     * @return Whether the team can modify account apikeys.
     * 
     */
    public Optional<Output<Boolean>> accountManageApikeys() {
        return Optional.ofNullable(this.accountManageApikeys);
    }

    /**
     * Whether the team can manage ip whitelist.
     * 
     */
    @Import(name="accountManageIpWhitelist")
    private @Nullable Output<Boolean> accountManageIpWhitelist;

    /**
     * @return Whether the team can manage ip whitelist.
     * 
     */
    public Optional<Output<Boolean>> accountManageIpWhitelist() {
        return Optional.ofNullable(this.accountManageIpWhitelist);
    }

    /**
     * Whether the team can modify account payment methods.
     * 
     */
    @Import(name="accountManagePaymentMethods")
    private @Nullable Output<Boolean> accountManagePaymentMethods;

    /**
     * @return Whether the team can modify account payment methods.
     * 
     */
    public Optional<Output<Boolean>> accountManagePaymentMethods() {
        return Optional.ofNullable(this.accountManagePaymentMethods);
    }

    /**
     * No longer in use.
     * 
     * @deprecated
     * obsolete, should no longer be used
     * 
     */
    @Deprecated /* obsolete, should no longer be used */
    @Import(name="accountManagePlan")
    private @Nullable Output<Boolean> accountManagePlan;

    /**
     * @return No longer in use.
     * 
     * @deprecated
     * obsolete, should no longer be used
     * 
     */
    @Deprecated /* obsolete, should no longer be used */
    public Optional<Output<Boolean>> accountManagePlan() {
        return Optional.ofNullable(this.accountManagePlan);
    }

    /**
     * Whether the team can modify other teams in the account.
     * 
     */
    @Import(name="accountManageTeams")
    private @Nullable Output<Boolean> accountManageTeams;

    /**
     * @return Whether the team can modify other teams in the account.
     * 
     */
    public Optional<Output<Boolean>> accountManageTeams() {
        return Optional.ofNullable(this.accountManageTeams);
    }

    /**
     * Whether the team can modify account users.
     * 
     */
    @Import(name="accountManageUsers")
    private @Nullable Output<Boolean> accountManageUsers;

    /**
     * @return Whether the team can modify account users.
     * 
     */
    public Optional<Output<Boolean>> accountManageUsers() {
        return Optional.ofNullable(this.accountManageUsers);
    }

    /**
     * Whether the team can view activity logs.
     * 
     */
    @Import(name="accountViewActivityLog")
    private @Nullable Output<Boolean> accountViewActivityLog;

    /**
     * @return Whether the team can view activity logs.
     * 
     */
    public Optional<Output<Boolean>> accountViewActivityLog() {
        return Optional.ofNullable(this.accountViewActivityLog);
    }

    /**
     * Whether the team can view invoices.
     * 
     */
    @Import(name="accountViewInvoices")
    private @Nullable Output<Boolean> accountViewInvoices;

    /**
     * @return Whether the team can view invoices.
     * 
     */
    public Optional<Output<Boolean>> accountViewInvoices() {
        return Optional.ofNullable(this.accountViewInvoices);
    }

    /**
     * Whether the team can modify data feeds.
     * 
     */
    @Import(name="dataManageDatafeeds")
    private @Nullable Output<Boolean> dataManageDatafeeds;

    /**
     * @return Whether the team can modify data feeds.
     * 
     */
    public Optional<Output<Boolean>> dataManageDatafeeds() {
        return Optional.ofNullable(this.dataManageDatafeeds);
    }

    /**
     * Whether the team can modify data sources.
     * 
     */
    @Import(name="dataManageDatasources")
    private @Nullable Output<Boolean> dataManageDatasources;

    /**
     * @return Whether the team can modify data sources.
     * 
     */
    public Optional<Output<Boolean>> dataManageDatasources() {
        return Optional.ofNullable(this.dataManageDatasources);
    }

    /**
     * Whether the team can publish to data feeds.
     * 
     */
    @Import(name="dataPushToDatafeeds")
    private @Nullable Output<Boolean> dataPushToDatafeeds;

    /**
     * @return Whether the team can publish to data feeds.
     * 
     */
    public Optional<Output<Boolean>> dataPushToDatafeeds() {
        return Optional.ofNullable(this.dataPushToDatafeeds);
    }

    /**
     * Whether the team can modify the accounts zones.
     * 
     */
    @Import(name="dnsManageZones")
    private @Nullable Output<Boolean> dnsManageZones;

    /**
     * @return Whether the team can modify the accounts zones.
     * 
     */
    public Optional<Output<Boolean>> dnsManageZones() {
        return Optional.ofNullable(this.dnsManageZones);
    }

    /**
     * List of records that the team may access.
     * 
     */
    @Import(name="dnsRecordsAllows")
    private @Nullable Output<List<TeamDnsRecordsAllowArgs>> dnsRecordsAllows;

    /**
     * @return List of records that the team may access.
     * 
     */
    public Optional<Output<List<TeamDnsRecordsAllowArgs>>> dnsRecordsAllows() {
        return Optional.ofNullable(this.dnsRecordsAllows);
    }

    /**
     * List of records that the team may not access.
     * 
     */
    @Import(name="dnsRecordsDenies")
    private @Nullable Output<List<TeamDnsRecordsDenyArgs>> dnsRecordsDenies;

    /**
     * @return List of records that the team may not access.
     * 
     */
    public Optional<Output<List<TeamDnsRecordsDenyArgs>>> dnsRecordsDenies() {
        return Optional.ofNullable(this.dnsRecordsDenies);
    }

    /**
     * Whether the team can view the accounts zones.
     * 
     */
    @Import(name="dnsViewZones")
    private @Nullable Output<Boolean> dnsViewZones;

    /**
     * @return Whether the team can view the accounts zones.
     * 
     */
    public Optional<Output<Boolean>> dnsViewZones() {
        return Optional.ofNullable(this.dnsViewZones);
    }

    /**
     * If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
     * 
     */
    @Import(name="dnsZonesAllowByDefault")
    private @Nullable Output<Boolean> dnsZonesAllowByDefault;

    /**
     * @return If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
     * 
     */
    public Optional<Output<Boolean>> dnsZonesAllowByDefault() {
        return Optional.ofNullable(this.dnsZonesAllowByDefault);
    }

    /**
     * List of zones that the team may access.
     * 
     */
    @Import(name="dnsZonesAllows")
    private @Nullable Output<List<String>> dnsZonesAllows;

    /**
     * @return List of zones that the team may access.
     * 
     */
    public Optional<Output<List<String>>> dnsZonesAllows() {
        return Optional.ofNullable(this.dnsZonesAllows);
    }

    /**
     * List of zones that the team may not access.
     * 
     */
    @Import(name="dnsZonesDenies")
    private @Nullable Output<List<String>> dnsZonesDenies;

    /**
     * @return List of zones that the team may not access.
     * 
     */
    public Optional<Output<List<String>>> dnsZonesDenies() {
        return Optional.ofNullable(this.dnsZonesDenies);
    }

    /**
     * Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each &#34;allow&#34; list.
     * 
     */
    @Import(name="ipWhitelists")
    private @Nullable Output<List<TeamIpWhitelistArgs>> ipWhitelists;

    /**
     * @return Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each &#34;allow&#34; list.
     * 
     */
    public Optional<Output<List<TeamIpWhitelistArgs>>> ipWhitelists() {
        return Optional.ofNullable(this.ipWhitelists);
    }

    /**
     * Whether the user can create monitoring jobs when manage_jobs is not set to true.
     * 
     */
    @Import(name="monitoringCreateJobs")
    private @Nullable Output<Boolean> monitoringCreateJobs;

    /**
     * @return Whether the user can create monitoring jobs when manage_jobs is not set to true.
     * 
     */
    public Optional<Output<Boolean>> monitoringCreateJobs() {
        return Optional.ofNullable(this.monitoringCreateJobs);
    }

    /**
     * Whether the user can delete monitoring jobs when manage_jobs is not set to true.
     * 
     */
    @Import(name="monitoringDeleteJobs")
    private @Nullable Output<Boolean> monitoringDeleteJobs;

    /**
     * @return Whether the user can delete monitoring jobs when manage_jobs is not set to true.
     * 
     */
    public Optional<Output<Boolean>> monitoringDeleteJobs() {
        return Optional.ofNullable(this.monitoringDeleteJobs);
    }

    /**
     * Whether the user can create, update, and delete monitoring jobs.
     * 
     */
    @Import(name="monitoringManageJobs")
    private @Nullable Output<Boolean> monitoringManageJobs;

    /**
     * @return Whether the user can create, update, and delete monitoring jobs.
     * 
     */
    public Optional<Output<Boolean>> monitoringManageJobs() {
        return Optional.ofNullable(this.monitoringManageJobs);
    }

    /**
     * Whether the team can modify notification lists.
     * 
     */
    @Import(name="monitoringManageLists")
    private @Nullable Output<Boolean> monitoringManageLists;

    /**
     * @return Whether the team can modify notification lists.
     * 
     */
    public Optional<Output<Boolean>> monitoringManageLists() {
        return Optional.ofNullable(this.monitoringManageLists);
    }

    /**
     * Whether the user can update monitoring jobs when manage_jobs is not set to true.
     * 
     */
    @Import(name="monitoringUpdateJobs")
    private @Nullable Output<Boolean> monitoringUpdateJobs;

    /**
     * @return Whether the user can update monitoring jobs when manage_jobs is not set to true.
     * 
     */
    public Optional<Output<Boolean>> monitoringUpdateJobs() {
        return Optional.ofNullable(this.monitoringUpdateJobs);
    }

    /**
     * Whether the team can view monitoring jobs.
     * 
     */
    @Import(name="monitoringViewJobs")
    private @Nullable Output<Boolean> monitoringViewJobs;

    /**
     * @return Whether the team can view monitoring jobs.
     * 
     */
    public Optional<Output<Boolean>> monitoringViewJobs() {
        return Optional.ofNullable(this.monitoringViewJobs);
    }

    /**
     * The free form name of the team.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The free form name of the team.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the team can manage global active directory.
     * Only relevant for the DDI product.
     * 
     */
    @Import(name="securityManageActiveDirectory")
    private @Nullable Output<Boolean> securityManageActiveDirectory;

    /**
     * @return Whether the team can manage global active directory.
     * Only relevant for the DDI product.
     * 
     */
    public Optional<Output<Boolean>> securityManageActiveDirectory() {
        return Optional.ofNullable(this.securityManageActiveDirectory);
    }

    /**
     * Whether the team can manage global two factor authentication.
     * 
     */
    @Import(name="securityManageGlobal2fa")
    private @Nullable Output<Boolean> securityManageGlobal2fa;

    /**
     * @return Whether the team can manage global two factor authentication.
     * 
     */
    public Optional<Output<Boolean>> securityManageGlobal2fa() {
        return Optional.ofNullable(this.securityManageGlobal2fa);
    }

    private TeamArgs() {}

    private TeamArgs(TeamArgs $) {
        this.accountManageAccountSettings = $.accountManageAccountSettings;
        this.accountManageApikeys = $.accountManageApikeys;
        this.accountManageIpWhitelist = $.accountManageIpWhitelist;
        this.accountManagePaymentMethods = $.accountManagePaymentMethods;
        this.accountManagePlan = $.accountManagePlan;
        this.accountManageTeams = $.accountManageTeams;
        this.accountManageUsers = $.accountManageUsers;
        this.accountViewActivityLog = $.accountViewActivityLog;
        this.accountViewInvoices = $.accountViewInvoices;
        this.dataManageDatafeeds = $.dataManageDatafeeds;
        this.dataManageDatasources = $.dataManageDatasources;
        this.dataPushToDatafeeds = $.dataPushToDatafeeds;
        this.dnsManageZones = $.dnsManageZones;
        this.dnsRecordsAllows = $.dnsRecordsAllows;
        this.dnsRecordsDenies = $.dnsRecordsDenies;
        this.dnsViewZones = $.dnsViewZones;
        this.dnsZonesAllowByDefault = $.dnsZonesAllowByDefault;
        this.dnsZonesAllows = $.dnsZonesAllows;
        this.dnsZonesDenies = $.dnsZonesDenies;
        this.ipWhitelists = $.ipWhitelists;
        this.monitoringCreateJobs = $.monitoringCreateJobs;
        this.monitoringDeleteJobs = $.monitoringDeleteJobs;
        this.monitoringManageJobs = $.monitoringManageJobs;
        this.monitoringManageLists = $.monitoringManageLists;
        this.monitoringUpdateJobs = $.monitoringUpdateJobs;
        this.monitoringViewJobs = $.monitoringViewJobs;
        this.name = $.name;
        this.securityManageActiveDirectory = $.securityManageActiveDirectory;
        this.securityManageGlobal2fa = $.securityManageGlobal2fa;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamArgs $;

        public Builder() {
            $ = new TeamArgs();
        }

        public Builder(TeamArgs defaults) {
            $ = new TeamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountManageAccountSettings Whether the team can modify account settings.
         * 
         * @return builder
         * 
         */
        public Builder accountManageAccountSettings(@Nullable Output<Boolean> accountManageAccountSettings) {
            $.accountManageAccountSettings = accountManageAccountSettings;
            return this;
        }

        /**
         * @param accountManageAccountSettings Whether the team can modify account settings.
         * 
         * @return builder
         * 
         */
        public Builder accountManageAccountSettings(Boolean accountManageAccountSettings) {
            return accountManageAccountSettings(Output.of(accountManageAccountSettings));
        }

        /**
         * @param accountManageApikeys Whether the team can modify account apikeys.
         * 
         * @return builder
         * 
         */
        public Builder accountManageApikeys(@Nullable Output<Boolean> accountManageApikeys) {
            $.accountManageApikeys = accountManageApikeys;
            return this;
        }

        /**
         * @param accountManageApikeys Whether the team can modify account apikeys.
         * 
         * @return builder
         * 
         */
        public Builder accountManageApikeys(Boolean accountManageApikeys) {
            return accountManageApikeys(Output.of(accountManageApikeys));
        }

        /**
         * @param accountManageIpWhitelist Whether the team can manage ip whitelist.
         * 
         * @return builder
         * 
         */
        public Builder accountManageIpWhitelist(@Nullable Output<Boolean> accountManageIpWhitelist) {
            $.accountManageIpWhitelist = accountManageIpWhitelist;
            return this;
        }

        /**
         * @param accountManageIpWhitelist Whether the team can manage ip whitelist.
         * 
         * @return builder
         * 
         */
        public Builder accountManageIpWhitelist(Boolean accountManageIpWhitelist) {
            return accountManageIpWhitelist(Output.of(accountManageIpWhitelist));
        }

        /**
         * @param accountManagePaymentMethods Whether the team can modify account payment methods.
         * 
         * @return builder
         * 
         */
        public Builder accountManagePaymentMethods(@Nullable Output<Boolean> accountManagePaymentMethods) {
            $.accountManagePaymentMethods = accountManagePaymentMethods;
            return this;
        }

        /**
         * @param accountManagePaymentMethods Whether the team can modify account payment methods.
         * 
         * @return builder
         * 
         */
        public Builder accountManagePaymentMethods(Boolean accountManagePaymentMethods) {
            return accountManagePaymentMethods(Output.of(accountManagePaymentMethods));
        }

        /**
         * @param accountManagePlan No longer in use.
         * 
         * @return builder
         * 
         * @deprecated
         * obsolete, should no longer be used
         * 
         */
        @Deprecated /* obsolete, should no longer be used */
        public Builder accountManagePlan(@Nullable Output<Boolean> accountManagePlan) {
            $.accountManagePlan = accountManagePlan;
            return this;
        }

        /**
         * @param accountManagePlan No longer in use.
         * 
         * @return builder
         * 
         * @deprecated
         * obsolete, should no longer be used
         * 
         */
        @Deprecated /* obsolete, should no longer be used */
        public Builder accountManagePlan(Boolean accountManagePlan) {
            return accountManagePlan(Output.of(accountManagePlan));
        }

        /**
         * @param accountManageTeams Whether the team can modify other teams in the account.
         * 
         * @return builder
         * 
         */
        public Builder accountManageTeams(@Nullable Output<Boolean> accountManageTeams) {
            $.accountManageTeams = accountManageTeams;
            return this;
        }

        /**
         * @param accountManageTeams Whether the team can modify other teams in the account.
         * 
         * @return builder
         * 
         */
        public Builder accountManageTeams(Boolean accountManageTeams) {
            return accountManageTeams(Output.of(accountManageTeams));
        }

        /**
         * @param accountManageUsers Whether the team can modify account users.
         * 
         * @return builder
         * 
         */
        public Builder accountManageUsers(@Nullable Output<Boolean> accountManageUsers) {
            $.accountManageUsers = accountManageUsers;
            return this;
        }

        /**
         * @param accountManageUsers Whether the team can modify account users.
         * 
         * @return builder
         * 
         */
        public Builder accountManageUsers(Boolean accountManageUsers) {
            return accountManageUsers(Output.of(accountManageUsers));
        }

        /**
         * @param accountViewActivityLog Whether the team can view activity logs.
         * 
         * @return builder
         * 
         */
        public Builder accountViewActivityLog(@Nullable Output<Boolean> accountViewActivityLog) {
            $.accountViewActivityLog = accountViewActivityLog;
            return this;
        }

        /**
         * @param accountViewActivityLog Whether the team can view activity logs.
         * 
         * @return builder
         * 
         */
        public Builder accountViewActivityLog(Boolean accountViewActivityLog) {
            return accountViewActivityLog(Output.of(accountViewActivityLog));
        }

        /**
         * @param accountViewInvoices Whether the team can view invoices.
         * 
         * @return builder
         * 
         */
        public Builder accountViewInvoices(@Nullable Output<Boolean> accountViewInvoices) {
            $.accountViewInvoices = accountViewInvoices;
            return this;
        }

        /**
         * @param accountViewInvoices Whether the team can view invoices.
         * 
         * @return builder
         * 
         */
        public Builder accountViewInvoices(Boolean accountViewInvoices) {
            return accountViewInvoices(Output.of(accountViewInvoices));
        }

        /**
         * @param dataManageDatafeeds Whether the team can modify data feeds.
         * 
         * @return builder
         * 
         */
        public Builder dataManageDatafeeds(@Nullable Output<Boolean> dataManageDatafeeds) {
            $.dataManageDatafeeds = dataManageDatafeeds;
            return this;
        }

        /**
         * @param dataManageDatafeeds Whether the team can modify data feeds.
         * 
         * @return builder
         * 
         */
        public Builder dataManageDatafeeds(Boolean dataManageDatafeeds) {
            return dataManageDatafeeds(Output.of(dataManageDatafeeds));
        }

        /**
         * @param dataManageDatasources Whether the team can modify data sources.
         * 
         * @return builder
         * 
         */
        public Builder dataManageDatasources(@Nullable Output<Boolean> dataManageDatasources) {
            $.dataManageDatasources = dataManageDatasources;
            return this;
        }

        /**
         * @param dataManageDatasources Whether the team can modify data sources.
         * 
         * @return builder
         * 
         */
        public Builder dataManageDatasources(Boolean dataManageDatasources) {
            return dataManageDatasources(Output.of(dataManageDatasources));
        }

        /**
         * @param dataPushToDatafeeds Whether the team can publish to data feeds.
         * 
         * @return builder
         * 
         */
        public Builder dataPushToDatafeeds(@Nullable Output<Boolean> dataPushToDatafeeds) {
            $.dataPushToDatafeeds = dataPushToDatafeeds;
            return this;
        }

        /**
         * @param dataPushToDatafeeds Whether the team can publish to data feeds.
         * 
         * @return builder
         * 
         */
        public Builder dataPushToDatafeeds(Boolean dataPushToDatafeeds) {
            return dataPushToDatafeeds(Output.of(dataPushToDatafeeds));
        }

        /**
         * @param dnsManageZones Whether the team can modify the accounts zones.
         * 
         * @return builder
         * 
         */
        public Builder dnsManageZones(@Nullable Output<Boolean> dnsManageZones) {
            $.dnsManageZones = dnsManageZones;
            return this;
        }

        /**
         * @param dnsManageZones Whether the team can modify the accounts zones.
         * 
         * @return builder
         * 
         */
        public Builder dnsManageZones(Boolean dnsManageZones) {
            return dnsManageZones(Output.of(dnsManageZones));
        }

        /**
         * @param dnsRecordsAllows List of records that the team may access.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecordsAllows(@Nullable Output<List<TeamDnsRecordsAllowArgs>> dnsRecordsAllows) {
            $.dnsRecordsAllows = dnsRecordsAllows;
            return this;
        }

        /**
         * @param dnsRecordsAllows List of records that the team may access.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecordsAllows(List<TeamDnsRecordsAllowArgs> dnsRecordsAllows) {
            return dnsRecordsAllows(Output.of(dnsRecordsAllows));
        }

        /**
         * @param dnsRecordsAllows List of records that the team may access.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecordsAllows(TeamDnsRecordsAllowArgs... dnsRecordsAllows) {
            return dnsRecordsAllows(List.of(dnsRecordsAllows));
        }

        /**
         * @param dnsRecordsDenies List of records that the team may not access.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecordsDenies(@Nullable Output<List<TeamDnsRecordsDenyArgs>> dnsRecordsDenies) {
            $.dnsRecordsDenies = dnsRecordsDenies;
            return this;
        }

        /**
         * @param dnsRecordsDenies List of records that the team may not access.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecordsDenies(List<TeamDnsRecordsDenyArgs> dnsRecordsDenies) {
            return dnsRecordsDenies(Output.of(dnsRecordsDenies));
        }

        /**
         * @param dnsRecordsDenies List of records that the team may not access.
         * 
         * @return builder
         * 
         */
        public Builder dnsRecordsDenies(TeamDnsRecordsDenyArgs... dnsRecordsDenies) {
            return dnsRecordsDenies(List.of(dnsRecordsDenies));
        }

        /**
         * @param dnsViewZones Whether the team can view the accounts zones.
         * 
         * @return builder
         * 
         */
        public Builder dnsViewZones(@Nullable Output<Boolean> dnsViewZones) {
            $.dnsViewZones = dnsViewZones;
            return this;
        }

        /**
         * @param dnsViewZones Whether the team can view the accounts zones.
         * 
         * @return builder
         * 
         */
        public Builder dnsViewZones(Boolean dnsViewZones) {
            return dnsViewZones(Output.of(dnsViewZones));
        }

        /**
         * @param dnsZonesAllowByDefault If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonesAllowByDefault(@Nullable Output<Boolean> dnsZonesAllowByDefault) {
            $.dnsZonesAllowByDefault = dnsZonesAllowByDefault;
            return this;
        }

        /**
         * @param dnsZonesAllowByDefault If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonesAllowByDefault(Boolean dnsZonesAllowByDefault) {
            return dnsZonesAllowByDefault(Output.of(dnsZonesAllowByDefault));
        }

        /**
         * @param dnsZonesAllows List of zones that the team may access.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonesAllows(@Nullable Output<List<String>> dnsZonesAllows) {
            $.dnsZonesAllows = dnsZonesAllows;
            return this;
        }

        /**
         * @param dnsZonesAllows List of zones that the team may access.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonesAllows(List<String> dnsZonesAllows) {
            return dnsZonesAllows(Output.of(dnsZonesAllows));
        }

        /**
         * @param dnsZonesAllows List of zones that the team may access.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonesAllows(String... dnsZonesAllows) {
            return dnsZonesAllows(List.of(dnsZonesAllows));
        }

        /**
         * @param dnsZonesDenies List of zones that the team may not access.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonesDenies(@Nullable Output<List<String>> dnsZonesDenies) {
            $.dnsZonesDenies = dnsZonesDenies;
            return this;
        }

        /**
         * @param dnsZonesDenies List of zones that the team may not access.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonesDenies(List<String> dnsZonesDenies) {
            return dnsZonesDenies(Output.of(dnsZonesDenies));
        }

        /**
         * @param dnsZonesDenies List of zones that the team may not access.
         * 
         * @return builder
         * 
         */
        public Builder dnsZonesDenies(String... dnsZonesDenies) {
            return dnsZonesDenies(List.of(dnsZonesDenies));
        }

        /**
         * @param ipWhitelists Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each &#34;allow&#34; list.
         * 
         * @return builder
         * 
         */
        public Builder ipWhitelists(@Nullable Output<List<TeamIpWhitelistArgs>> ipWhitelists) {
            $.ipWhitelists = ipWhitelists;
            return this;
        }

        /**
         * @param ipWhitelists Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each &#34;allow&#34; list.
         * 
         * @return builder
         * 
         */
        public Builder ipWhitelists(List<TeamIpWhitelistArgs> ipWhitelists) {
            return ipWhitelists(Output.of(ipWhitelists));
        }

        /**
         * @param ipWhitelists Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each &#34;allow&#34; list.
         * 
         * @return builder
         * 
         */
        public Builder ipWhitelists(TeamIpWhitelistArgs... ipWhitelists) {
            return ipWhitelists(List.of(ipWhitelists));
        }

        /**
         * @param monitoringCreateJobs Whether the user can create monitoring jobs when manage_jobs is not set to true.
         * 
         * @return builder
         * 
         */
        public Builder monitoringCreateJobs(@Nullable Output<Boolean> monitoringCreateJobs) {
            $.monitoringCreateJobs = monitoringCreateJobs;
            return this;
        }

        /**
         * @param monitoringCreateJobs Whether the user can create monitoring jobs when manage_jobs is not set to true.
         * 
         * @return builder
         * 
         */
        public Builder monitoringCreateJobs(Boolean monitoringCreateJobs) {
            return monitoringCreateJobs(Output.of(monitoringCreateJobs));
        }

        /**
         * @param monitoringDeleteJobs Whether the user can delete monitoring jobs when manage_jobs is not set to true.
         * 
         * @return builder
         * 
         */
        public Builder monitoringDeleteJobs(@Nullable Output<Boolean> monitoringDeleteJobs) {
            $.monitoringDeleteJobs = monitoringDeleteJobs;
            return this;
        }

        /**
         * @param monitoringDeleteJobs Whether the user can delete monitoring jobs when manage_jobs is not set to true.
         * 
         * @return builder
         * 
         */
        public Builder monitoringDeleteJobs(Boolean monitoringDeleteJobs) {
            return monitoringDeleteJobs(Output.of(monitoringDeleteJobs));
        }

        /**
         * @param monitoringManageJobs Whether the user can create, update, and delete monitoring jobs.
         * 
         * @return builder
         * 
         */
        public Builder monitoringManageJobs(@Nullable Output<Boolean> monitoringManageJobs) {
            $.monitoringManageJobs = monitoringManageJobs;
            return this;
        }

        /**
         * @param monitoringManageJobs Whether the user can create, update, and delete monitoring jobs.
         * 
         * @return builder
         * 
         */
        public Builder monitoringManageJobs(Boolean monitoringManageJobs) {
            return monitoringManageJobs(Output.of(monitoringManageJobs));
        }

        /**
         * @param monitoringManageLists Whether the team can modify notification lists.
         * 
         * @return builder
         * 
         */
        public Builder monitoringManageLists(@Nullable Output<Boolean> monitoringManageLists) {
            $.monitoringManageLists = monitoringManageLists;
            return this;
        }

        /**
         * @param monitoringManageLists Whether the team can modify notification lists.
         * 
         * @return builder
         * 
         */
        public Builder monitoringManageLists(Boolean monitoringManageLists) {
            return monitoringManageLists(Output.of(monitoringManageLists));
        }

        /**
         * @param monitoringUpdateJobs Whether the user can update monitoring jobs when manage_jobs is not set to true.
         * 
         * @return builder
         * 
         */
        public Builder monitoringUpdateJobs(@Nullable Output<Boolean> monitoringUpdateJobs) {
            $.monitoringUpdateJobs = monitoringUpdateJobs;
            return this;
        }

        /**
         * @param monitoringUpdateJobs Whether the user can update monitoring jobs when manage_jobs is not set to true.
         * 
         * @return builder
         * 
         */
        public Builder monitoringUpdateJobs(Boolean monitoringUpdateJobs) {
            return monitoringUpdateJobs(Output.of(monitoringUpdateJobs));
        }

        /**
         * @param monitoringViewJobs Whether the team can view monitoring jobs.
         * 
         * @return builder
         * 
         */
        public Builder monitoringViewJobs(@Nullable Output<Boolean> monitoringViewJobs) {
            $.monitoringViewJobs = monitoringViewJobs;
            return this;
        }

        /**
         * @param monitoringViewJobs Whether the team can view monitoring jobs.
         * 
         * @return builder
         * 
         */
        public Builder monitoringViewJobs(Boolean monitoringViewJobs) {
            return monitoringViewJobs(Output.of(monitoringViewJobs));
        }

        /**
         * @param name The free form name of the team.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The free form name of the team.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param securityManageActiveDirectory Whether the team can manage global active directory.
         * Only relevant for the DDI product.
         * 
         * @return builder
         * 
         */
        public Builder securityManageActiveDirectory(@Nullable Output<Boolean> securityManageActiveDirectory) {
            $.securityManageActiveDirectory = securityManageActiveDirectory;
            return this;
        }

        /**
         * @param securityManageActiveDirectory Whether the team can manage global active directory.
         * Only relevant for the DDI product.
         * 
         * @return builder
         * 
         */
        public Builder securityManageActiveDirectory(Boolean securityManageActiveDirectory) {
            return securityManageActiveDirectory(Output.of(securityManageActiveDirectory));
        }

        /**
         * @param securityManageGlobal2fa Whether the team can manage global two factor authentication.
         * 
         * @return builder
         * 
         */
        public Builder securityManageGlobal2fa(@Nullable Output<Boolean> securityManageGlobal2fa) {
            $.securityManageGlobal2fa = securityManageGlobal2fa;
            return this;
        }

        /**
         * @param securityManageGlobal2fa Whether the team can manage global two factor authentication.
         * 
         * @return builder
         * 
         */
        public Builder securityManageGlobal2fa(Boolean securityManageGlobal2fa) {
            return securityManageGlobal2fa(Output.of(securityManageGlobal2fa));
        }

        public TeamArgs build() {
            return $;
        }
    }

}
