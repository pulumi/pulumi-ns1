// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBillingUsageArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBillingUsageArgs Empty = new GetBillingUsageArgs();

    /**
     * The start timestamp for the data range in Unix epoch format.
     * 
     */
    @Import(name="from")
    private @Nullable Output<Integer> from;

    /**
     * @return The start timestamp for the data range in Unix epoch format.
     * 
     */
    public Optional<Output<Integer>> from() {
        return Optional.ofNullable(this.from);
    }

    /**
     * The type of billing metric to retrieve. Must be one of: `queries`, `limits`, `decisions`, `filter-chains`, `monitors`, `records`.
     * 
     */
    @Import(name="metricType", required=true)
    private Output<String> metricType;

    /**
     * @return The type of billing metric to retrieve. Must be one of: `queries`, `limits`, `decisions`, `filter-chains`, `monitors`, `records`.
     * 
     */
    public Output<String> metricType() {
        return this.metricType;
    }

    /**
     * The end timestamp for the data range in Unix epoch format.
     * 
     */
    @Import(name="to")
    private @Nullable Output<Integer> to;

    /**
     * @return The end timestamp for the data range in Unix epoch format.
     * 
     */
    public Optional<Output<Integer>> to() {
        return Optional.ofNullable(this.to);
    }

    private GetBillingUsageArgs() {}

    private GetBillingUsageArgs(GetBillingUsageArgs $) {
        this.from = $.from;
        this.metricType = $.metricType;
        this.to = $.to;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBillingUsageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBillingUsageArgs $;

        public Builder() {
            $ = new GetBillingUsageArgs();
        }

        public Builder(GetBillingUsageArgs defaults) {
            $ = new GetBillingUsageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param from The start timestamp for the data range in Unix epoch format.
         * 
         * @return builder
         * 
         */
        public Builder from(@Nullable Output<Integer> from) {
            $.from = from;
            return this;
        }

        /**
         * @param from The start timestamp for the data range in Unix epoch format.
         * 
         * @return builder
         * 
         */
        public Builder from(Integer from) {
            return from(Output.of(from));
        }

        /**
         * @param metricType The type of billing metric to retrieve. Must be one of: `queries`, `limits`, `decisions`, `filter-chains`, `monitors`, `records`.
         * 
         * @return builder
         * 
         */
        public Builder metricType(Output<String> metricType) {
            $.metricType = metricType;
            return this;
        }

        /**
         * @param metricType The type of billing metric to retrieve. Must be one of: `queries`, `limits`, `decisions`, `filter-chains`, `monitors`, `records`.
         * 
         * @return builder
         * 
         */
        public Builder metricType(String metricType) {
            return metricType(Output.of(metricType));
        }

        /**
         * @param to The end timestamp for the data range in Unix epoch format.
         * 
         * @return builder
         * 
         */
        public Builder to(@Nullable Output<Integer> to) {
            $.to = to;
            return this;
        }

        /**
         * @param to The end timestamp for the data range in Unix epoch format.
         * 
         * @return builder
         * 
         */
        public Builder to(Integer to) {
            return to(Output.of(to));
        }

        public GetBillingUsageArgs build() {
            if ($.metricType == null) {
                throw new MissingRequiredPropertyException("GetBillingUsageArgs", "metricType");
            }
            return $;
        }
    }

}
