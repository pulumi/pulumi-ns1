// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RedirectCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final RedirectCertificateState Empty = new RedirectCertificateState();

    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    @Import(name="errors")
    private @Nullable Output<String> errors;

    public Optional<Output<String>> errors() {
        return Optional.ofNullable(this.errors);
    }

    @Import(name="lastUpdated")
    private @Nullable Output<Integer> lastUpdated;

    public Optional<Output<Integer>> lastUpdated() {
        return Optional.ofNullable(this.lastUpdated);
    }

    @Import(name="validFrom")
    private @Nullable Output<Integer> validFrom;

    public Optional<Output<Integer>> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }

    @Import(name="validUntil")
    private @Nullable Output<Integer> validUntil;

    public Optional<Output<Integer>> validUntil() {
        return Optional.ofNullable(this.validUntil);
    }

    private RedirectCertificateState() {}

    private RedirectCertificateState(RedirectCertificateState $) {
        this.certificate = $.certificate;
        this.domain = $.domain;
        this.errors = $.errors;
        this.lastUpdated = $.lastUpdated;
        this.validFrom = $.validFrom;
        this.validUntil = $.validUntil;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedirectCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedirectCertificateState $;

        public Builder() {
            $ = new RedirectCertificateState();
        }

        public Builder(RedirectCertificateState defaults) {
            $ = new RedirectCertificateState(Objects.requireNonNull(defaults));
        }

        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder errors(@Nullable Output<String> errors) {
            $.errors = errors;
            return this;
        }

        public Builder errors(String errors) {
            return errors(Output.of(errors));
        }

        public Builder lastUpdated(@Nullable Output<Integer> lastUpdated) {
            $.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(Integer lastUpdated) {
            return lastUpdated(Output.of(lastUpdated));
        }

        public Builder validFrom(@Nullable Output<Integer> validFrom) {
            $.validFrom = validFrom;
            return this;
        }

        public Builder validFrom(Integer validFrom) {
            return validFrom(Output.of(validFrom));
        }

        public Builder validUntil(@Nullable Output<Integer> validUntil) {
            $.validUntil = validUntil;
            return this;
        }

        public Builder validUntil(Integer validUntil) {
            return validUntil(Output.of(validUntil));
        }

        public RedirectCertificateState build() {
            return $;
        }
    }

}
