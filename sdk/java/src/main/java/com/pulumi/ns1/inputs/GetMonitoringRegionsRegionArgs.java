// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMonitoringRegionsRegionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetMonitoringRegionsRegionArgs Empty = new GetMonitoringRegionsRegionArgs();

    /**
     * 3-letter city code identifying the location of the monitor.
     * 
     */
    @Import(name="code")
    private @Nullable Output<String> code;

    /**
     * @return 3-letter city code identifying the location of the monitor.
     * 
     */
    public Optional<Output<String>> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * City name identifying the location of the monitor.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return City name identifying the location of the monitor.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of IPv4 and IPv6 subnets the monitor sources requests from.
     * 
     */
    @Import(name="subnets")
    private @Nullable Output<List<String>> subnets;

    /**
     * @return A list of IPv4 and IPv6 subnets the monitor sources requests from.
     * 
     */
    public Optional<Output<List<String>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    private GetMonitoringRegionsRegionArgs() {}

    private GetMonitoringRegionsRegionArgs(GetMonitoringRegionsRegionArgs $) {
        this.code = $.code;
        this.name = $.name;
        this.subnets = $.subnets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMonitoringRegionsRegionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMonitoringRegionsRegionArgs $;

        public Builder() {
            $ = new GetMonitoringRegionsRegionArgs();
        }

        public Builder(GetMonitoringRegionsRegionArgs defaults) {
            $ = new GetMonitoringRegionsRegionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param code 3-letter city code identifying the location of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder code(@Nullable Output<String> code) {
            $.code = code;
            return this;
        }

        /**
         * @param code 3-letter city code identifying the location of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder code(String code) {
            return code(Output.of(code));
        }

        /**
         * @param name City name identifying the location of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name City name identifying the location of the monitor.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param subnets A list of IPv4 and IPv6 subnets the monitor sources requests from.
         * 
         * @return builder
         * 
         */
        public Builder subnets(@Nullable Output<List<String>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets A list of IPv4 and IPv6 subnets the monitor sources requests from.
         * 
         * @return builder
         * 
         */
        public Builder subnets(List<String> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets A list of IPv4 and IPv6 subnets the monitor sources requests from.
         * 
         * @return builder
         * 
         */
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }

        public GetMonitoringRegionsRegionArgs build() {
            return $;
        }
    }

}
