// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationDefaultConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationDefaultConfigArgs Empty = new ApplicationDefaultConfigArgs();

    /**
     * Indicates whether or not to use HTTP in measurements.
     * 
     */
    @Import(name="http", required=true)
    private Output<Boolean> http;

    /**
     * @return Indicates whether or not to use HTTP in measurements.
     * 
     */
    public Output<Boolean> http() {
        return this.http;
    }

    /**
     * Indicates whether or not to use HTTPS in measurements.
     * 
     */
    @Import(name="https")
    private @Nullable Output<Boolean> https;

    /**
     * @return Indicates whether or not to use HTTPS in measurements.
     * 
     */
    public Optional<Output<Boolean>> https() {
        return Optional.ofNullable(this.https);
    }

    /**
     * Maximum timeout per job
     * 0, the primary NSONE Global Network. Normally, you should not have to worry about this.
     * 
     */
    @Import(name="jobTimeoutMillis")
    private @Nullable Output<Integer> jobTimeoutMillis;

    /**
     * @return Maximum timeout per job
     * 0, the primary NSONE Global Network. Normally, you should not have to worry about this.
     * 
     */
    public Optional<Output<Integer>> jobTimeoutMillis() {
        return Optional.ofNullable(this.jobTimeoutMillis);
    }

    /**
     * Maximum timeout per request.
     * 
     */
    @Import(name="requestTimeoutMillis")
    private @Nullable Output<Integer> requestTimeoutMillis;

    /**
     * @return Maximum timeout per request.
     * 
     */
    public Optional<Output<Integer>> requestTimeoutMillis() {
        return Optional.ofNullable(this.requestTimeoutMillis);
    }

    /**
     * Indicates whether or not to skip aggregation for this job&#39;s measurements
     * 
     */
    @Import(name="staticValues")
    private @Nullable Output<Boolean> staticValues;

    /**
     * @return Indicates whether or not to skip aggregation for this job&#39;s measurements
     * 
     */
    public Optional<Output<Boolean>> staticValues() {
        return Optional.ofNullable(this.staticValues);
    }

    /**
     * Whether to use XMLHttpRequest (XHR) when taking measurements.
     * 
     */
    @Import(name="useXhr")
    private @Nullable Output<Boolean> useXhr;

    /**
     * @return Whether to use XMLHttpRequest (XHR) when taking measurements.
     * 
     */
    public Optional<Output<Boolean>> useXhr() {
        return Optional.ofNullable(this.useXhr);
    }

    private ApplicationDefaultConfigArgs() {}

    private ApplicationDefaultConfigArgs(ApplicationDefaultConfigArgs $) {
        this.http = $.http;
        this.https = $.https;
        this.jobTimeoutMillis = $.jobTimeoutMillis;
        this.requestTimeoutMillis = $.requestTimeoutMillis;
        this.staticValues = $.staticValues;
        this.useXhr = $.useXhr;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationDefaultConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationDefaultConfigArgs $;

        public Builder() {
            $ = new ApplicationDefaultConfigArgs();
        }

        public Builder(ApplicationDefaultConfigArgs defaults) {
            $ = new ApplicationDefaultConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param http Indicates whether or not to use HTTP in measurements.
         * 
         * @return builder
         * 
         */
        public Builder http(Output<Boolean> http) {
            $.http = http;
            return this;
        }

        /**
         * @param http Indicates whether or not to use HTTP in measurements.
         * 
         * @return builder
         * 
         */
        public Builder http(Boolean http) {
            return http(Output.of(http));
        }

        /**
         * @param https Indicates whether or not to use HTTPS in measurements.
         * 
         * @return builder
         * 
         */
        public Builder https(@Nullable Output<Boolean> https) {
            $.https = https;
            return this;
        }

        /**
         * @param https Indicates whether or not to use HTTPS in measurements.
         * 
         * @return builder
         * 
         */
        public Builder https(Boolean https) {
            return https(Output.of(https));
        }

        /**
         * @param jobTimeoutMillis Maximum timeout per job
         * 0, the primary NSONE Global Network. Normally, you should not have to worry about this.
         * 
         * @return builder
         * 
         */
        public Builder jobTimeoutMillis(@Nullable Output<Integer> jobTimeoutMillis) {
            $.jobTimeoutMillis = jobTimeoutMillis;
            return this;
        }

        /**
         * @param jobTimeoutMillis Maximum timeout per job
         * 0, the primary NSONE Global Network. Normally, you should not have to worry about this.
         * 
         * @return builder
         * 
         */
        public Builder jobTimeoutMillis(Integer jobTimeoutMillis) {
            return jobTimeoutMillis(Output.of(jobTimeoutMillis));
        }

        /**
         * @param requestTimeoutMillis Maximum timeout per request.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeoutMillis(@Nullable Output<Integer> requestTimeoutMillis) {
            $.requestTimeoutMillis = requestTimeoutMillis;
            return this;
        }

        /**
         * @param requestTimeoutMillis Maximum timeout per request.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeoutMillis(Integer requestTimeoutMillis) {
            return requestTimeoutMillis(Output.of(requestTimeoutMillis));
        }

        /**
         * @param staticValues Indicates whether or not to skip aggregation for this job&#39;s measurements
         * 
         * @return builder
         * 
         */
        public Builder staticValues(@Nullable Output<Boolean> staticValues) {
            $.staticValues = staticValues;
            return this;
        }

        /**
         * @param staticValues Indicates whether or not to skip aggregation for this job&#39;s measurements
         * 
         * @return builder
         * 
         */
        public Builder staticValues(Boolean staticValues) {
            return staticValues(Output.of(staticValues));
        }

        /**
         * @param useXhr Whether to use XMLHttpRequest (XHR) when taking measurements.
         * 
         * @return builder
         * 
         */
        public Builder useXhr(@Nullable Output<Boolean> useXhr) {
            $.useXhr = useXhr;
            return this;
        }

        /**
         * @param useXhr Whether to use XMLHttpRequest (XHR) when taking measurements.
         * 
         * @return builder
         * 
         */
        public Builder useXhr(Boolean useXhr) {
            return useXhr(Output.of(useXhr));
        }

        public ApplicationDefaultConfigArgs build() {
            if ($.http == null) {
                throw new MissingRequiredPropertyException("ApplicationDefaultConfigArgs", "http");
            }
            return $;
        }
    }

}
