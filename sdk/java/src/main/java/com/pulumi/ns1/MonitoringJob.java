// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ns1.MonitoringJobArgs;
import com.pulumi.ns1.Utilities;
import com.pulumi.ns1.inputs.MonitoringJobState;
import com.pulumi.ns1.outputs.MonitoringJobRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a NS1 Monitoring Job resource. This can be used to create, modify, and delete monitoring jobs.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ns1.MonitoringJob;
 * import com.pulumi.ns1.MonitoringJobArgs;
 * import com.pulumi.ns1.inputs.MonitoringJobRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var uswestMonitor = new MonitoringJob(&#34;uswestMonitor&#34;, MonitoringJobArgs.builder()        
 *             .active(true)
 *             .config(Map.ofEntries(
 *                 Map.entry(&#34;host&#34;, &#34;example-elb-uswest.aws.amazon.com&#34;),
 *                 Map.entry(&#34;port&#34;, 443),
 *                 Map.entry(&#34;send&#34;, &#34;HEAD / HTTP/1.0\\r\\n\\r\\n&#34;),
 *                 Map.entry(&#34;ssl&#34;, 1)
 *             ))
 *             .frequency(60)
 *             .jobType(&#34;tcp&#34;)
 *             .mute(true)
 *             .policy(&#34;quorum&#34;)
 *             .rapidRecheck(true)
 *             .regions(            
 *                 &#34;lga&#34;,
 *                 &#34;sjc&#34;,
 *                 &#34;sin&#34;)
 *             .rules(MonitoringJobRuleArgs.builder()
 *                 .comparison(&#34;contains&#34;)
 *                 .key(&#34;output&#34;)
 *                 .value(&#34;200 OK&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## NS1 Documentation
 * 
 * [MonitoringJob Api Doc](https://ns1.com/api#monitoring-jobs)
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import ns1:index/monitoringJob:MonitoringJob &lt;name&gt; &lt;monitoringjob_id&gt;`
 * ```
 * 
 */
@ResourceType(type="ns1:index/monitoringJob:MonitoringJob")
public class MonitoringJob extends com.pulumi.resources.CustomResource {
    /**
     * Indicates if the job is active or temporarily disabled.
     * 
     */
    @Export(name="active", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> active;

    /**
     * @return Indicates if the job is active or temporarily disabled.
     * 
     */
    public Output<Optional<Boolean>> active() {
        return Codegen.optional(this.active);
    }
    /**
     * A configuration dictionary with keys and values depending on the job_type. Configuration details for each job_type are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.
     * 
     */
    @Export(name="config", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> config;

    /**
     * @return A configuration dictionary with keys and values depending on the job_type. Configuration details for each job_type are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.
     * 
     */
    public Output<Map<String,Object>> config() {
        return this.config;
    }
    /**
     * The frequency, in seconds, at which to run the monitoring job in each region.
     * 
     */
    @Export(name="frequency", refs={Integer.class}, tree="[0]")
    private Output<Integer> frequency;

    /**
     * @return The frequency, in seconds, at which to run the monitoring job in each region.
     * 
     */
    public Output<Integer> frequency() {
        return this.frequency;
    }
    /**
     * The type of monitoring job to be run. Refer to the NS1 API documentation (https://ns1.com/api#monitoring-jobs) for supported values which include ping, tcp, dns, http.
     * 
     */
    @Export(name="jobType", refs={String.class}, tree="[0]")
    private Output<String> jobType;

    /**
     * @return The type of monitoring job to be run. Refer to the NS1 API documentation (https://ns1.com/api#monitoring-jobs) for supported values which include ping, tcp, dns, http.
     * 
     */
    public Output<String> jobType() {
        return this.jobType;
    }
    /**
     * turn off the notifications for the monitoring job.
     * 
     */
    @Export(name="mute", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mute;

    /**
     * @return turn off the notifications for the monitoring job.
     * 
     */
    public Output<Optional<Boolean>> mute() {
        return Codegen.optional(this.mute);
    }
    /**
     * The free-form display name for the monitoring job.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The free-form display name for the monitoring job.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Freeform notes to be included in any notifications about this job.
     * 
     */
    @Export(name="notes", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notes;

    /**
     * @return Freeform notes to be included in any notifications about this job.
     * 
     */
    public Output<Optional<String>> notes() {
        return Codegen.optional(this.notes);
    }
    /**
     * The time in seconds after a failure to wait before sending a notification.
     * 
     */
    @Export(name="notifyDelay", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> notifyDelay;

    /**
     * @return The time in seconds after a failure to wait before sending a notification.
     * 
     */
    public Output<Optional<Integer>> notifyDelay() {
        return Codegen.optional(this.notifyDelay);
    }
    /**
     * If true, a notification is sent when a job returns to an &#34;up&#34; state.
     * 
     */
    @Export(name="notifyFailback", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> notifyFailback;

    /**
     * @return If true, a notification is sent when a job returns to an &#34;up&#34; state.
     * 
     */
    public Output<Optional<Boolean>> notifyFailback() {
        return Codegen.optional(this.notifyFailback);
    }
    @Export(name="notifyList", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notifyList;

    public Output<Optional<String>> notifyList() {
        return Codegen.optional(this.notifyList);
    }
    /**
     * If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
     * 
     */
    @Export(name="notifyRegional", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> notifyRegional;

    /**
     * @return If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
     * 
     */
    public Output<Optional<Boolean>> notifyRegional() {
        return Codegen.optional(this.notifyRegional);
    }
    /**
     * The time in seconds between repeat notifications of a failed job.
     * 
     */
    @Export(name="notifyRepeat", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> notifyRepeat;

    /**
     * @return The time in seconds between repeat notifications of a failed job.
     * 
     */
    public Output<Optional<Integer>> notifyRepeat() {
        return Codegen.optional(this.notifyRepeat);
    }
    /**
     * The policy for determining the monitor&#39;s global status
     * based on the status of the job in all regions. See NS1 API docs for supported values.
     * 
     */
    @Export(name="policy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> policy;

    /**
     * @return The policy for determining the monitor&#39;s global status
     * based on the status of the job in all regions. See NS1 API docs for supported values.
     * 
     */
    public Output<Optional<String>> policy() {
        return Codegen.optional(this.policy);
    }
    /**
     * If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
     * 
     */
    @Export(name="rapidRecheck", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> rapidRecheck;

    /**
     * @return If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
     * 
     */
    public Output<Optional<Boolean>> rapidRecheck() {
        return Codegen.optional(this.rapidRecheck);
    }
    /**
     * The list of region codes in which to run the monitoring
     * job. See NS1 API docs for supported values.
     * 
     */
    @Export(name="regions", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> regions;

    /**
     * @return The list of region codes in which to run the monitoring
     * job. See NS1 API docs for supported values.
     * 
     */
    public Output<List<String>> regions() {
        return this.regions;
    }
    /**
     * A list of rules for determining failure conditions. Each rule acts on one of the outputs from the monitoring job. You must specify key (the output key); comparison (a comparison to perform on the the output); and value (the value to compare to). For example, {&#34;key&#34;:&#34;rtt&#34;, &#34;comparison&#34;:&#34;&lt;&#34;, &#34;value&#34;:100} is a rule requiring the rtt from a job to be under 100ms, or the job will be marked failed. Available output keys, comparators, and value types are are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.
     * 
     */
    @Export(name="rules", refs={List.class,MonitoringJobRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MonitoringJobRule>> rules;

    /**
     * @return A list of rules for determining failure conditions. Each rule acts on one of the outputs from the monitoring job. You must specify key (the output key); comparison (a comparison to perform on the the output); and value (the value to compare to). For example, {&#34;key&#34;:&#34;rtt&#34;, &#34;comparison&#34;:&#34;&lt;&#34;, &#34;value&#34;:100} is a rule requiring the rtt from a job to be under 100ms, or the job will be marked failed. Available output keys, comparators, and value types are are found by submitting a GET request to https://api.nsone.net/v1/monitoring/jobtypes.
     * 
     */
    public Output<Optional<List<MonitoringJobRule>>> rules() {
        return Codegen.optional(this.rules);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MonitoringJob(String name) {
        this(name, MonitoringJobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MonitoringJob(String name, MonitoringJobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MonitoringJob(String name, MonitoringJobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ns1:index/monitoringJob:MonitoringJob", name, args == null ? MonitoringJobArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MonitoringJob(String name, Output<String> id, @Nullable MonitoringJobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ns1:index/monitoringJob:MonitoringJob", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MonitoringJob get(String name, Output<String> id, @Nullable MonitoringJobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MonitoringJob(name, id, state, options);
    }
}
