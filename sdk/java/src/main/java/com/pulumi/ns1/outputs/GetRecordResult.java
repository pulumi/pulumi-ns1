// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ns1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ns1.outputs.GetRecordAnswer;
import com.pulumi.ns1.outputs.GetRecordFilter;
import com.pulumi.ns1.outputs.GetRecordRegion;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRecordResult {
    /**
     * @return List of NS1 answers.
     * 
     */
    private List<GetRecordAnswer> answers;
    private String domain;
    /**
     * @return List of NS1 filters.
     * 
     */
    private List<GetRecordFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The target record this links to.
     * 
     */
    private String link;
    /**
     * @return Map of metadata
     * 
     */
    private Map<String,Object> meta;
    private Boolean overrideTtl;
    /**
     * @return List of regions.
     * 
     */
    private List<GetRecordRegion> regions;
    private List<String> shortAnswers;
    private Map<String,Object> tags;
    /**
     * @return The records&#39; time to live (in seconds).
     * 
     */
    private Integer ttl;
    private String type;
    /**
     * @return Whether to use EDNS client subnet data when available (in filter chain).
     * 
     */
    private Boolean useClientSubnet;
    private String zone;

    private GetRecordResult() {}
    /**
     * @return List of NS1 answers.
     * 
     */
    public List<GetRecordAnswer> answers() {
        return this.answers;
    }
    public String domain() {
        return this.domain;
    }
    /**
     * @return List of NS1 filters.
     * 
     */
    public List<GetRecordFilter> filters() {
        return this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The target record this links to.
     * 
     */
    public String link() {
        return this.link;
    }
    /**
     * @return Map of metadata
     * 
     */
    public Map<String,Object> meta() {
        return this.meta;
    }
    public Boolean overrideTtl() {
        return this.overrideTtl;
    }
    /**
     * @return List of regions.
     * 
     */
    public List<GetRecordRegion> regions() {
        return this.regions;
    }
    public List<String> shortAnswers() {
        return this.shortAnswers;
    }
    public Map<String,Object> tags() {
        return this.tags;
    }
    /**
     * @return The records&#39; time to live (in seconds).
     * 
     */
    public Integer ttl() {
        return this.ttl;
    }
    public String type() {
        return this.type;
    }
    /**
     * @return Whether to use EDNS client subnet data when available (in filter chain).
     * 
     */
    public Boolean useClientSubnet() {
        return this.useClientSubnet;
    }
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecordResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRecordAnswer> answers;
        private String domain;
        private List<GetRecordFilter> filters;
        private String id;
        private String link;
        private Map<String,Object> meta;
        private Boolean overrideTtl;
        private List<GetRecordRegion> regions;
        private List<String> shortAnswers;
        private Map<String,Object> tags;
        private Integer ttl;
        private String type;
        private Boolean useClientSubnet;
        private String zone;
        public Builder() {}
        public Builder(GetRecordResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.answers = defaults.answers;
    	      this.domain = defaults.domain;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.link = defaults.link;
    	      this.meta = defaults.meta;
    	      this.overrideTtl = defaults.overrideTtl;
    	      this.regions = defaults.regions;
    	      this.shortAnswers = defaults.shortAnswers;
    	      this.tags = defaults.tags;
    	      this.ttl = defaults.ttl;
    	      this.type = defaults.type;
    	      this.useClientSubnet = defaults.useClientSubnet;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder answers(List<GetRecordAnswer> answers) {
            if (answers == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "answers");
            }
            this.answers = answers;
            return this;
        }
        public Builder answers(GetRecordAnswer... answers) {
            return answers(List.of(answers));
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder filters(List<GetRecordFilter> filters) {
            if (filters == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "filters");
            }
            this.filters = filters;
            return this;
        }
        public Builder filters(GetRecordFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder link(String link) {
            if (link == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "link");
            }
            this.link = link;
            return this;
        }
        @CustomType.Setter
        public Builder meta(Map<String,Object> meta) {
            if (meta == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "meta");
            }
            this.meta = meta;
            return this;
        }
        @CustomType.Setter
        public Builder overrideTtl(Boolean overrideTtl) {
            if (overrideTtl == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "overrideTtl");
            }
            this.overrideTtl = overrideTtl;
            return this;
        }
        @CustomType.Setter
        public Builder regions(List<GetRecordRegion> regions) {
            if (regions == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "regions");
            }
            this.regions = regions;
            return this;
        }
        public Builder regions(GetRecordRegion... regions) {
            return regions(List.of(regions));
        }
        @CustomType.Setter
        public Builder shortAnswers(List<String> shortAnswers) {
            if (shortAnswers == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "shortAnswers");
            }
            this.shortAnswers = shortAnswers;
            return this;
        }
        public Builder shortAnswers(String... shortAnswers) {
            return shortAnswers(List.of(shortAnswers));
        }
        @CustomType.Setter
        public Builder tags(Map<String,Object> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Integer ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder useClientSubnet(Boolean useClientSubnet) {
            if (useClientSubnet == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "useClientSubnet");
            }
            this.useClientSubnet = useClientSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            if (zone == null) {
              throw new MissingRequiredPropertyException("GetRecordResult", "zone");
            }
            this.zone = zone;
            return this;
        }
        public GetRecordResult build() {
            final var _resultValue = new GetRecordResult();
            _resultValue.answers = answers;
            _resultValue.domain = domain;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.link = link;
            _resultValue.meta = meta;
            _resultValue.overrideTtl = overrideTtl;
            _resultValue.regions = regions;
            _resultValue.shortAnswers = shortAnswers;
            _resultValue.tags = tags;
            _resultValue.ttl = ttl;
            _resultValue.type = type;
            _resultValue.useClientSubnet = useClientSubnet;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
