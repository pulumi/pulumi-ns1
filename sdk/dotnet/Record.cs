// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ns1
{
    /// <summary>
    /// Provides a NS1 Record resource. This can be used to create, modify, and delete records.
    /// 
    /// ## NS1 Documentation
    /// 
    /// [Record Api Doc](https://ns1.com/api#records)
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import ns1:index/record:Record &lt;name&gt; &lt;zone&gt;/&lt;domain&gt;/&lt;type&gt;`
    /// ```
    /// 
    ///  So for the example above
    /// 
    /// ```sh
    ///  $ pulumi import ns1:index/record:Record www terraform.example.io/www.terraform.example.io/CNAME`
    /// ```
    /// </summary>
    [Ns1ResourceType("ns1:index/record:Record")]
    public partial class Record : global::Pulumi.CustomResource
    {
        /// <summary>
        /// One or more NS1 answers for the records' specified type.
        /// Answers are documented below.
        /// </summary>
        [Output("answers")]
        public Output<ImmutableArray<Outputs.RecordAnswer>> Answers { get; private set; } = null!;

        [Output("blockedTags")]
        public Output<ImmutableArray<string>> BlockedTags { get; private set; } = null!;

        /// <summary>
        /// The records' domain. Cannot have leading or trailing
        /// dots - see the example above and `FQDN formatting` below.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// One or more NS1 filters for the record(order matters).
        /// Filters are documented below.
        /// </summary>
        [Output("filters")]
        public Output<ImmutableArray<Outputs.RecordFilter>> Filters { get; private set; } = null!;

        /// <summary>
        /// The target record to link to. This means this record is a
        /// 'linked' record, and it inherits all properties from its target.
        /// </summary>
        [Output("link")]
        public Output<string?> Link { get; private set; } = null!;

        [Output("meta")]
        public Output<ImmutableDictionary<string, object>?> Meta { get; private set; } = null!;

        [Output("overrideTtl")]
        public Output<bool?> OverrideTtl { get; private set; } = null!;

        /// <summary>
        /// One or more "regions" for the record. These are really
        /// just groupings based on metadata, and are called "Answer Groups" in the NS1 UI,
        /// but remain `regions` here for legacy reasons. Regions are
        /// documented below. Please note the ordering requirement!
        /// </summary>
        [Output("regions")]
        public Output<ImmutableArray<Outputs.RecordRegion>> Regions { get; private set; } = null!;

        [Output("shortAnswers")]
        public Output<ImmutableArray<string>> ShortAnswers { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The records' time to live (in seconds).
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;

        /// <summary>
        /// The records' RR type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Whether to use EDNS client subnet data when
        /// available(in filter chain).
        /// </summary>
        [Output("useClientSubnet")]
        public Output<bool?> UseClientSubnet { get; private set; } = null!;

        /// <summary>
        /// The zone the record belongs to. Cannot have leading or
        /// trailing dots (".") - see the example above and `FQDN formatting` below.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Record resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Record(string name, RecordArgs args, CustomResourceOptions? options = null)
            : base("ns1:index/record:Record", name, args ?? new RecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Record(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
            : base("ns1:index/record:Record", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Record resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Record Get(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
        {
            return new Record(name, id, state, options);
        }
    }

    public sealed class RecordArgs : global::Pulumi.ResourceArgs
    {
        [Input("answers")]
        private InputList<Inputs.RecordAnswerArgs>? _answers;

        /// <summary>
        /// One or more NS1 answers for the records' specified type.
        /// Answers are documented below.
        /// </summary>
        public InputList<Inputs.RecordAnswerArgs> Answers
        {
            get => _answers ?? (_answers = new InputList<Inputs.RecordAnswerArgs>());
            set => _answers = value;
        }

        [Input("blockedTags")]
        private InputList<string>? _blockedTags;
        public InputList<string> BlockedTags
        {
            get => _blockedTags ?? (_blockedTags = new InputList<string>());
            set => _blockedTags = value;
        }

        /// <summary>
        /// The records' domain. Cannot have leading or trailing
        /// dots - see the example above and `FQDN formatting` below.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.RecordFilterArgs>? _filters;

        /// <summary>
        /// One or more NS1 filters for the record(order matters).
        /// Filters are documented below.
        /// </summary>
        public InputList<Inputs.RecordFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.RecordFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The target record to link to. This means this record is a
        /// 'linked' record, and it inherits all properties from its target.
        /// </summary>
        [Input("link")]
        public Input<string>? Link { get; set; }

        [Input("meta")]
        private InputMap<object>? _meta;
        public InputMap<object> Meta
        {
            get => _meta ?? (_meta = new InputMap<object>());
            set => _meta = value;
        }

        [Input("overrideTtl")]
        public Input<bool>? OverrideTtl { get; set; }

        [Input("regions")]
        private InputList<Inputs.RecordRegionArgs>? _regions;

        /// <summary>
        /// One or more "regions" for the record. These are really
        /// just groupings based on metadata, and are called "Answer Groups" in the NS1 UI,
        /// but remain `regions` here for legacy reasons. Regions are
        /// documented below. Please note the ordering requirement!
        /// </summary>
        public InputList<Inputs.RecordRegionArgs> Regions
        {
            get => _regions ?? (_regions = new InputList<Inputs.RecordRegionArgs>());
            set => _regions = value;
        }

        [Input("shortAnswers")]
        private InputList<string>? _shortAnswers;
        [Obsolete(@"short_answers will be deprecated in a future release. It is suggested to migrate to a regular ""answers"" block.")]
        public InputList<string> ShortAnswers
        {
            get => _shortAnswers ?? (_shortAnswers = new InputList<string>());
            set => _shortAnswers = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The records' time to live (in seconds).
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The records' RR type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Whether to use EDNS client subnet data when
        /// available(in filter chain).
        /// </summary>
        [Input("useClientSubnet")]
        public Input<bool>? UseClientSubnet { get; set; }

        /// <summary>
        /// The zone the record belongs to. Cannot have leading or
        /// trailing dots (".") - see the example above and `FQDN formatting` below.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public RecordArgs()
        {
        }
        public static new RecordArgs Empty => new RecordArgs();
    }

    public sealed class RecordState : global::Pulumi.ResourceArgs
    {
        [Input("answers")]
        private InputList<Inputs.RecordAnswerGetArgs>? _answers;

        /// <summary>
        /// One or more NS1 answers for the records' specified type.
        /// Answers are documented below.
        /// </summary>
        public InputList<Inputs.RecordAnswerGetArgs> Answers
        {
            get => _answers ?? (_answers = new InputList<Inputs.RecordAnswerGetArgs>());
            set => _answers = value;
        }

        [Input("blockedTags")]
        private InputList<string>? _blockedTags;
        public InputList<string> BlockedTags
        {
            get => _blockedTags ?? (_blockedTags = new InputList<string>());
            set => _blockedTags = value;
        }

        /// <summary>
        /// The records' domain. Cannot have leading or trailing
        /// dots - see the example above and `FQDN formatting` below.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("filters")]
        private InputList<Inputs.RecordFilterGetArgs>? _filters;

        /// <summary>
        /// One or more NS1 filters for the record(order matters).
        /// Filters are documented below.
        /// </summary>
        public InputList<Inputs.RecordFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.RecordFilterGetArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The target record to link to. This means this record is a
        /// 'linked' record, and it inherits all properties from its target.
        /// </summary>
        [Input("link")]
        public Input<string>? Link { get; set; }

        [Input("meta")]
        private InputMap<object>? _meta;
        public InputMap<object> Meta
        {
            get => _meta ?? (_meta = new InputMap<object>());
            set => _meta = value;
        }

        [Input("overrideTtl")]
        public Input<bool>? OverrideTtl { get; set; }

        [Input("regions")]
        private InputList<Inputs.RecordRegionGetArgs>? _regions;

        /// <summary>
        /// One or more "regions" for the record. These are really
        /// just groupings based on metadata, and are called "Answer Groups" in the NS1 UI,
        /// but remain `regions` here for legacy reasons. Regions are
        /// documented below. Please note the ordering requirement!
        /// </summary>
        public InputList<Inputs.RecordRegionGetArgs> Regions
        {
            get => _regions ?? (_regions = new InputList<Inputs.RecordRegionGetArgs>());
            set => _regions = value;
        }

        [Input("shortAnswers")]
        private InputList<string>? _shortAnswers;
        [Obsolete(@"short_answers will be deprecated in a future release. It is suggested to migrate to a regular ""answers"" block.")]
        public InputList<string> ShortAnswers
        {
            get => _shortAnswers ?? (_shortAnswers = new InputList<string>());
            set => _shortAnswers = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The records' time to live (in seconds).
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The records' RR type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Whether to use EDNS client subnet data when
        /// available(in filter chain).
        /// </summary>
        [Input("useClientSubnet")]
        public Input<bool>? UseClientSubnet { get; set; }

        /// <summary>
        /// The zone the record belongs to. Cannot have leading or
        /// trailing dots (".") - see the example above and `FQDN formatting` below.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public RecordState()
        {
        }
        public static new RecordState Empty => new RecordState();
    }
}
