// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ns1
{
    /// <summary>
    /// Provides a NS1 Redirect resource. This can be used to create, modify, and delete redirects.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ns1 = Pulumi.Ns1;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ns1.Redirect("example", new()
    ///     {
    ///         Domain = "www.example.com",
    ///         Path = "/from/path",
    ///         Target = "https://url.com/target/path",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Additional Examples
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ns1 = Pulumi.Ns1;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ns1.RedirectCertificate("example", new()
    ///     {
    ///         Domain = "www.example.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## NS1 Documentation
    /// 
    /// [Redirect Api Doc](https://ns1.com/api#redirect)
    /// 
    /// # ns1\_redirect\_certificate
    /// 
    /// Provides a NS1 Redirect Certificate resource. This can be used to create, modify, and delete redirect certificates.
    /// 
    /// ## NS1 Documentation
    /// 
    /// [Redirect Api Doc](https://ns1.com/api#redirect)
    /// </summary>
    [Ns1ResourceType("ns1:index/redirect:Redirect")]
    public partial class Redirect : global::Pulumi.CustomResource
    {
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// The domain the redirect refers to.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// How the target is interpreted:
        /// * __all__       appends the entire incoming path to the target destination;
        /// * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
        /// * __none__      does not append any part of the incoming path.
        /// </summary>
        [Output("forwardingMode")]
        public Output<string?> ForwardingMode { get; private set; } = null!;

        /// <summary>
        /// How the redirect is executed:
        /// * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
        /// their database and replace it with the new target page (this is recommended for SEO);
        /// * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
        /// page indexed as the redirect is only temporary (while both pages might appear in the
        /// search results, a temporary redirect suggests to the search engine that it should
        /// prefer the new target page);
        /// * __masking__   preserves the redirected domain in the browser's address bar (this lets users see the
        /// address they entered, even though the displayed content comes from a different web page).
        /// </summary>
        [Output("forwardingType")]
        public Output<string?> ForwardingType { get; private set; } = null!;

        /// <summary>
        /// True if HTTPS is supported on the source domain by using Let's Encrypt certificates.
        /// </summary>
        [Output("httpsEnabled")]
        public Output<bool> HttpsEnabled { get; private set; } = null!;

        /// <summary>
        /// Forces redirect for users that try to visit HTTP domain to HTTPS instead.
        /// </summary>
        [Output("httpsForced")]
        public Output<bool> HttpsForced { get; private set; } = null!;

        /// <summary>
        /// The Unix timestamp representing when the certificate was last signed.
        /// </summary>
        [Output("lastUpdated")]
        public Output<int> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// The path on the domain to redirect from.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Enables the query string of a URL to be applied directly to the new target URL.
        /// </summary>
        [Output("queryForwarding")]
        public Output<bool?> QueryForwarding { get; private set; } = null!;

        /// <summary>
        /// Tags associated with the configuration.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The URL to redirect to.
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;


        /// <summary>
        /// Create a Redirect resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Redirect(string name, RedirectArgs args, CustomResourceOptions? options = null)
            : base("ns1:index/redirect:Redirect", name, args ?? new RedirectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Redirect(string name, Input<string> id, RedirectState? state = null, CustomResourceOptions? options = null)
            : base("ns1:index/redirect:Redirect", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Redirect resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Redirect Get(string name, Input<string> id, RedirectState? state = null, CustomResourceOptions? options = null)
        {
            return new Redirect(name, id, state, options);
        }
    }

    public sealed class RedirectArgs : global::Pulumi.ResourceArgs
    {
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The domain the redirect refers to.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// How the target is interpreted:
        /// * __all__       appends the entire incoming path to the target destination;
        /// * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
        /// * __none__      does not append any part of the incoming path.
        /// </summary>
        [Input("forwardingMode")]
        public Input<string>? ForwardingMode { get; set; }

        /// <summary>
        /// How the redirect is executed:
        /// * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
        /// their database and replace it with the new target page (this is recommended for SEO);
        /// * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
        /// page indexed as the redirect is only temporary (while both pages might appear in the
        /// search results, a temporary redirect suggests to the search engine that it should
        /// prefer the new target page);
        /// * __masking__   preserves the redirected domain in the browser's address bar (this lets users see the
        /// address they entered, even though the displayed content comes from a different web page).
        /// </summary>
        [Input("forwardingType")]
        public Input<string>? ForwardingType { get; set; }

        /// <summary>
        /// Forces redirect for users that try to visit HTTP domain to HTTPS instead.
        /// </summary>
        [Input("httpsForced")]
        public Input<bool>? HttpsForced { get; set; }

        /// <summary>
        /// The path on the domain to redirect from.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Enables the query string of a URL to be applied directly to the new target URL.
        /// </summary>
        [Input("queryForwarding")]
        public Input<bool>? QueryForwarding { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the configuration.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The URL to redirect to.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        public RedirectArgs()
        {
        }
        public static new RedirectArgs Empty => new RedirectArgs();
    }

    public sealed class RedirectState : global::Pulumi.ResourceArgs
    {
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The domain the redirect refers to.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// How the target is interpreted:
        /// * __all__       appends the entire incoming path to the target destination;
        /// * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
        /// * __none__      does not append any part of the incoming path.
        /// </summary>
        [Input("forwardingMode")]
        public Input<string>? ForwardingMode { get; set; }

        /// <summary>
        /// How the redirect is executed:
        /// * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
        /// their database and replace it with the new target page (this is recommended for SEO);
        /// * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
        /// page indexed as the redirect is only temporary (while both pages might appear in the
        /// search results, a temporary redirect suggests to the search engine that it should
        /// prefer the new target page);
        /// * __masking__   preserves the redirected domain in the browser's address bar (this lets users see the
        /// address they entered, even though the displayed content comes from a different web page).
        /// </summary>
        [Input("forwardingType")]
        public Input<string>? ForwardingType { get; set; }

        /// <summary>
        /// True if HTTPS is supported on the source domain by using Let's Encrypt certificates.
        /// </summary>
        [Input("httpsEnabled")]
        public Input<bool>? HttpsEnabled { get; set; }

        /// <summary>
        /// Forces redirect for users that try to visit HTTP domain to HTTPS instead.
        /// </summary>
        [Input("httpsForced")]
        public Input<bool>? HttpsForced { get; set; }

        /// <summary>
        /// The Unix timestamp representing when the certificate was last signed.
        /// </summary>
        [Input("lastUpdated")]
        public Input<int>? LastUpdated { get; set; }

        /// <summary>
        /// The path on the domain to redirect from.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Enables the query string of a URL to be applied directly to the new target URL.
        /// </summary>
        [Input("queryForwarding")]
        public Input<bool>? QueryForwarding { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the configuration.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The URL to redirect to.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        public RedirectState()
        {
        }
        public static new RedirectState Empty => new RedirectState();
    }
}
