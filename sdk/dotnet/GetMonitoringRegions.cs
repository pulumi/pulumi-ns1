// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ns1
{
    public static class GetMonitoringRegions
    {
        /// <summary>
        /// Provides details of all available monitoring regions.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ns1 = Pulumi.Ns1;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ns1.GetMonitoringRegions.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetMonitoringRegionsResult> InvokeAsync(GetMonitoringRegionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMonitoringRegionsResult>("ns1:index/getMonitoringRegions:getMonitoringRegions", args ?? new GetMonitoringRegionsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details of all available monitoring regions.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ns1 = Pulumi.Ns1;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ns1.GetMonitoringRegions.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetMonitoringRegionsResult> Invoke(GetMonitoringRegionsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitoringRegionsResult>("ns1:index/getMonitoringRegions:getMonitoringRegions", args ?? new GetMonitoringRegionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMonitoringRegionsArgs : global::Pulumi.InvokeArgs
    {
        [Input("regions")]
        private List<Inputs.GetMonitoringRegionsRegionArgs>? _regions;

        /// <summary>
        /// A set of the available monitoring regions. Regions is
        /// documented below.
        /// </summary>
        public List<Inputs.GetMonitoringRegionsRegionArgs> Regions
        {
            get => _regions ?? (_regions = new List<Inputs.GetMonitoringRegionsRegionArgs>());
            set => _regions = value;
        }

        public GetMonitoringRegionsArgs()
        {
        }
        public static new GetMonitoringRegionsArgs Empty => new GetMonitoringRegionsArgs();
    }

    public sealed class GetMonitoringRegionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("regions")]
        private InputList<Inputs.GetMonitoringRegionsRegionInputArgs>? _regions;

        /// <summary>
        /// A set of the available monitoring regions. Regions is
        /// documented below.
        /// </summary>
        public InputList<Inputs.GetMonitoringRegionsRegionInputArgs> Regions
        {
            get => _regions ?? (_regions = new InputList<Inputs.GetMonitoringRegionsRegionInputArgs>());
            set => _regions = value;
        }

        public GetMonitoringRegionsInvokeArgs()
        {
        }
        public static new GetMonitoringRegionsInvokeArgs Empty => new GetMonitoringRegionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMonitoringRegionsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of the available monitoring regions. Regions is
        /// documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitoringRegionsRegionResult> Regions;

        [OutputConstructor]
        private GetMonitoringRegionsResult(
            string id,

            ImmutableArray<Outputs.GetMonitoringRegionsRegionResult> regions)
        {
            Id = id;
            Regions = regions;
        }
    }
}
