// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ns1
{
    /// <summary>
    /// Provides a NS1 Monitoring Job resource. This can be used to create, modify, and delete monitoring jobs.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Ns1 = Pulumi.Ns1;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var uswestMonitor = new Ns1.MonitoringJob("uswestMonitor", new Ns1.MonitoringJobArgs
    ///         {
    ///             Active = true,
    ///             Config = 
    ///             {
    ///                 { "host", "example-elb-uswest.aws.amazon.com" },
    ///                 { "port", 443 },
    ///                 { "send", @"HEAD / HTTP/1.0
    /// 
    /// 
    /// " },
    ///                 { "ssl", 1 },
    ///             },
    ///             Frequency = 60,
    ///             JobType = "tcp",
    ///             Policy = "quorum",
    ///             RapidRecheck = true,
    ///             Regions = 
    ///             {
    ///                 "sjc",
    ///                 "sin",
    ///                 "lga",
    ///             },
    ///             Rules = 
    ///             {
    ///                 new Ns1.Inputs.MonitoringJobRuleArgs
    ///                 {
    ///                     Comparison = "contains",
    ///                     Key = "output",
    ///                     Value = "200 OK",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## NS1 Documentation
    /// 
    /// [MonitoringJob Api Doc](https://ns1.com/api#monitoring-jobs)
    /// </summary>
    public partial class MonitoringJob : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates if the job is active or temporarily disabled.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// A configuration dictionary with keys and values depending on the jobs' type.
        /// </summary>
        [Output("config")]
        public Output<ImmutableDictionary<string, object>> Config { get; private set; } = null!;

        /// <summary>
        /// The frequency, in seconds, at which to run the monitoring job in each region.
        /// </summary>
        [Output("frequency")]
        public Output<int> Frequency { get; private set; } = null!;

        /// <summary>
        /// The type of monitoring job to be run. See NS1 API
        /// docs for supported values.
        /// </summary>
        [Output("jobType")]
        public Output<string> JobType { get; private set; } = null!;

        /// <summary>
        /// The free-form display name for the monitoring job.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Freeform notes to be included in any notifications about this job.
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;

        /// <summary>
        /// The time in seconds after a failure to wait before sending a notification.
        /// </summary>
        [Output("notifyDelay")]
        public Output<int?> NotifyDelay { get; private set; } = null!;

        /// <summary>
        /// If true, a notification is sent when a job returns to an "up" state.
        /// </summary>
        [Output("notifyFailback")]
        public Output<bool?> NotifyFailback { get; private set; } = null!;

        /// <summary>
        /// The id of the notification list to send notifications to.
        /// </summary>
        [Output("notifyList")]
        public Output<string?> NotifyList { get; private set; } = null!;

        /// <summary>
        /// If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
        /// </summary>
        [Output("notifyRegional")]
        public Output<bool?> NotifyRegional { get; private set; } = null!;

        /// <summary>
        /// The time in seconds between repeat notifications of a failed job.
        /// </summary>
        [Output("notifyRepeat")]
        public Output<int?> NotifyRepeat { get; private set; } = null!;

        /// <summary>
        /// The policy for determining the monitor's global status
        /// based on the status of the job in all regions. See NS1 API docs for supported values.
        /// </summary>
        [Output("policy")]
        public Output<string?> Policy { get; private set; } = null!;

        /// <summary>
        /// If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
        /// </summary>
        [Output("rapidRecheck")]
        public Output<bool?> RapidRecheck { get; private set; } = null!;

        /// <summary>
        /// The list of region codes in which to run the monitoring
        /// job. See NS1 API docs for supported values.
        /// </summary>
        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        /// <summary>
        /// A list of rules for determining failure conditions. Job Rules are documented below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.MonitoringJobRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a MonitoringJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MonitoringJob(string name, MonitoringJobArgs args, CustomResourceOptions? options = null)
            : base("ns1:index/monitoringJob:MonitoringJob", name, args ?? new MonitoringJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MonitoringJob(string name, Input<string> id, MonitoringJobState? state = null, CustomResourceOptions? options = null)
            : base("ns1:index/monitoringJob:MonitoringJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MonitoringJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MonitoringJob Get(string name, Input<string> id, MonitoringJobState? state = null, CustomResourceOptions? options = null)
        {
            return new MonitoringJob(name, id, state, options);
        }
    }

    public sealed class MonitoringJobArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if the job is active or temporarily disabled.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("config", required: true)]
        private InputMap<object>? _config;

        /// <summary>
        /// A configuration dictionary with keys and values depending on the jobs' type.
        /// </summary>
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        /// <summary>
        /// The frequency, in seconds, at which to run the monitoring job in each region.
        /// </summary>
        [Input("frequency", required: true)]
        public Input<int> Frequency { get; set; } = null!;

        /// <summary>
        /// The type of monitoring job to be run. See NS1 API
        /// docs for supported values.
        /// </summary>
        [Input("jobType", required: true)]
        public Input<string> JobType { get; set; } = null!;

        /// <summary>
        /// The free-form display name for the monitoring job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Freeform notes to be included in any notifications about this job.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The time in seconds after a failure to wait before sending a notification.
        /// </summary>
        [Input("notifyDelay")]
        public Input<int>? NotifyDelay { get; set; }

        /// <summary>
        /// If true, a notification is sent when a job returns to an "up" state.
        /// </summary>
        [Input("notifyFailback")]
        public Input<bool>? NotifyFailback { get; set; }

        /// <summary>
        /// The id of the notification list to send notifications to.
        /// </summary>
        [Input("notifyList")]
        public Input<string>? NotifyList { get; set; }

        /// <summary>
        /// If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
        /// </summary>
        [Input("notifyRegional")]
        public Input<bool>? NotifyRegional { get; set; }

        /// <summary>
        /// The time in seconds between repeat notifications of a failed job.
        /// </summary>
        [Input("notifyRepeat")]
        public Input<int>? NotifyRepeat { get; set; }

        /// <summary>
        /// The policy for determining the monitor's global status
        /// based on the status of the job in all regions. See NS1 API docs for supported values.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
        /// </summary>
        [Input("rapidRecheck")]
        public Input<bool>? RapidRecheck { get; set; }

        [Input("regions", required: true)]
        private InputList<string>? _regions;

        /// <summary>
        /// The list of region codes in which to run the monitoring
        /// job. See NS1 API docs for supported values.
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        [Input("rules")]
        private InputList<Inputs.MonitoringJobRuleArgs>? _rules;

        /// <summary>
        /// A list of rules for determining failure conditions. Job Rules are documented below.
        /// </summary>
        public InputList<Inputs.MonitoringJobRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.MonitoringJobRuleArgs>());
            set => _rules = value;
        }

        public MonitoringJobArgs()
        {
        }
    }

    public sealed class MonitoringJobState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if the job is active or temporarily disabled.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("config")]
        private InputMap<object>? _config;

        /// <summary>
        /// A configuration dictionary with keys and values depending on the jobs' type.
        /// </summary>
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        /// <summary>
        /// The frequency, in seconds, at which to run the monitoring job in each region.
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        /// <summary>
        /// The type of monitoring job to be run. See NS1 API
        /// docs for supported values.
        /// </summary>
        [Input("jobType")]
        public Input<string>? JobType { get; set; }

        /// <summary>
        /// The free-form display name for the monitoring job.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Freeform notes to be included in any notifications about this job.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The time in seconds after a failure to wait before sending a notification.
        /// </summary>
        [Input("notifyDelay")]
        public Input<int>? NotifyDelay { get; set; }

        /// <summary>
        /// If true, a notification is sent when a job returns to an "up" state.
        /// </summary>
        [Input("notifyFailback")]
        public Input<bool>? NotifyFailback { get; set; }

        /// <summary>
        /// The id of the notification list to send notifications to.
        /// </summary>
        [Input("notifyList")]
        public Input<string>? NotifyList { get; set; }

        /// <summary>
        /// If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
        /// </summary>
        [Input("notifyRegional")]
        public Input<bool>? NotifyRegional { get; set; }

        /// <summary>
        /// The time in seconds between repeat notifications of a failed job.
        /// </summary>
        [Input("notifyRepeat")]
        public Input<int>? NotifyRepeat { get; set; }

        /// <summary>
        /// The policy for determining the monitor's global status
        /// based on the status of the job in all regions. See NS1 API docs for supported values.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
        /// </summary>
        [Input("rapidRecheck")]
        public Input<bool>? RapidRecheck { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// The list of region codes in which to run the monitoring
        /// job. See NS1 API docs for supported values.
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        [Input("rules")]
        private InputList<Inputs.MonitoringJobRuleGetArgs>? _rules;

        /// <summary>
        /// A list of rules for determining failure conditions. Job Rules are documented below.
        /// </summary>
        public InputList<Inputs.MonitoringJobRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.MonitoringJobRuleGetArgs>());
            set => _rules = value;
        }

        public MonitoringJobState()
        {
        }
    }
}
