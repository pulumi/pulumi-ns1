// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ns1
{
    /// <summary>
    /// Provides a NS1 Api Key resource. This can be used to create, modify, and delete api keys.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ns1 = Pulumi.Ns1;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ns1.Team("example", new()
    ///     {
    ///         Name = "Example team",
    ///     });
    /// 
    ///     var exampleAPIKey = new Ns1.APIKey("example", new()
    ///     {
    ///         Name = "Example key",
    ///         Teams = new[]
    ///         {
    ///             example.Id,
    ///         },
    ///         IpWhitelists = new[]
    ///         {
    ///             "1.1.1.1",
    ///             "2.2.2.2",
    ///         },
    ///         DnsViewZones = false,
    ///         AccountManageUsers = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Permissions
    /// 
    /// An API key will inherit permissions from the teams it is assigned to.
    /// If a key is assigned to a team and also has individual permissions set on the key, the individual permissions
    /// will be overridden by the inherited team permissions.
    /// In a future release, setting permissions on a key that is part of a team will be explicitly disabled.
    /// 
    /// When a key is removed from all teams completely, it will inherit whatever permissions it had previously.
    /// If a key is removed from all it's teams, it will probably be necessary to run `pulumi up` a second time
    /// to update the keys permissions from it's old team permissions to new key-specific permissions.
    /// 
    /// See [the NS1 API docs](https://ns1.com/api#getget-all-account-users) for an overview of permission semantics or for [more details](https://help.ns1.com/hc/en-us/articles/360024409034-Managing-user-permissions) about the individual permission flags.
    /// 
    /// ## NS1 Documentation
    /// 
    /// [ApiKeys Api Doc](https://ns1.com/api#api-key)
    /// 
    /// ## Import
    /// 
    /// -&gt; Imported keys will not have their key stored in the state file.
    /// 
    /// ```sh
    /// $ pulumi import ns1:index/aPIKey:APIKey `ns1_apikey` 
    /// ```
    /// 
    /// So for the example above:
    /// 
    /// ```sh
    /// $ pulumi import ns1:index/aPIKey:APIKey example &lt;ID&gt;`
    /// ```
    /// </summary>
    [Ns1ResourceType("ns1:index/aPIKey:APIKey")]
    public partial class APIKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the apikey can modify account settings.
        /// </summary>
        [Output("accountManageAccountSettings")]
        public Output<bool?> AccountManageAccountSettings { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can modify account apikeys.
        /// </summary>
        [Output("accountManageApikeys")]
        public Output<bool?> AccountManageApikeys { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can manage ip whitelist.
        /// </summary>
        [Output("accountManageIpWhitelist")]
        public Output<bool?> AccountManageIpWhitelist { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can modify account payment methods.
        /// </summary>
        [Output("accountManagePaymentMethods")]
        public Output<bool?> AccountManagePaymentMethods { get; private set; } = null!;

        /// <summary>
        /// No longer in use.
        /// </summary>
        [Output("accountManagePlan")]
        public Output<bool?> AccountManagePlan { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can modify other teams in the account.
        /// </summary>
        [Output("accountManageTeams")]
        public Output<bool?> AccountManageTeams { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can modify account users.
        /// </summary>
        [Output("accountManageUsers")]
        public Output<bool?> AccountManageUsers { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can view activity logs.
        /// </summary>
        [Output("accountViewActivityLog")]
        public Output<bool?> AccountViewActivityLog { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can view invoices.
        /// </summary>
        [Output("accountViewInvoices")]
        public Output<bool?> AccountViewInvoices { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can modify data feeds.
        /// </summary>
        [Output("dataManageDatafeeds")]
        public Output<bool?> DataManageDatafeeds { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can modify data sources.
        /// </summary>
        [Output("dataManageDatasources")]
        public Output<bool?> DataManageDatasources { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can publish to data feeds.
        /// </summary>
        [Output("dataPushToDatafeeds")]
        public Output<bool?> DataPushToDatafeeds { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can modify the accounts zones.
        /// </summary>
        [Output("dnsManageZones")]
        public Output<bool?> DnsManageZones { get; private set; } = null!;

        /// <summary>
        /// List of records that the apikey may access.
        /// </summary>
        [Output("dnsRecordsAllows")]
        public Output<ImmutableArray<Outputs.APIKeyDnsRecordsAllow>> DnsRecordsAllows { get; private set; } = null!;

        /// <summary>
        /// List of records that the apikey may not access.
        /// </summary>
        [Output("dnsRecordsDenies")]
        public Output<ImmutableArray<Outputs.APIKeyDnsRecordsDeny>> DnsRecordsDenies { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can view the accounts zones.
        /// </summary>
        [Output("dnsViewZones")]
        public Output<bool?> DnsViewZones { get; private set; } = null!;

        /// <summary>
        /// If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
        /// </summary>
        [Output("dnsZonesAllowByDefault")]
        public Output<bool?> DnsZonesAllowByDefault { get; private set; } = null!;

        /// <summary>
        /// List of zones that the apikey may access.
        /// </summary>
        [Output("dnsZonesAllows")]
        public Output<ImmutableArray<string>> DnsZonesAllows { get; private set; } = null!;

        /// <summary>
        /// List of zones that the apikey may not access.
        /// </summary>
        [Output("dnsZonesDenies")]
        public Output<ImmutableArray<string>> DnsZonesDenies { get; private set; } = null!;

        /// <summary>
        /// Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.
        /// </summary>
        [Output("ipWhitelistStrict")]
        public Output<bool?> IpWhitelistStrict { get; private set; } = null!;

        /// <summary>
        /// Array of IP addresses/networks to which to grant the API key access.
        /// </summary>
        [Output("ipWhitelists")]
        public Output<ImmutableArray<string>> IpWhitelists { get; private set; } = null!;

        /// <summary>
        /// (Computed) The apikeys authentication token.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Whether the user can create monitoring jobs when manage_jobs is not set to true.
        /// </summary>
        [Output("monitoringCreateJobs")]
        public Output<bool?> MonitoringCreateJobs { get; private set; } = null!;

        /// <summary>
        /// Whether the user can delete monitoring jobs when manage_jobs is not set to true.
        /// </summary>
        [Output("monitoringDeleteJobs")]
        public Output<bool?> MonitoringDeleteJobs { get; private set; } = null!;

        /// <summary>
        /// Whether the user can create, update, and delete monitoring jobs.
        /// </summary>
        [Output("monitoringManageJobs")]
        public Output<bool?> MonitoringManageJobs { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can modify notification lists.
        /// </summary>
        [Output("monitoringManageLists")]
        public Output<bool?> MonitoringManageLists { get; private set; } = null!;

        /// <summary>
        /// Whether the user can update monitoring jobs when manage_jobs is not set to true.
        /// </summary>
        [Output("monitoringUpdateJobs")]
        public Output<bool?> MonitoringUpdateJobs { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can view monitoring jobs.
        /// </summary>
        [Output("monitoringViewJobs")]
        public Output<bool?> MonitoringViewJobs { get; private set; } = null!;

        /// <summary>
        /// The free form name of the apikey.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the user can manage redirects.
        /// Only relevant for the DDI product.
        /// </summary>
        [Output("redirectsManageRedirects")]
        public Output<bool?> RedirectsManageRedirects { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can manage global active directory.
        /// </summary>
        [Output("securityManageActiveDirectory")]
        public Output<bool?> SecurityManageActiveDirectory { get; private set; } = null!;

        /// <summary>
        /// Whether the apikey can manage global two factor authentication.
        /// </summary>
        [Output("securityManageGlobal2fa")]
        public Output<bool?> SecurityManageGlobal2fa { get; private set; } = null!;

        /// <summary>
        /// The teams that the apikey belongs to.
        /// </summary>
        [Output("teams")]
        public Output<ImmutableArray<string>> Teams { get; private set; } = null!;


        /// <summary>
        /// Create a APIKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public APIKey(string name, APIKeyArgs? args = null, CustomResourceOptions? options = null)
            : base("ns1:index/aPIKey:APIKey", name, args ?? new APIKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private APIKey(string name, Input<string> id, APIKeyState? state = null, CustomResourceOptions? options = null)
            : base("ns1:index/aPIKey:APIKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "key",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing APIKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static APIKey Get(string name, Input<string> id, APIKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new APIKey(name, id, state, options);
        }
    }

    public sealed class APIKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the apikey can modify account settings.
        /// </summary>
        [Input("accountManageAccountSettings")]
        public Input<bool>? AccountManageAccountSettings { get; set; }

        /// <summary>
        /// Whether the apikey can modify account apikeys.
        /// </summary>
        [Input("accountManageApikeys")]
        public Input<bool>? AccountManageApikeys { get; set; }

        /// <summary>
        /// Whether the apikey can manage ip whitelist.
        /// </summary>
        [Input("accountManageIpWhitelist")]
        public Input<bool>? AccountManageIpWhitelist { get; set; }

        /// <summary>
        /// Whether the apikey can modify account payment methods.
        /// </summary>
        [Input("accountManagePaymentMethods")]
        public Input<bool>? AccountManagePaymentMethods { get; set; }

        /// <summary>
        /// No longer in use.
        /// </summary>
        [Input("accountManagePlan")]
        public Input<bool>? AccountManagePlan { get; set; }

        /// <summary>
        /// Whether the apikey can modify other teams in the account.
        /// </summary>
        [Input("accountManageTeams")]
        public Input<bool>? AccountManageTeams { get; set; }

        /// <summary>
        /// Whether the apikey can modify account users.
        /// </summary>
        [Input("accountManageUsers")]
        public Input<bool>? AccountManageUsers { get; set; }

        /// <summary>
        /// Whether the apikey can view activity logs.
        /// </summary>
        [Input("accountViewActivityLog")]
        public Input<bool>? AccountViewActivityLog { get; set; }

        /// <summary>
        /// Whether the apikey can view invoices.
        /// </summary>
        [Input("accountViewInvoices")]
        public Input<bool>? AccountViewInvoices { get; set; }

        /// <summary>
        /// Whether the apikey can modify data feeds.
        /// </summary>
        [Input("dataManageDatafeeds")]
        public Input<bool>? DataManageDatafeeds { get; set; }

        /// <summary>
        /// Whether the apikey can modify data sources.
        /// </summary>
        [Input("dataManageDatasources")]
        public Input<bool>? DataManageDatasources { get; set; }

        /// <summary>
        /// Whether the apikey can publish to data feeds.
        /// </summary>
        [Input("dataPushToDatafeeds")]
        public Input<bool>? DataPushToDatafeeds { get; set; }

        /// <summary>
        /// Whether the apikey can modify the accounts zones.
        /// </summary>
        [Input("dnsManageZones")]
        public Input<bool>? DnsManageZones { get; set; }

        [Input("dnsRecordsAllows")]
        private InputList<Inputs.APIKeyDnsRecordsAllowArgs>? _dnsRecordsAllows;

        /// <summary>
        /// List of records that the apikey may access.
        /// </summary>
        public InputList<Inputs.APIKeyDnsRecordsAllowArgs> DnsRecordsAllows
        {
            get => _dnsRecordsAllows ?? (_dnsRecordsAllows = new InputList<Inputs.APIKeyDnsRecordsAllowArgs>());
            set => _dnsRecordsAllows = value;
        }

        [Input("dnsRecordsDenies")]
        private InputList<Inputs.APIKeyDnsRecordsDenyArgs>? _dnsRecordsDenies;

        /// <summary>
        /// List of records that the apikey may not access.
        /// </summary>
        public InputList<Inputs.APIKeyDnsRecordsDenyArgs> DnsRecordsDenies
        {
            get => _dnsRecordsDenies ?? (_dnsRecordsDenies = new InputList<Inputs.APIKeyDnsRecordsDenyArgs>());
            set => _dnsRecordsDenies = value;
        }

        /// <summary>
        /// Whether the apikey can view the accounts zones.
        /// </summary>
        [Input("dnsViewZones")]
        public Input<bool>? DnsViewZones { get; set; }

        /// <summary>
        /// If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
        /// </summary>
        [Input("dnsZonesAllowByDefault")]
        public Input<bool>? DnsZonesAllowByDefault { get; set; }

        [Input("dnsZonesAllows")]
        private InputList<string>? _dnsZonesAllows;

        /// <summary>
        /// List of zones that the apikey may access.
        /// </summary>
        public InputList<string> DnsZonesAllows
        {
            get => _dnsZonesAllows ?? (_dnsZonesAllows = new InputList<string>());
            set => _dnsZonesAllows = value;
        }

        [Input("dnsZonesDenies")]
        private InputList<string>? _dnsZonesDenies;

        /// <summary>
        /// List of zones that the apikey may not access.
        /// </summary>
        public InputList<string> DnsZonesDenies
        {
            get => _dnsZonesDenies ?? (_dnsZonesDenies = new InputList<string>());
            set => _dnsZonesDenies = value;
        }

        /// <summary>
        /// Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.
        /// </summary>
        [Input("ipWhitelistStrict")]
        public Input<bool>? IpWhitelistStrict { get; set; }

        [Input("ipWhitelists")]
        private InputList<string>? _ipWhitelists;

        /// <summary>
        /// Array of IP addresses/networks to which to grant the API key access.
        /// </summary>
        public InputList<string> IpWhitelists
        {
            get => _ipWhitelists ?? (_ipWhitelists = new InputList<string>());
            set => _ipWhitelists = value;
        }

        /// <summary>
        /// Whether the user can create monitoring jobs when manage_jobs is not set to true.
        /// </summary>
        [Input("monitoringCreateJobs")]
        public Input<bool>? MonitoringCreateJobs { get; set; }

        /// <summary>
        /// Whether the user can delete monitoring jobs when manage_jobs is not set to true.
        /// </summary>
        [Input("monitoringDeleteJobs")]
        public Input<bool>? MonitoringDeleteJobs { get; set; }

        /// <summary>
        /// Whether the user can create, update, and delete monitoring jobs.
        /// </summary>
        [Input("monitoringManageJobs")]
        public Input<bool>? MonitoringManageJobs { get; set; }

        /// <summary>
        /// Whether the apikey can modify notification lists.
        /// </summary>
        [Input("monitoringManageLists")]
        public Input<bool>? MonitoringManageLists { get; set; }

        /// <summary>
        /// Whether the user can update monitoring jobs when manage_jobs is not set to true.
        /// </summary>
        [Input("monitoringUpdateJobs")]
        public Input<bool>? MonitoringUpdateJobs { get; set; }

        /// <summary>
        /// Whether the apikey can view monitoring jobs.
        /// </summary>
        [Input("monitoringViewJobs")]
        public Input<bool>? MonitoringViewJobs { get; set; }

        /// <summary>
        /// The free form name of the apikey.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the user can manage redirects.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("redirectsManageRedirects")]
        public Input<bool>? RedirectsManageRedirects { get; set; }

        /// <summary>
        /// Whether the apikey can manage global active directory.
        /// </summary>
        [Input("securityManageActiveDirectory")]
        public Input<bool>? SecurityManageActiveDirectory { get; set; }

        /// <summary>
        /// Whether the apikey can manage global two factor authentication.
        /// </summary>
        [Input("securityManageGlobal2fa")]
        public Input<bool>? SecurityManageGlobal2fa { get; set; }

        [Input("teams")]
        private InputList<string>? _teams;

        /// <summary>
        /// The teams that the apikey belongs to.
        /// </summary>
        public InputList<string> Teams
        {
            get => _teams ?? (_teams = new InputList<string>());
            set => _teams = value;
        }

        public APIKeyArgs()
        {
        }
        public static new APIKeyArgs Empty => new APIKeyArgs();
    }

    public sealed class APIKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the apikey can modify account settings.
        /// </summary>
        [Input("accountManageAccountSettings")]
        public Input<bool>? AccountManageAccountSettings { get; set; }

        /// <summary>
        /// Whether the apikey can modify account apikeys.
        /// </summary>
        [Input("accountManageApikeys")]
        public Input<bool>? AccountManageApikeys { get; set; }

        /// <summary>
        /// Whether the apikey can manage ip whitelist.
        /// </summary>
        [Input("accountManageIpWhitelist")]
        public Input<bool>? AccountManageIpWhitelist { get; set; }

        /// <summary>
        /// Whether the apikey can modify account payment methods.
        /// </summary>
        [Input("accountManagePaymentMethods")]
        public Input<bool>? AccountManagePaymentMethods { get; set; }

        /// <summary>
        /// No longer in use.
        /// </summary>
        [Input("accountManagePlan")]
        public Input<bool>? AccountManagePlan { get; set; }

        /// <summary>
        /// Whether the apikey can modify other teams in the account.
        /// </summary>
        [Input("accountManageTeams")]
        public Input<bool>? AccountManageTeams { get; set; }

        /// <summary>
        /// Whether the apikey can modify account users.
        /// </summary>
        [Input("accountManageUsers")]
        public Input<bool>? AccountManageUsers { get; set; }

        /// <summary>
        /// Whether the apikey can view activity logs.
        /// </summary>
        [Input("accountViewActivityLog")]
        public Input<bool>? AccountViewActivityLog { get; set; }

        /// <summary>
        /// Whether the apikey can view invoices.
        /// </summary>
        [Input("accountViewInvoices")]
        public Input<bool>? AccountViewInvoices { get; set; }

        /// <summary>
        /// Whether the apikey can modify data feeds.
        /// </summary>
        [Input("dataManageDatafeeds")]
        public Input<bool>? DataManageDatafeeds { get; set; }

        /// <summary>
        /// Whether the apikey can modify data sources.
        /// </summary>
        [Input("dataManageDatasources")]
        public Input<bool>? DataManageDatasources { get; set; }

        /// <summary>
        /// Whether the apikey can publish to data feeds.
        /// </summary>
        [Input("dataPushToDatafeeds")]
        public Input<bool>? DataPushToDatafeeds { get; set; }

        /// <summary>
        /// Whether the apikey can modify the accounts zones.
        /// </summary>
        [Input("dnsManageZones")]
        public Input<bool>? DnsManageZones { get; set; }

        [Input("dnsRecordsAllows")]
        private InputList<Inputs.APIKeyDnsRecordsAllowGetArgs>? _dnsRecordsAllows;

        /// <summary>
        /// List of records that the apikey may access.
        /// </summary>
        public InputList<Inputs.APIKeyDnsRecordsAllowGetArgs> DnsRecordsAllows
        {
            get => _dnsRecordsAllows ?? (_dnsRecordsAllows = new InputList<Inputs.APIKeyDnsRecordsAllowGetArgs>());
            set => _dnsRecordsAllows = value;
        }

        [Input("dnsRecordsDenies")]
        private InputList<Inputs.APIKeyDnsRecordsDenyGetArgs>? _dnsRecordsDenies;

        /// <summary>
        /// List of records that the apikey may not access.
        /// </summary>
        public InputList<Inputs.APIKeyDnsRecordsDenyGetArgs> DnsRecordsDenies
        {
            get => _dnsRecordsDenies ?? (_dnsRecordsDenies = new InputList<Inputs.APIKeyDnsRecordsDenyGetArgs>());
            set => _dnsRecordsDenies = value;
        }

        /// <summary>
        /// Whether the apikey can view the accounts zones.
        /// </summary>
        [Input("dnsViewZones")]
        public Input<bool>? DnsViewZones { get; set; }

        /// <summary>
        /// If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
        /// </summary>
        [Input("dnsZonesAllowByDefault")]
        public Input<bool>? DnsZonesAllowByDefault { get; set; }

        [Input("dnsZonesAllows")]
        private InputList<string>? _dnsZonesAllows;

        /// <summary>
        /// List of zones that the apikey may access.
        /// </summary>
        public InputList<string> DnsZonesAllows
        {
            get => _dnsZonesAllows ?? (_dnsZonesAllows = new InputList<string>());
            set => _dnsZonesAllows = value;
        }

        [Input("dnsZonesDenies")]
        private InputList<string>? _dnsZonesDenies;

        /// <summary>
        /// List of zones that the apikey may not access.
        /// </summary>
        public InputList<string> DnsZonesDenies
        {
            get => _dnsZonesDenies ?? (_dnsZonesDenies = new InputList<string>());
            set => _dnsZonesDenies = value;
        }

        /// <summary>
        /// Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.
        /// </summary>
        [Input("ipWhitelistStrict")]
        public Input<bool>? IpWhitelistStrict { get; set; }

        [Input("ipWhitelists")]
        private InputList<string>? _ipWhitelists;

        /// <summary>
        /// Array of IP addresses/networks to which to grant the API key access.
        /// </summary>
        public InputList<string> IpWhitelists
        {
            get => _ipWhitelists ?? (_ipWhitelists = new InputList<string>());
            set => _ipWhitelists = value;
        }

        [Input("key")]
        private Input<string>? _key;

        /// <summary>
        /// (Computed) The apikeys authentication token.
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether the user can create monitoring jobs when manage_jobs is not set to true.
        /// </summary>
        [Input("monitoringCreateJobs")]
        public Input<bool>? MonitoringCreateJobs { get; set; }

        /// <summary>
        /// Whether the user can delete monitoring jobs when manage_jobs is not set to true.
        /// </summary>
        [Input("monitoringDeleteJobs")]
        public Input<bool>? MonitoringDeleteJobs { get; set; }

        /// <summary>
        /// Whether the user can create, update, and delete monitoring jobs.
        /// </summary>
        [Input("monitoringManageJobs")]
        public Input<bool>? MonitoringManageJobs { get; set; }

        /// <summary>
        /// Whether the apikey can modify notification lists.
        /// </summary>
        [Input("monitoringManageLists")]
        public Input<bool>? MonitoringManageLists { get; set; }

        /// <summary>
        /// Whether the user can update monitoring jobs when manage_jobs is not set to true.
        /// </summary>
        [Input("monitoringUpdateJobs")]
        public Input<bool>? MonitoringUpdateJobs { get; set; }

        /// <summary>
        /// Whether the apikey can view monitoring jobs.
        /// </summary>
        [Input("monitoringViewJobs")]
        public Input<bool>? MonitoringViewJobs { get; set; }

        /// <summary>
        /// The free form name of the apikey.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the user can manage redirects.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("redirectsManageRedirects")]
        public Input<bool>? RedirectsManageRedirects { get; set; }

        /// <summary>
        /// Whether the apikey can manage global active directory.
        /// </summary>
        [Input("securityManageActiveDirectory")]
        public Input<bool>? SecurityManageActiveDirectory { get; set; }

        /// <summary>
        /// Whether the apikey can manage global two factor authentication.
        /// </summary>
        [Input("securityManageGlobal2fa")]
        public Input<bool>? SecurityManageGlobal2fa { get; set; }

        [Input("teams")]
        private InputList<string>? _teams;

        /// <summary>
        /// The teams that the apikey belongs to.
        /// </summary>
        public InputList<string> Teams
        {
            get => _teams ?? (_teams = new InputList<string>());
            set => _teams = value;
        }

        public APIKeyState()
        {
        }
        public static new APIKeyState Empty => new APIKeyState();
    }
}
