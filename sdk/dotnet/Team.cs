// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ns1
{
    /// <summary>
    /// Provides a NS1 Team resource. This can be used to create, modify, and delete
    /// teams. The credentials used must have the `manage_teams` permission set.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Ns1 = Pulumi.Ns1;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create a new NS1 Team
    ///         var example = new Ns1.Team("example", new Ns1.TeamArgs
    ///         {
    ///             AccountManageUsers = false,
    ///             DnsViewZones = false,
    ///             IpWhitelists = 
    ///             {
    ///                 new Ns1.Inputs.TeamIpWhitelistArgs
    ///                 {
    ///                     Name = "whitelist-1",
    ///                     Values = 
    ///                     {
    ///                         "1.1.1.1",
    ///                         "2.2.2.2",
    ///                     },
    ///                 },
    ///                 new Ns1.Inputs.TeamIpWhitelistArgs
    ///                 {
    ///                     Name = "whitelist-2",
    ///                     Values = 
    ///                     {
    ///                         "3.3.3.3",
    ///                         "4.4.4.4",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         // Another team
    ///         var example2 = new Ns1.Team("example2", new Ns1.TeamArgs
    ///         {
    ///             DataManageDatasources = true,
    ///             DnsViewZones = true,
    ///             DnsZonesAllows = 
    ///             {
    ///                 "mytest.zone",
    ///             },
    ///             DnsZonesAllowByDefault = true,
    ///             DnsZonesDenies = 
    ///             {
    ///                 "myother.zone",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## NS1 Documentation
    /// 
    /// [Team Api Docs](https://ns1.com/api#team)
    /// </summary>
    public partial class Team : Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the team can modify account settings.
        /// </summary>
        [Output("accountManageAccountSettings")]
        public Output<bool?> AccountManageAccountSettings { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify account apikeys.
        /// </summary>
        [Output("accountManageApikeys")]
        public Output<bool?> AccountManageApikeys { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify account payment methods.
        /// </summary>
        [Output("accountManagePaymentMethods")]
        public Output<bool?> AccountManagePaymentMethods { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify the account plan.
        /// </summary>
        [Output("accountManagePlan")]
        public Output<bool?> AccountManagePlan { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify other teams in the account.
        /// </summary>
        [Output("accountManageTeams")]
        public Output<bool?> AccountManageTeams { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify account users.
        /// </summary>
        [Output("accountManageUsers")]
        public Output<bool?> AccountManageUsers { get; private set; } = null!;

        /// <summary>
        /// Whether the team can view activity logs.
        /// </summary>
        [Output("accountViewActivityLog")]
        public Output<bool?> AccountViewActivityLog { get; private set; } = null!;

        /// <summary>
        /// Whether the team can view invoices.
        /// </summary>
        [Output("accountViewInvoices")]
        public Output<bool?> AccountViewInvoices { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify data feeds.
        /// </summary>
        [Output("dataManageDatafeeds")]
        public Output<bool?> DataManageDatafeeds { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify data sources.
        /// </summary>
        [Output("dataManageDatasources")]
        public Output<bool?> DataManageDatasources { get; private set; } = null!;

        /// <summary>
        /// Whether the team can publish to data feeds.
        /// </summary>
        [Output("dataPushToDatafeeds")]
        public Output<bool?> DataPushToDatafeeds { get; private set; } = null!;

        /// <summary>
        /// Whether the team can manage DHCP.
        /// Only relevant for the DDI product.
        /// </summary>
        [Output("dhcpManageDhcp")]
        public Output<bool?> DhcpManageDhcp { get; private set; } = null!;

        /// <summary>
        /// Whether the team can view DHCP.
        /// Only relevant for the DDI product.
        /// </summary>
        [Output("dhcpViewDhcp")]
        public Output<bool?> DhcpViewDhcp { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify the accounts zones.
        /// </summary>
        [Output("dnsManageZones")]
        public Output<bool?> DnsManageZones { get; private set; } = null!;

        /// <summary>
        /// Whether the team can view the accounts zones.
        /// </summary>
        [Output("dnsViewZones")]
        public Output<bool?> DnsViewZones { get; private set; } = null!;

        /// <summary>
        /// If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
        /// </summary>
        [Output("dnsZonesAllowByDefault")]
        public Output<bool?> DnsZonesAllowByDefault { get; private set; } = null!;

        /// <summary>
        /// List of zones that the team may access.
        /// </summary>
        [Output("dnsZonesAllows")]
        public Output<ImmutableArray<string>> DnsZonesAllows { get; private set; } = null!;

        /// <summary>
        /// List of zones that the team may not access.
        /// </summary>
        [Output("dnsZonesDenies")]
        public Output<ImmutableArray<string>> DnsZonesDenies { get; private set; } = null!;

        /// <summary>
        /// The IP addresses to whitelist for this key.
        /// </summary>
        [Output("ipWhitelists")]
        public Output<ImmutableArray<Outputs.TeamIpWhitelist>> IpWhitelists { get; private set; } = null!;

        /// <summary>
        /// Whether the team can manage IPAM.
        /// Only relevant for the DDI product.
        /// </summary>
        [Output("ipamManageIpam")]
        public Output<bool?> IpamManageIpam { get; private set; } = null!;

        /// <summary>
        /// Whether the team can view IPAM.
        /// Only relevant for the DDI product.
        /// </summary>
        [Output("ipamViewIpam")]
        public Output<bool?> IpamViewIpam { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify monitoring jobs.
        /// </summary>
        [Output("monitoringManageJobs")]
        public Output<bool?> MonitoringManageJobs { get; private set; } = null!;

        /// <summary>
        /// Whether the team can modify notification lists.
        /// </summary>
        [Output("monitoringManageLists")]
        public Output<bool?> MonitoringManageLists { get; private set; } = null!;

        /// <summary>
        /// Whether the team can view monitoring jobs.
        /// </summary>
        [Output("monitoringViewJobs")]
        public Output<bool?> MonitoringViewJobs { get; private set; } = null!;

        /// <summary>
        /// The free form name of the team.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the team can manage global active directory.
        /// Only relevant for the DDI product.
        /// </summary>
        [Output("securityManageActiveDirectory")]
        public Output<bool?> SecurityManageActiveDirectory { get; private set; } = null!;

        /// <summary>
        /// Whether the team can manage global two factor authentication.
        /// </summary>
        [Output("securityManageGlobal2fa")]
        public Output<bool?> SecurityManageGlobal2fa { get; private set; } = null!;


        /// <summary>
        /// Create a Team resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Team(string name, TeamArgs? args = null, CustomResourceOptions? options = null)
            : base("ns1:index/team:Team", name, args ?? new TeamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Team(string name, Input<string> id, TeamState? state = null, CustomResourceOptions? options = null)
            : base("ns1:index/team:Team", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Team resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Team Get(string name, Input<string> id, TeamState? state = null, CustomResourceOptions? options = null)
        {
            return new Team(name, id, state, options);
        }
    }

    public sealed class TeamArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the team can modify account settings.
        /// </summary>
        [Input("accountManageAccountSettings")]
        public Input<bool>? AccountManageAccountSettings { get; set; }

        /// <summary>
        /// Whether the team can modify account apikeys.
        /// </summary>
        [Input("accountManageApikeys")]
        public Input<bool>? AccountManageApikeys { get; set; }

        /// <summary>
        /// Whether the team can modify account payment methods.
        /// </summary>
        [Input("accountManagePaymentMethods")]
        public Input<bool>? AccountManagePaymentMethods { get; set; }

        /// <summary>
        /// Whether the team can modify the account plan.
        /// </summary>
        [Input("accountManagePlan")]
        public Input<bool>? AccountManagePlan { get; set; }

        /// <summary>
        /// Whether the team can modify other teams in the account.
        /// </summary>
        [Input("accountManageTeams")]
        public Input<bool>? AccountManageTeams { get; set; }

        /// <summary>
        /// Whether the team can modify account users.
        /// </summary>
        [Input("accountManageUsers")]
        public Input<bool>? AccountManageUsers { get; set; }

        /// <summary>
        /// Whether the team can view activity logs.
        /// </summary>
        [Input("accountViewActivityLog")]
        public Input<bool>? AccountViewActivityLog { get; set; }

        /// <summary>
        /// Whether the team can view invoices.
        /// </summary>
        [Input("accountViewInvoices")]
        public Input<bool>? AccountViewInvoices { get; set; }

        /// <summary>
        /// Whether the team can modify data feeds.
        /// </summary>
        [Input("dataManageDatafeeds")]
        public Input<bool>? DataManageDatafeeds { get; set; }

        /// <summary>
        /// Whether the team can modify data sources.
        /// </summary>
        [Input("dataManageDatasources")]
        public Input<bool>? DataManageDatasources { get; set; }

        /// <summary>
        /// Whether the team can publish to data feeds.
        /// </summary>
        [Input("dataPushToDatafeeds")]
        public Input<bool>? DataPushToDatafeeds { get; set; }

        /// <summary>
        /// Whether the team can manage DHCP.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("dhcpManageDhcp")]
        public Input<bool>? DhcpManageDhcp { get; set; }

        /// <summary>
        /// Whether the team can view DHCP.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("dhcpViewDhcp")]
        public Input<bool>? DhcpViewDhcp { get; set; }

        /// <summary>
        /// Whether the team can modify the accounts zones.
        /// </summary>
        [Input("dnsManageZones")]
        public Input<bool>? DnsManageZones { get; set; }

        /// <summary>
        /// Whether the team can view the accounts zones.
        /// </summary>
        [Input("dnsViewZones")]
        public Input<bool>? DnsViewZones { get; set; }

        /// <summary>
        /// If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
        /// </summary>
        [Input("dnsZonesAllowByDefault")]
        public Input<bool>? DnsZonesAllowByDefault { get; set; }

        [Input("dnsZonesAllows")]
        private InputList<string>? _dnsZonesAllows;

        /// <summary>
        /// List of zones that the team may access.
        /// </summary>
        public InputList<string> DnsZonesAllows
        {
            get => _dnsZonesAllows ?? (_dnsZonesAllows = new InputList<string>());
            set => _dnsZonesAllows = value;
        }

        [Input("dnsZonesDenies")]
        private InputList<string>? _dnsZonesDenies;

        /// <summary>
        /// List of zones that the team may not access.
        /// </summary>
        public InputList<string> DnsZonesDenies
        {
            get => _dnsZonesDenies ?? (_dnsZonesDenies = new InputList<string>());
            set => _dnsZonesDenies = value;
        }

        [Input("ipWhitelists")]
        private InputList<Inputs.TeamIpWhitelistArgs>? _ipWhitelists;

        /// <summary>
        /// The IP addresses to whitelist for this key.
        /// </summary>
        public InputList<Inputs.TeamIpWhitelistArgs> IpWhitelists
        {
            get => _ipWhitelists ?? (_ipWhitelists = new InputList<Inputs.TeamIpWhitelistArgs>());
            set => _ipWhitelists = value;
        }

        /// <summary>
        /// Whether the team can manage IPAM.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("ipamManageIpam")]
        public Input<bool>? IpamManageIpam { get; set; }

        /// <summary>
        /// Whether the team can view IPAM.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("ipamViewIpam")]
        public Input<bool>? IpamViewIpam { get; set; }

        /// <summary>
        /// Whether the team can modify monitoring jobs.
        /// </summary>
        [Input("monitoringManageJobs")]
        public Input<bool>? MonitoringManageJobs { get; set; }

        /// <summary>
        /// Whether the team can modify notification lists.
        /// </summary>
        [Input("monitoringManageLists")]
        public Input<bool>? MonitoringManageLists { get; set; }

        /// <summary>
        /// Whether the team can view monitoring jobs.
        /// </summary>
        [Input("monitoringViewJobs")]
        public Input<bool>? MonitoringViewJobs { get; set; }

        /// <summary>
        /// The free form name of the team.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the team can manage global active directory.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("securityManageActiveDirectory")]
        public Input<bool>? SecurityManageActiveDirectory { get; set; }

        /// <summary>
        /// Whether the team can manage global two factor authentication.
        /// </summary>
        [Input("securityManageGlobal2fa")]
        public Input<bool>? SecurityManageGlobal2fa { get; set; }

        public TeamArgs()
        {
        }
    }

    public sealed class TeamState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the team can modify account settings.
        /// </summary>
        [Input("accountManageAccountSettings")]
        public Input<bool>? AccountManageAccountSettings { get; set; }

        /// <summary>
        /// Whether the team can modify account apikeys.
        /// </summary>
        [Input("accountManageApikeys")]
        public Input<bool>? AccountManageApikeys { get; set; }

        /// <summary>
        /// Whether the team can modify account payment methods.
        /// </summary>
        [Input("accountManagePaymentMethods")]
        public Input<bool>? AccountManagePaymentMethods { get; set; }

        /// <summary>
        /// Whether the team can modify the account plan.
        /// </summary>
        [Input("accountManagePlan")]
        public Input<bool>? AccountManagePlan { get; set; }

        /// <summary>
        /// Whether the team can modify other teams in the account.
        /// </summary>
        [Input("accountManageTeams")]
        public Input<bool>? AccountManageTeams { get; set; }

        /// <summary>
        /// Whether the team can modify account users.
        /// </summary>
        [Input("accountManageUsers")]
        public Input<bool>? AccountManageUsers { get; set; }

        /// <summary>
        /// Whether the team can view activity logs.
        /// </summary>
        [Input("accountViewActivityLog")]
        public Input<bool>? AccountViewActivityLog { get; set; }

        /// <summary>
        /// Whether the team can view invoices.
        /// </summary>
        [Input("accountViewInvoices")]
        public Input<bool>? AccountViewInvoices { get; set; }

        /// <summary>
        /// Whether the team can modify data feeds.
        /// </summary>
        [Input("dataManageDatafeeds")]
        public Input<bool>? DataManageDatafeeds { get; set; }

        /// <summary>
        /// Whether the team can modify data sources.
        /// </summary>
        [Input("dataManageDatasources")]
        public Input<bool>? DataManageDatasources { get; set; }

        /// <summary>
        /// Whether the team can publish to data feeds.
        /// </summary>
        [Input("dataPushToDatafeeds")]
        public Input<bool>? DataPushToDatafeeds { get; set; }

        /// <summary>
        /// Whether the team can manage DHCP.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("dhcpManageDhcp")]
        public Input<bool>? DhcpManageDhcp { get; set; }

        /// <summary>
        /// Whether the team can view DHCP.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("dhcpViewDhcp")]
        public Input<bool>? DhcpViewDhcp { get; set; }

        /// <summary>
        /// Whether the team can modify the accounts zones.
        /// </summary>
        [Input("dnsManageZones")]
        public Input<bool>? DnsManageZones { get; set; }

        /// <summary>
        /// Whether the team can view the accounts zones.
        /// </summary>
        [Input("dnsViewZones")]
        public Input<bool>? DnsViewZones { get; set; }

        /// <summary>
        /// If true, enable the `dns_zones_allow` list, otherwise enable the `dns_zones_deny` list.
        /// </summary>
        [Input("dnsZonesAllowByDefault")]
        public Input<bool>? DnsZonesAllowByDefault { get; set; }

        [Input("dnsZonesAllows")]
        private InputList<string>? _dnsZonesAllows;

        /// <summary>
        /// List of zones that the team may access.
        /// </summary>
        public InputList<string> DnsZonesAllows
        {
            get => _dnsZonesAllows ?? (_dnsZonesAllows = new InputList<string>());
            set => _dnsZonesAllows = value;
        }

        [Input("dnsZonesDenies")]
        private InputList<string>? _dnsZonesDenies;

        /// <summary>
        /// List of zones that the team may not access.
        /// </summary>
        public InputList<string> DnsZonesDenies
        {
            get => _dnsZonesDenies ?? (_dnsZonesDenies = new InputList<string>());
            set => _dnsZonesDenies = value;
        }

        [Input("ipWhitelists")]
        private InputList<Inputs.TeamIpWhitelistGetArgs>? _ipWhitelists;

        /// <summary>
        /// The IP addresses to whitelist for this key.
        /// </summary>
        public InputList<Inputs.TeamIpWhitelistGetArgs> IpWhitelists
        {
            get => _ipWhitelists ?? (_ipWhitelists = new InputList<Inputs.TeamIpWhitelistGetArgs>());
            set => _ipWhitelists = value;
        }

        /// <summary>
        /// Whether the team can manage IPAM.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("ipamManageIpam")]
        public Input<bool>? IpamManageIpam { get; set; }

        /// <summary>
        /// Whether the team can view IPAM.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("ipamViewIpam")]
        public Input<bool>? IpamViewIpam { get; set; }

        /// <summary>
        /// Whether the team can modify monitoring jobs.
        /// </summary>
        [Input("monitoringManageJobs")]
        public Input<bool>? MonitoringManageJobs { get; set; }

        /// <summary>
        /// Whether the team can modify notification lists.
        /// </summary>
        [Input("monitoringManageLists")]
        public Input<bool>? MonitoringManageLists { get; set; }

        /// <summary>
        /// Whether the team can view monitoring jobs.
        /// </summary>
        [Input("monitoringViewJobs")]
        public Input<bool>? MonitoringViewJobs { get; set; }

        /// <summary>
        /// The free form name of the team.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the team can manage global active directory.
        /// Only relevant for the DDI product.
        /// </summary>
        [Input("securityManageActiveDirectory")]
        public Input<bool>? SecurityManageActiveDirectory { get; set; }

        /// <summary>
        /// Whether the team can manage global two factor authentication.
        /// </summary>
        [Input("securityManageGlobal2fa")]
        public Input<bool>? SecurityManageGlobal2fa { get; set; }

        public TeamState()
        {
        }
    }
}
