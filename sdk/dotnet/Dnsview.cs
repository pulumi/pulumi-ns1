// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ns1
{
    [Ns1ResourceType("ns1:index/dnsview:Dnsview")]
    public partial class Dnsview : global::Pulumi.CustomResource
    {
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networks")]
        public Output<ImmutableArray<int>> Networks { get; private set; } = null!;

        [Output("preference")]
        public Output<int> Preference { get; private set; } = null!;

        [Output("readAcls")]
        public Output<ImmutableArray<string>> ReadAcls { get; private set; } = null!;

        [Output("updateAcls")]
        public Output<ImmutableArray<string>> UpdateAcls { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<int> UpdatedAt { get; private set; } = null!;

        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a Dnsview resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dnsview(string name, DnsviewArgs? args = null, CustomResourceOptions? options = null)
            : base("ns1:index/dnsview:Dnsview", name, args ?? new DnsviewArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dnsview(string name, Input<string> id, DnsviewState? state = null, CustomResourceOptions? options = null)
            : base("ns1:index/dnsview:Dnsview", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dnsview resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dnsview Get(string name, Input<string> id, DnsviewState? state = null, CustomResourceOptions? options = null)
        {
            return new Dnsview(name, id, state, options);
        }
    }

    public sealed class DnsviewArgs : global::Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<int>? _networks;
        public InputList<int> Networks
        {
            get => _networks ?? (_networks = new InputList<int>());
            set => _networks = value;
        }

        [Input("preference")]
        public Input<int>? Preference { get; set; }

        [Input("readAcls")]
        private InputList<string>? _readAcls;
        public InputList<string> ReadAcls
        {
            get => _readAcls ?? (_readAcls = new InputList<string>());
            set => _readAcls = value;
        }

        [Input("updateAcls")]
        private InputList<string>? _updateAcls;
        public InputList<string> UpdateAcls
        {
            get => _updateAcls ?? (_updateAcls = new InputList<string>());
            set => _updateAcls = value;
        }

        [Input("zones")]
        private InputList<string>? _zones;
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public DnsviewArgs()
        {
        }
        public static new DnsviewArgs Empty => new DnsviewArgs();
    }

    public sealed class DnsviewState : global::Pulumi.ResourceArgs
    {
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<int>? _networks;
        public InputList<int> Networks
        {
            get => _networks ?? (_networks = new InputList<int>());
            set => _networks = value;
        }

        [Input("preference")]
        public Input<int>? Preference { get; set; }

        [Input("readAcls")]
        private InputList<string>? _readAcls;
        public InputList<string> ReadAcls
        {
            get => _readAcls ?? (_readAcls = new InputList<string>());
            set => _readAcls = value;
        }

        [Input("updateAcls")]
        private InputList<string>? _updateAcls;
        public InputList<string> UpdateAcls
        {
            get => _updateAcls ?? (_updateAcls = new InputList<string>());
            set => _updateAcls = value;
        }

        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public DnsviewState()
        {
        }
        public static new DnsviewState Empty => new DnsviewState();
    }
}
