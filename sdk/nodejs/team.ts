// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a NS1 Team resource. This can be used to create, modify, and delete
 * teams. The credentials used must have the `manageTeams` permission set.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ns1 from "@pulumi/ns1";
 *
 * // Create a new NS1 Team
 * const example = new ns1.Team("example", {
 *     name: "Example team",
 *     ipWhitelists: [
 *         {
 *             name: "whitelist-1",
 *             values: [
 *                 "1.1.1.1",
 *                 "2.2.2.2",
 *             ],
 *         },
 *         {
 *             name: "whitelist-2",
 *             values: [
 *                 "3.3.3.3",
 *                 "4.4.4.4",
 *             ],
 *         },
 *     ],
 *     dnsViewZones: false,
 *     accountManageUsers: false,
 * });
 * // Another team
 * const example2 = new ns1.Team("example2", {
 *     name: "another team",
 *     dnsViewZones: true,
 *     dnsZonesAllowByDefault: true,
 *     dnsZonesAllows: ["mytest.zone"],
 *     dnsZonesDenies: ["myother.zone"],
 *     dnsRecordsAllows: [{
 *         domain: "terraform.example.io",
 *         includeSubdomains: false,
 *         zone: "example.io",
 *         type: "A",
 *     }],
 *     dataManageDatasources: true,
 * });
 * ```
 *
 * ## NS1 Documentation
 *
 * [Team Api Docs](https://ns1.com/api#team)
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import ns1:index/team:Team <name> <team_id>`
 * ```
 */
export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamState, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/team:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    /**
     * Whether the team can modify account settings.
     */
    declare public readonly accountManageAccountSettings: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can modify account apikeys.
     */
    declare public readonly accountManageApikeys: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can manage ip whitelist.
     */
    declare public readonly accountManageIpWhitelist: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can modify account payment methods.
     */
    declare public readonly accountManagePaymentMethods: pulumi.Output<boolean | undefined>;
    /**
     * No longer in use.
     *
     * @deprecated obsolete, should no longer be used
     */
    declare public readonly accountManagePlan: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can modify other teams in the account.
     */
    declare public readonly accountManageTeams: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can modify account users.
     */
    declare public readonly accountManageUsers: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can view activity logs.
     */
    declare public readonly accountViewActivityLog: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can view invoices.
     */
    declare public readonly accountViewInvoices: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can modify data feeds.
     */
    declare public readonly dataManageDatafeeds: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can modify data sources.
     */
    declare public readonly dataManageDatasources: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can publish to data feeds.
     */
    declare public readonly dataPushToDatafeeds: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can modify the accounts zones.
     */
    declare public readonly dnsManageZones: pulumi.Output<boolean | undefined>;
    /**
     * List of records that the team may access.
     */
    declare public readonly dnsRecordsAllows: pulumi.Output<outputs.TeamDnsRecordsAllow[] | undefined>;
    /**
     * List of records that the team may not access.
     */
    declare public readonly dnsRecordsDenies: pulumi.Output<outputs.TeamDnsRecordsDeny[] | undefined>;
    /**
     * Whether the team can view the accounts zones.
     */
    declare public readonly dnsViewZones: pulumi.Output<boolean | undefined>;
    /**
     * If true, enable the `dnsZonesAllow` list, otherwise enable the `dnsZonesDeny` list.
     */
    declare public readonly dnsZonesAllowByDefault: pulumi.Output<boolean | undefined>;
    /**
     * List of zones that the team may access.
     */
    declare public readonly dnsZonesAllows: pulumi.Output<string[] | undefined>;
    /**
     * List of zones that the team may not access.
     */
    declare public readonly dnsZonesDenies: pulumi.Output<string[] | undefined>;
    /**
     * Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each "allow" list.
     */
    declare public readonly ipWhitelists: pulumi.Output<outputs.TeamIpWhitelist[] | undefined>;
    /**
     * Whether the user can create monitoring jobs when manageJobs is not set to true.
     */
    declare public readonly monitoringCreateJobs: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can delete monitoring jobs when manageJobs is not set to true.
     */
    declare public readonly monitoringDeleteJobs: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can create, update, and delete monitoring jobs.
     */
    declare public readonly monitoringManageJobs: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can modify notification lists.
     */
    declare public readonly monitoringManageLists: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can update monitoring jobs when manageJobs is not set to true.
     */
    declare public readonly monitoringUpdateJobs: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can view monitoring jobs.
     */
    declare public readonly monitoringViewJobs: pulumi.Output<boolean | undefined>;
    /**
     * The free form name of the team.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Whether the user can manage redirects.
     * Only relevant for the DDI product.
     */
    declare public readonly redirectsManageRedirects: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can manage global active directory.
     */
    declare public readonly securityManageActiveDirectory: pulumi.Output<boolean | undefined>;
    /**
     * Whether the team can manage global two factor authentication.
     */
    declare public readonly securityManageGlobal2fa: pulumi.Output<boolean | undefined>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamArgs | TeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamState | undefined;
            resourceInputs["accountManageAccountSettings"] = state?.accountManageAccountSettings;
            resourceInputs["accountManageApikeys"] = state?.accountManageApikeys;
            resourceInputs["accountManageIpWhitelist"] = state?.accountManageIpWhitelist;
            resourceInputs["accountManagePaymentMethods"] = state?.accountManagePaymentMethods;
            resourceInputs["accountManagePlan"] = state?.accountManagePlan;
            resourceInputs["accountManageTeams"] = state?.accountManageTeams;
            resourceInputs["accountManageUsers"] = state?.accountManageUsers;
            resourceInputs["accountViewActivityLog"] = state?.accountViewActivityLog;
            resourceInputs["accountViewInvoices"] = state?.accountViewInvoices;
            resourceInputs["dataManageDatafeeds"] = state?.dataManageDatafeeds;
            resourceInputs["dataManageDatasources"] = state?.dataManageDatasources;
            resourceInputs["dataPushToDatafeeds"] = state?.dataPushToDatafeeds;
            resourceInputs["dnsManageZones"] = state?.dnsManageZones;
            resourceInputs["dnsRecordsAllows"] = state?.dnsRecordsAllows;
            resourceInputs["dnsRecordsDenies"] = state?.dnsRecordsDenies;
            resourceInputs["dnsViewZones"] = state?.dnsViewZones;
            resourceInputs["dnsZonesAllowByDefault"] = state?.dnsZonesAllowByDefault;
            resourceInputs["dnsZonesAllows"] = state?.dnsZonesAllows;
            resourceInputs["dnsZonesDenies"] = state?.dnsZonesDenies;
            resourceInputs["ipWhitelists"] = state?.ipWhitelists;
            resourceInputs["monitoringCreateJobs"] = state?.monitoringCreateJobs;
            resourceInputs["monitoringDeleteJobs"] = state?.monitoringDeleteJobs;
            resourceInputs["monitoringManageJobs"] = state?.monitoringManageJobs;
            resourceInputs["monitoringManageLists"] = state?.monitoringManageLists;
            resourceInputs["monitoringUpdateJobs"] = state?.monitoringUpdateJobs;
            resourceInputs["monitoringViewJobs"] = state?.monitoringViewJobs;
            resourceInputs["name"] = state?.name;
            resourceInputs["redirectsManageRedirects"] = state?.redirectsManageRedirects;
            resourceInputs["securityManageActiveDirectory"] = state?.securityManageActiveDirectory;
            resourceInputs["securityManageGlobal2fa"] = state?.securityManageGlobal2fa;
        } else {
            const args = argsOrState as TeamArgs | undefined;
            resourceInputs["accountManageAccountSettings"] = args?.accountManageAccountSettings;
            resourceInputs["accountManageApikeys"] = args?.accountManageApikeys;
            resourceInputs["accountManageIpWhitelist"] = args?.accountManageIpWhitelist;
            resourceInputs["accountManagePaymentMethods"] = args?.accountManagePaymentMethods;
            resourceInputs["accountManagePlan"] = args?.accountManagePlan;
            resourceInputs["accountManageTeams"] = args?.accountManageTeams;
            resourceInputs["accountManageUsers"] = args?.accountManageUsers;
            resourceInputs["accountViewActivityLog"] = args?.accountViewActivityLog;
            resourceInputs["accountViewInvoices"] = args?.accountViewInvoices;
            resourceInputs["dataManageDatafeeds"] = args?.dataManageDatafeeds;
            resourceInputs["dataManageDatasources"] = args?.dataManageDatasources;
            resourceInputs["dataPushToDatafeeds"] = args?.dataPushToDatafeeds;
            resourceInputs["dnsManageZones"] = args?.dnsManageZones;
            resourceInputs["dnsRecordsAllows"] = args?.dnsRecordsAllows;
            resourceInputs["dnsRecordsDenies"] = args?.dnsRecordsDenies;
            resourceInputs["dnsViewZones"] = args?.dnsViewZones;
            resourceInputs["dnsZonesAllowByDefault"] = args?.dnsZonesAllowByDefault;
            resourceInputs["dnsZonesAllows"] = args?.dnsZonesAllows;
            resourceInputs["dnsZonesDenies"] = args?.dnsZonesDenies;
            resourceInputs["ipWhitelists"] = args?.ipWhitelists;
            resourceInputs["monitoringCreateJobs"] = args?.monitoringCreateJobs;
            resourceInputs["monitoringDeleteJobs"] = args?.monitoringDeleteJobs;
            resourceInputs["monitoringManageJobs"] = args?.monitoringManageJobs;
            resourceInputs["monitoringManageLists"] = args?.monitoringManageLists;
            resourceInputs["monitoringUpdateJobs"] = args?.monitoringUpdateJobs;
            resourceInputs["monitoringViewJobs"] = args?.monitoringViewJobs;
            resourceInputs["name"] = args?.name;
            resourceInputs["redirectsManageRedirects"] = args?.redirectsManageRedirects;
            resourceInputs["securityManageActiveDirectory"] = args?.securityManageActiveDirectory;
            resourceInputs["securityManageGlobal2fa"] = args?.securityManageGlobal2fa;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Team.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Team resources.
 */
export interface TeamState {
    /**
     * Whether the team can modify account settings.
     */
    accountManageAccountSettings?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify account apikeys.
     */
    accountManageApikeys?: pulumi.Input<boolean>;
    /**
     * Whether the team can manage ip whitelist.
     */
    accountManageIpWhitelist?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify account payment methods.
     */
    accountManagePaymentMethods?: pulumi.Input<boolean>;
    /**
     * No longer in use.
     *
     * @deprecated obsolete, should no longer be used
     */
    accountManagePlan?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify other teams in the account.
     */
    accountManageTeams?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify account users.
     */
    accountManageUsers?: pulumi.Input<boolean>;
    /**
     * Whether the team can view activity logs.
     */
    accountViewActivityLog?: pulumi.Input<boolean>;
    /**
     * Whether the team can view invoices.
     */
    accountViewInvoices?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify data feeds.
     */
    dataManageDatafeeds?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify data sources.
     */
    dataManageDatasources?: pulumi.Input<boolean>;
    /**
     * Whether the team can publish to data feeds.
     */
    dataPushToDatafeeds?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify the accounts zones.
     */
    dnsManageZones?: pulumi.Input<boolean>;
    /**
     * List of records that the team may access.
     */
    dnsRecordsAllows?: pulumi.Input<pulumi.Input<inputs.TeamDnsRecordsAllow>[]>;
    /**
     * List of records that the team may not access.
     */
    dnsRecordsDenies?: pulumi.Input<pulumi.Input<inputs.TeamDnsRecordsDeny>[]>;
    /**
     * Whether the team can view the accounts zones.
     */
    dnsViewZones?: pulumi.Input<boolean>;
    /**
     * If true, enable the `dnsZonesAllow` list, otherwise enable the `dnsZonesDeny` list.
     */
    dnsZonesAllowByDefault?: pulumi.Input<boolean>;
    /**
     * List of zones that the team may access.
     */
    dnsZonesAllows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of zones that the team may not access.
     */
    dnsZonesDenies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each "allow" list.
     */
    ipWhitelists?: pulumi.Input<pulumi.Input<inputs.TeamIpWhitelist>[]>;
    /**
     * Whether the user can create monitoring jobs when manageJobs is not set to true.
     */
    monitoringCreateJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can delete monitoring jobs when manageJobs is not set to true.
     */
    monitoringDeleteJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can create, update, and delete monitoring jobs.
     */
    monitoringManageJobs?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify notification lists.
     */
    monitoringManageLists?: pulumi.Input<boolean>;
    /**
     * Whether the user can update monitoring jobs when manageJobs is not set to true.
     */
    monitoringUpdateJobs?: pulumi.Input<boolean>;
    /**
     * Whether the team can view monitoring jobs.
     */
    monitoringViewJobs?: pulumi.Input<boolean>;
    /**
     * The free form name of the team.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the user can manage redirects.
     * Only relevant for the DDI product.
     */
    redirectsManageRedirects?: pulumi.Input<boolean>;
    /**
     * Whether the team can manage global active directory.
     */
    securityManageActiveDirectory?: pulumi.Input<boolean>;
    /**
     * Whether the team can manage global two factor authentication.
     */
    securityManageGlobal2fa?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    /**
     * Whether the team can modify account settings.
     */
    accountManageAccountSettings?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify account apikeys.
     */
    accountManageApikeys?: pulumi.Input<boolean>;
    /**
     * Whether the team can manage ip whitelist.
     */
    accountManageIpWhitelist?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify account payment methods.
     */
    accountManagePaymentMethods?: pulumi.Input<boolean>;
    /**
     * No longer in use.
     *
     * @deprecated obsolete, should no longer be used
     */
    accountManagePlan?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify other teams in the account.
     */
    accountManageTeams?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify account users.
     */
    accountManageUsers?: pulumi.Input<boolean>;
    /**
     * Whether the team can view activity logs.
     */
    accountViewActivityLog?: pulumi.Input<boolean>;
    /**
     * Whether the team can view invoices.
     */
    accountViewInvoices?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify data feeds.
     */
    dataManageDatafeeds?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify data sources.
     */
    dataManageDatasources?: pulumi.Input<boolean>;
    /**
     * Whether the team can publish to data feeds.
     */
    dataPushToDatafeeds?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify the accounts zones.
     */
    dnsManageZones?: pulumi.Input<boolean>;
    /**
     * List of records that the team may access.
     */
    dnsRecordsAllows?: pulumi.Input<pulumi.Input<inputs.TeamDnsRecordsAllow>[]>;
    /**
     * List of records that the team may not access.
     */
    dnsRecordsDenies?: pulumi.Input<pulumi.Input<inputs.TeamDnsRecordsDeny>[]>;
    /**
     * Whether the team can view the accounts zones.
     */
    dnsViewZones?: pulumi.Input<boolean>;
    /**
     * If true, enable the `dnsZonesAllow` list, otherwise enable the `dnsZonesDeny` list.
     */
    dnsZonesAllowByDefault?: pulumi.Input<boolean>;
    /**
     * List of zones that the team may access.
     */
    dnsZonesAllows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of zones that the team may not access.
     */
    dnsZonesDenies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Array of IP addresses objects to chich to grant the team access. Each object includes a **name** (string), and **values** (array of strings) associated to each "allow" list.
     */
    ipWhitelists?: pulumi.Input<pulumi.Input<inputs.TeamIpWhitelist>[]>;
    /**
     * Whether the user can create monitoring jobs when manageJobs is not set to true.
     */
    monitoringCreateJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can delete monitoring jobs when manageJobs is not set to true.
     */
    monitoringDeleteJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can create, update, and delete monitoring jobs.
     */
    monitoringManageJobs?: pulumi.Input<boolean>;
    /**
     * Whether the team can modify notification lists.
     */
    monitoringManageLists?: pulumi.Input<boolean>;
    /**
     * Whether the user can update monitoring jobs when manageJobs is not set to true.
     */
    monitoringUpdateJobs?: pulumi.Input<boolean>;
    /**
     * Whether the team can view monitoring jobs.
     */
    monitoringViewJobs?: pulumi.Input<boolean>;
    /**
     * The free form name of the team.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the user can manage redirects.
     * Only relevant for the DDI product.
     */
    redirectsManageRedirects?: pulumi.Input<boolean>;
    /**
     * Whether the team can manage global active directory.
     */
    securityManageActiveDirectory?: pulumi.Input<boolean>;
    /**
     * Whether the team can manage global two factor authentication.
     */
    securityManageGlobal2fa?: pulumi.Input<boolean>;
}
