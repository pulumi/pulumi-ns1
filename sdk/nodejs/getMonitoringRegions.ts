// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides details of all available monitoring regions.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ns1 from "@pulumi/ns1";
 *
 * // Get details of all available monitoring regions.
 * const example = ns1.getMonitoringRegions({});
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMonitoringRegions(args?: GetMonitoringRegionsArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringRegionsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ns1:index/getMonitoringRegions:getMonitoringRegions", {
        "regions": args.regions,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitoringRegions.
 */
export interface GetMonitoringRegionsArgs {
    /**
     * A set of the available monitoring regions. Regions is
     * documented below.
     */
    regions?: inputs.GetMonitoringRegionsRegion[];
}

/**
 * A collection of values returned by getMonitoringRegions.
 */
export interface GetMonitoringRegionsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of the available monitoring regions. Regions is
     * documented below.
     */
    readonly regions?: outputs.GetMonitoringRegionsRegion[];
}
/**
 * Provides details of all available monitoring regions.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ns1 from "@pulumi/ns1";
 *
 * // Get details of all available monitoring regions.
 * const example = ns1.getMonitoringRegions({});
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMonitoringRegionsOutput(args?: GetMonitoringRegionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitoringRegionsResult> {
    return pulumi.output(args).apply((a: any) => getMonitoringRegions(a, opts))
}

/**
 * A collection of arguments for invoking getMonitoringRegions.
 */
export interface GetMonitoringRegionsOutputArgs {
    /**
     * A set of the available monitoring regions. Regions is
     * documented below.
     */
    regions?: pulumi.Input<pulumi.Input<inputs.GetMonitoringRegionsRegionArgs>[]>;
}
