// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * List of additional IPv4 addresses for the primary
     * zone. Conflicts with `secondaries`.
     */
    public readonly additionalPrimaries!: pulumi.Output<string[] | undefined>;
    public readonly autogenerateNsRecord!: pulumi.Output<boolean | undefined>;
    /**
     * (Computed) Authoritative Name Servers.
     */
    public /*out*/ readonly dnsServers!: pulumi.Output<string>;
    /**
     * Whether or not DNSSEC is enabled for the zone.
     * Note that DNSSEC must be enabled on the account by support for this to be set
     * to `true`.
     */
    public readonly dnssec!: pulumi.Output<boolean>;
    /**
     * The SOA Expiry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    public readonly expiry!: pulumi.Output<number>;
    /**
     * (Computed) The SOA Hostmaster.
     */
    public /*out*/ readonly hostmaster!: pulumi.Output<string>;
    /**
     * The target zone(domain name) to link to.
     */
    public readonly link!: pulumi.Output<string | undefined>;
    /**
     * - List of network IDs (`int`) for which the zone
     * should be made available. Default is network 0, the primary NSONE Global
     * Network. Normally, you should not have to worry about this.
     */
    public readonly networks!: pulumi.Output<number[]>;
    /**
     * The SOA NX TTL. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    public readonly nxTtl!: pulumi.Output<number>;
    /**
     * The primary zones' IPv4 address. This makes the zone a
     * secondary. Conflicts with `secondaries`.
     */
    public readonly primary!: pulumi.Output<string | undefined>;
    /**
     * The SOA Refresh. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    public readonly refresh!: pulumi.Output<number>;
    /**
     * The SOA Retry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    public readonly retry!: pulumi.Output<number>;
    /**
     * List of secondary servers. This makes the zone a
     * primary. Conflicts with `primary` and `additionalPrimaries`.
     * Secondaries is documented below.
     */
    public readonly secondaries!: pulumi.Output<outputs.ZoneSecondary[] | undefined>;
    /**
     * The SOA TTL.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * The domain name of the zone.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ZoneState | undefined;
            inputs["additionalPrimaries"] = state ? state.additionalPrimaries : undefined;
            inputs["autogenerateNsRecord"] = state ? state.autogenerateNsRecord : undefined;
            inputs["dnsServers"] = state ? state.dnsServers : undefined;
            inputs["dnssec"] = state ? state.dnssec : undefined;
            inputs["expiry"] = state ? state.expiry : undefined;
            inputs["hostmaster"] = state ? state.hostmaster : undefined;
            inputs["link"] = state ? state.link : undefined;
            inputs["networks"] = state ? state.networks : undefined;
            inputs["nxTtl"] = state ? state.nxTtl : undefined;
            inputs["primary"] = state ? state.primary : undefined;
            inputs["refresh"] = state ? state.refresh : undefined;
            inputs["retry"] = state ? state.retry : undefined;
            inputs["secondaries"] = state ? state.secondaries : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if (!args || args.zone === undefined) {
                throw new Error("Missing required property 'zone'");
            }
            inputs["additionalPrimaries"] = args ? args.additionalPrimaries : undefined;
            inputs["autogenerateNsRecord"] = args ? args.autogenerateNsRecord : undefined;
            inputs["dnssec"] = args ? args.dnssec : undefined;
            inputs["expiry"] = args ? args.expiry : undefined;
            inputs["link"] = args ? args.link : undefined;
            inputs["networks"] = args ? args.networks : undefined;
            inputs["nxTtl"] = args ? args.nxTtl : undefined;
            inputs["primary"] = args ? args.primary : undefined;
            inputs["refresh"] = args ? args.refresh : undefined;
            inputs["retry"] = args ? args.retry : undefined;
            inputs["secondaries"] = args ? args.secondaries : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["dnsServers"] = undefined /*out*/;
            inputs["hostmaster"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Zone.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * List of additional IPv4 addresses for the primary
     * zone. Conflicts with `secondaries`.
     */
    readonly additionalPrimaries?: pulumi.Input<pulumi.Input<string>[]>;
    readonly autogenerateNsRecord?: pulumi.Input<boolean>;
    /**
     * (Computed) Authoritative Name Servers.
     */
    readonly dnsServers?: pulumi.Input<string>;
    /**
     * Whether or not DNSSEC is enabled for the zone.
     * Note that DNSSEC must be enabled on the account by support for this to be set
     * to `true`.
     */
    readonly dnssec?: pulumi.Input<boolean>;
    /**
     * The SOA Expiry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    readonly expiry?: pulumi.Input<number>;
    /**
     * (Computed) The SOA Hostmaster.
     */
    readonly hostmaster?: pulumi.Input<string>;
    /**
     * The target zone(domain name) to link to.
     */
    readonly link?: pulumi.Input<string>;
    /**
     * - List of network IDs (`int`) for which the zone
     * should be made available. Default is network 0, the primary NSONE Global
     * Network. Normally, you should not have to worry about this.
     */
    readonly networks?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The SOA NX TTL. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    readonly nxTtl?: pulumi.Input<number>;
    /**
     * The primary zones' IPv4 address. This makes the zone a
     * secondary. Conflicts with `secondaries`.
     */
    readonly primary?: pulumi.Input<string>;
    /**
     * The SOA Refresh. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    readonly refresh?: pulumi.Input<number>;
    /**
     * The SOA Retry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    readonly retry?: pulumi.Input<number>;
    /**
     * List of secondary servers. This makes the zone a
     * primary. Conflicts with `primary` and `additionalPrimaries`.
     * Secondaries is documented below.
     */
    readonly secondaries?: pulumi.Input<pulumi.Input<inputs.ZoneSecondary>[]>;
    /**
     * The SOA TTL.
     */
    readonly ttl?: pulumi.Input<number>;
    /**
     * The domain name of the zone.
     */
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * List of additional IPv4 addresses for the primary
     * zone. Conflicts with `secondaries`.
     */
    readonly additionalPrimaries?: pulumi.Input<pulumi.Input<string>[]>;
    readonly autogenerateNsRecord?: pulumi.Input<boolean>;
    /**
     * Whether or not DNSSEC is enabled for the zone.
     * Note that DNSSEC must be enabled on the account by support for this to be set
     * to `true`.
     */
    readonly dnssec?: pulumi.Input<boolean>;
    /**
     * The SOA Expiry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    readonly expiry?: pulumi.Input<number>;
    /**
     * The target zone(domain name) to link to.
     */
    readonly link?: pulumi.Input<string>;
    /**
     * - List of network IDs (`int`) for which the zone
     * should be made available. Default is network 0, the primary NSONE Global
     * Network. Normally, you should not have to worry about this.
     */
    readonly networks?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The SOA NX TTL. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    readonly nxTtl?: pulumi.Input<number>;
    /**
     * The primary zones' IPv4 address. This makes the zone a
     * secondary. Conflicts with `secondaries`.
     */
    readonly primary?: pulumi.Input<string>;
    /**
     * The SOA Refresh. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    readonly refresh?: pulumi.Input<number>;
    /**
     * The SOA Retry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    readonly retry?: pulumi.Input<number>;
    /**
     * List of secondary servers. This makes the zone a
     * primary. Conflicts with `primary` and `additionalPrimaries`.
     * Secondaries is documented below.
     */
    readonly secondaries?: pulumi.Input<pulumi.Input<inputs.ZoneSecondary>[]>;
    /**
     * The SOA TTL.
     */
    readonly ttl?: pulumi.Input<number>;
    /**
     * The domain name of the zone.
     */
    readonly zone: pulumi.Input<string>;
}
