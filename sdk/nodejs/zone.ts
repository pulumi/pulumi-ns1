// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * ```sh
 *  $ pulumi import ns1:index/zone:Zone <name> <zone>`
 * ```
 *
 *  So for the example above
 *
 * ```sh
 *  $ pulumi import ns1:index/zone:Zone example terraform.example.io`
 * ```
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    public readonly additionalPorts!: pulumi.Output<number[] | undefined>;
    /**
     * List of additional IPv4 addresses for the primary
     * zone. Conflicts with `secondaries`.
     */
    public readonly additionalPrimaries!: pulumi.Output<string[] | undefined>;
    public readonly autogenerateNsRecord!: pulumi.Output<boolean | undefined>;
    /**
     * (Computed) Authoritative Name Servers.
     */
    public /*out*/ readonly dnsServers!: pulumi.Output<string>;
    /**
     * Whether or not DNSSEC is enabled for the zone.
     * Note that DNSSEC must be enabled on the account by support for this to be set
     * to `true`.
     */
    public readonly dnssec!: pulumi.Output<boolean>;
    /**
     * The SOA Expiry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    public readonly expiry!: pulumi.Output<number>;
    /**
     * (Computed) The SOA Hostmaster.
     */
    public readonly hostmaster!: pulumi.Output<string>;
    /**
     * The target zone(domain name) to link to.
     */
    public readonly link!: pulumi.Output<string | undefined>;
    /**
     * List of network IDs for which the zone is
     * available. If no network is provided, the zone will be created in network 0,
     * the primary NS1 Global Network.
     */
    public readonly networks!: pulumi.Output<number[]>;
    /**
     * The SOA NX TTL. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    public readonly nxTtl!: pulumi.Output<number>;
    /**
     * The primary zones' IPv4 address. This makes the zone a
     * secondary. Conflicts with `secondaries`.
     */
    public readonly primary!: pulumi.Output<string | undefined>;
    public readonly primaryPort!: pulumi.Output<number>;
    /**
     * The SOA Refresh. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    public readonly refresh!: pulumi.Output<number>;
    /**
     * The SOA Retry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    public readonly retry!: pulumi.Output<number>;
    /**
     * List of secondary servers. This makes the zone a
     * primary. Conflicts with `primary` and `additionalPrimaries`.
     * Secondaries is documented below.
     */
    public readonly secondaries!: pulumi.Output<outputs.ZoneSecondary[] | undefined>;
    /**
     * TSIG is documented below
     */
    public readonly tsig!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The SOA TTL.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * The domain name of the zone.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["additionalPorts"] = state ? state.additionalPorts : undefined;
            resourceInputs["additionalPrimaries"] = state ? state.additionalPrimaries : undefined;
            resourceInputs["autogenerateNsRecord"] = state ? state.autogenerateNsRecord : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["dnssec"] = state ? state.dnssec : undefined;
            resourceInputs["expiry"] = state ? state.expiry : undefined;
            resourceInputs["hostmaster"] = state ? state.hostmaster : undefined;
            resourceInputs["link"] = state ? state.link : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nxTtl"] = state ? state.nxTtl : undefined;
            resourceInputs["primary"] = state ? state.primary : undefined;
            resourceInputs["primaryPort"] = state ? state.primaryPort : undefined;
            resourceInputs["refresh"] = state ? state.refresh : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["secondaries"] = state ? state.secondaries : undefined;
            resourceInputs["tsig"] = state ? state.tsig : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["additionalPorts"] = args ? args.additionalPorts : undefined;
            resourceInputs["additionalPrimaries"] = args ? args.additionalPrimaries : undefined;
            resourceInputs["autogenerateNsRecord"] = args ? args.autogenerateNsRecord : undefined;
            resourceInputs["dnssec"] = args ? args.dnssec : undefined;
            resourceInputs["expiry"] = args ? args.expiry : undefined;
            resourceInputs["hostmaster"] = args ? args.hostmaster : undefined;
            resourceInputs["link"] = args ? args.link : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["nxTtl"] = args ? args.nxTtl : undefined;
            resourceInputs["primary"] = args ? args.primary : undefined;
            resourceInputs["primaryPort"] = args ? args.primaryPort : undefined;
            resourceInputs["refresh"] = args ? args.refresh : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["secondaries"] = args ? args.secondaries : undefined;
            resourceInputs["tsig"] = args ? args.tsig : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["dnsServers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    additionalPorts?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of additional IPv4 addresses for the primary
     * zone. Conflicts with `secondaries`.
     */
    additionalPrimaries?: pulumi.Input<pulumi.Input<string>[]>;
    autogenerateNsRecord?: pulumi.Input<boolean>;
    /**
     * (Computed) Authoritative Name Servers.
     */
    dnsServers?: pulumi.Input<string>;
    /**
     * Whether or not DNSSEC is enabled for the zone.
     * Note that DNSSEC must be enabled on the account by support for this to be set
     * to `true`.
     */
    dnssec?: pulumi.Input<boolean>;
    /**
     * The SOA Expiry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    expiry?: pulumi.Input<number>;
    /**
     * (Computed) The SOA Hostmaster.
     */
    hostmaster?: pulumi.Input<string>;
    /**
     * The target zone(domain name) to link to.
     */
    link?: pulumi.Input<string>;
    /**
     * List of network IDs for which the zone is
     * available. If no network is provided, the zone will be created in network 0,
     * the primary NS1 Global Network.
     */
    networks?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The SOA NX TTL. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    nxTtl?: pulumi.Input<number>;
    /**
     * The primary zones' IPv4 address. This makes the zone a
     * secondary. Conflicts with `secondaries`.
     */
    primary?: pulumi.Input<string>;
    primaryPort?: pulumi.Input<number>;
    /**
     * The SOA Refresh. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    refresh?: pulumi.Input<number>;
    /**
     * The SOA Retry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    retry?: pulumi.Input<number>;
    /**
     * List of secondary servers. This makes the zone a
     * primary. Conflicts with `primary` and `additionalPrimaries`.
     * Secondaries is documented below.
     */
    secondaries?: pulumi.Input<pulumi.Input<inputs.ZoneSecondary>[]>;
    /**
     * TSIG is documented below
     */
    tsig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The SOA TTL.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The domain name of the zone.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    additionalPorts?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of additional IPv4 addresses for the primary
     * zone. Conflicts with `secondaries`.
     */
    additionalPrimaries?: pulumi.Input<pulumi.Input<string>[]>;
    autogenerateNsRecord?: pulumi.Input<boolean>;
    /**
     * Whether or not DNSSEC is enabled for the zone.
     * Note that DNSSEC must be enabled on the account by support for this to be set
     * to `true`.
     */
    dnssec?: pulumi.Input<boolean>;
    /**
     * The SOA Expiry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    expiry?: pulumi.Input<number>;
    /**
     * (Computed) The SOA Hostmaster.
     */
    hostmaster?: pulumi.Input<string>;
    /**
     * The target zone(domain name) to link to.
     */
    link?: pulumi.Input<string>;
    /**
     * List of network IDs for which the zone is
     * available. If no network is provided, the zone will be created in network 0,
     * the primary NS1 Global Network.
     */
    networks?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The SOA NX TTL. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    nxTtl?: pulumi.Input<number>;
    /**
     * The primary zones' IPv4 address. This makes the zone a
     * secondary. Conflicts with `secondaries`.
     */
    primary?: pulumi.Input<string>;
    primaryPort?: pulumi.Input<number>;
    /**
     * The SOA Refresh. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    refresh?: pulumi.Input<number>;
    /**
     * The SOA Retry. Conflicts with `primary` and
     * `additionalPrimaries` (default must be accepted).
     */
    retry?: pulumi.Input<number>;
    /**
     * List of secondary servers. This makes the zone a
     * primary. Conflicts with `primary` and `additionalPrimaries`.
     * Secondaries is documented below.
     */
    secondaries?: pulumi.Input<pulumi.Input<inputs.ZoneSecondary>[]>;
    /**
     * TSIG is documented below
     */
    tsig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The SOA TTL.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The domain name of the zone.
     */
    zone: pulumi.Input<string>;
}
