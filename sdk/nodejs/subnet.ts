// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    public readonly children!: pulumi.Output<number>;
    public readonly desc!: pulumi.Output<string | undefined>;
    public readonly dhcpScoped!: pulumi.Output<boolean>;
    public readonly freeAddresses!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<number | undefined>;
    public readonly parentId!: pulumi.Output<number>;
    public readonly prefix!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: any}>;
    public readonly totalAddresses!: pulumi.Output<string>;
    public readonly usedAddresses!: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["children"] = state ? state.children : undefined;
            resourceInputs["desc"] = state ? state.desc : undefined;
            resourceInputs["dhcpScoped"] = state ? state.dhcpScoped : undefined;
            resourceInputs["freeAddresses"] = state ? state.freeAddresses : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["totalAddresses"] = state ? state.totalAddresses : undefined;
            resourceInputs["usedAddresses"] = state ? state.usedAddresses : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            resourceInputs["children"] = args ? args.children : undefined;
            resourceInputs["desc"] = args ? args.desc : undefined;
            resourceInputs["dhcpScoped"] = args ? args.dhcpScoped : undefined;
            resourceInputs["freeAddresses"] = args ? args.freeAddresses : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["totalAddresses"] = args ? args.totalAddresses : undefined;
            resourceInputs["usedAddresses"] = args ? args.usedAddresses : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    children?: pulumi.Input<number>;
    desc?: pulumi.Input<string>;
    dhcpScoped?: pulumi.Input<boolean>;
    freeAddresses?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<number>;
    parentId?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
    totalAddresses?: pulumi.Input<string>;
    usedAddresses?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    children?: pulumi.Input<number>;
    desc?: pulumi.Input<string>;
    dhcpScoped?: pulumi.Input<boolean>;
    freeAddresses?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<number>;
    parentId?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
    totalAddresses?: pulumi.Input<string>;
    usedAddresses?: pulumi.Input<string>;
}
