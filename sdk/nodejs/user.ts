// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a NS1 User resource. Creating a user sends an invitation email to the
 * user's email address. This can be used to create, modify, and delete users.
 * The credentials used must have the `manageUsers` permission set.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ns1 from "@pulumi/ns1";
 *
 * const example = new ns1.Team("example", {
 *     name: "Example team",
 *     ipWhitelists: [
 *         "1.1.1.1",
 *         "2.2.2.2",
 *     ],
 *     dnsViewZones: false,
 *     accountManageUsers: false,
 * });
 * const exampleUser = new ns1.User("example", {
 *     name: "Example User",
 *     username: "example_user",
 *     email: "user@example.com",
 *     teams: [example.id],
 *     notify: {
 *         billing: "false",
 *     },
 * });
 * ```
 *
 * ## Permissions
 *
 * A user will inherit permissions from the teams they are assigned to.
 * If a user is assigned to a team and also has individual permissions set on the user, the individual permissions
 * will be overridden by the inherited team permissions.
 * In a future release, setting permissions on a user that is part of a team will be explicitly disabled.
 *
 * When a user is removed from all teams completely, they will inherit whatever permissions they had previously.
 * If a user is removed from all their teams, it will probably be necessary to run `pulumi up` a second time
 * to update the users permissions from their old team permissions to new user-specific permissions.
 *
 * See [this NS1 Help Center article](https://help.ns1.com/hc/en-us/articles/360024409034-Managing-user-permissions) for an overview of user permission settings.
 *
 * ## NS1 Documentation
 *
 * [User Api Docs](https://ns1.com/api#user)
 *
 * [Managing user permissions](https://help.ns1.com/hc/en-us/articles/360024409034-Managing-user-permissions)
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import ns1:index/user:User <name> <username>`
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Whether the user can modify account settings.
     */
    declare public readonly accountManageAccountSettings: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can modify account apikeys.
     */
    declare public readonly accountManageApikeys: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can manage ip whitelist.
     */
    declare public readonly accountManageIpWhitelist: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can modify account payment methods.
     */
    declare public readonly accountManagePaymentMethods: pulumi.Output<boolean | undefined>;
    /**
     * No longer in use.
     *
     * @deprecated obsolete, should no longer be used
     */
    declare public readonly accountManagePlan: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can modify other teams in the account.
     */
    declare public readonly accountManageTeams: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can modify account users.
     */
    declare public readonly accountManageUsers: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can view activity logs.
     */
    declare public readonly accountViewActivityLog: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can view invoices.
     */
    declare public readonly accountViewInvoices: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can modify data feeds.
     */
    declare public readonly dataManageDatafeeds: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can modify data sources.
     */
    declare public readonly dataManageDatasources: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can publish to data feeds.
     */
    declare public readonly dataPushToDatafeeds: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can modify the accounts zones.
     */
    declare public readonly dnsManageZones: pulumi.Output<boolean | undefined>;
    declare public readonly dnsRecordsAllows: pulumi.Output<outputs.UserDnsRecordsAllow[] | undefined>;
    declare public readonly dnsRecordsDenies: pulumi.Output<outputs.UserDnsRecordsDeny[] | undefined>;
    /**
     * Whether the user can view the accounts zones.
     */
    declare public readonly dnsViewZones: pulumi.Output<boolean | undefined>;
    /**
     * If true, enable the `dnsZonesAllow` list, otherwise enable the `dnsZonesDeny` list.
     */
    declare public readonly dnsZonesAllowByDefault: pulumi.Output<boolean | undefined>;
    /**
     * List of zones that the user may access.
     */
    declare public readonly dnsZonesAllows: pulumi.Output<string[] | undefined>;
    /**
     * List of zones that the user may not access.
     */
    declare public readonly dnsZonesDenies: pulumi.Output<string[] | undefined>;
    /**
     * The email address of the user.
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.
     */
    declare public readonly ipWhitelistStrict: pulumi.Output<boolean | undefined>;
    /**
     * Array of IP addresses/networks to which to grant the user access.
     */
    declare public readonly ipWhitelists: pulumi.Output<string[] | undefined>;
    /**
     * Whether the user can create monitoring jobs when manageJobs is not set to true.
     */
    declare public readonly monitoringCreateJobs: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can delete monitoring jobs when manageJobs is not set to true.
     */
    declare public readonly monitoringDeleteJobs: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can create, update, and delete monitoring jobs.
     */
    declare public readonly monitoringManageJobs: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can modify notification lists.
     */
    declare public readonly monitoringManageLists: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can update monitoring jobs when manageJobs is not set to true.
     */
    declare public readonly monitoringUpdateJobs: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can view monitoring jobs.
     */
    declare public readonly monitoringViewJobs: pulumi.Output<boolean | undefined>;
    /**
     * The free form name of the user.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Whether or not to notify the user of specified events. Only `billing` is available currently.
     */
    declare public readonly notify: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Whether the user can manage redirects.
     * Only relevant for the DDI product.
     */
    declare public readonly redirectsManageRedirects: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can manage global active directory.
     */
    declare public readonly securityManageActiveDirectory: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user can manage global two factor authentication.
     */
    declare public readonly securityManageGlobal2fa: pulumi.Output<boolean | undefined>;
    /**
     * The teams that the user belongs to.
     */
    declare public readonly teams: pulumi.Output<string[] | undefined>;
    /**
     * The users login name.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["accountManageAccountSettings"] = state?.accountManageAccountSettings;
            resourceInputs["accountManageApikeys"] = state?.accountManageApikeys;
            resourceInputs["accountManageIpWhitelist"] = state?.accountManageIpWhitelist;
            resourceInputs["accountManagePaymentMethods"] = state?.accountManagePaymentMethods;
            resourceInputs["accountManagePlan"] = state?.accountManagePlan;
            resourceInputs["accountManageTeams"] = state?.accountManageTeams;
            resourceInputs["accountManageUsers"] = state?.accountManageUsers;
            resourceInputs["accountViewActivityLog"] = state?.accountViewActivityLog;
            resourceInputs["accountViewInvoices"] = state?.accountViewInvoices;
            resourceInputs["dataManageDatafeeds"] = state?.dataManageDatafeeds;
            resourceInputs["dataManageDatasources"] = state?.dataManageDatasources;
            resourceInputs["dataPushToDatafeeds"] = state?.dataPushToDatafeeds;
            resourceInputs["dnsManageZones"] = state?.dnsManageZones;
            resourceInputs["dnsRecordsAllows"] = state?.dnsRecordsAllows;
            resourceInputs["dnsRecordsDenies"] = state?.dnsRecordsDenies;
            resourceInputs["dnsViewZones"] = state?.dnsViewZones;
            resourceInputs["dnsZonesAllowByDefault"] = state?.dnsZonesAllowByDefault;
            resourceInputs["dnsZonesAllows"] = state?.dnsZonesAllows;
            resourceInputs["dnsZonesDenies"] = state?.dnsZonesDenies;
            resourceInputs["email"] = state?.email;
            resourceInputs["ipWhitelistStrict"] = state?.ipWhitelistStrict;
            resourceInputs["ipWhitelists"] = state?.ipWhitelists;
            resourceInputs["monitoringCreateJobs"] = state?.monitoringCreateJobs;
            resourceInputs["monitoringDeleteJobs"] = state?.monitoringDeleteJobs;
            resourceInputs["monitoringManageJobs"] = state?.monitoringManageJobs;
            resourceInputs["monitoringManageLists"] = state?.monitoringManageLists;
            resourceInputs["monitoringUpdateJobs"] = state?.monitoringUpdateJobs;
            resourceInputs["monitoringViewJobs"] = state?.monitoringViewJobs;
            resourceInputs["name"] = state?.name;
            resourceInputs["notify"] = state?.notify;
            resourceInputs["redirectsManageRedirects"] = state?.redirectsManageRedirects;
            resourceInputs["securityManageActiveDirectory"] = state?.securityManageActiveDirectory;
            resourceInputs["securityManageGlobal2fa"] = state?.securityManageGlobal2fa;
            resourceInputs["teams"] = state?.teams;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (args?.email === undefined && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["accountManageAccountSettings"] = args?.accountManageAccountSettings;
            resourceInputs["accountManageApikeys"] = args?.accountManageApikeys;
            resourceInputs["accountManageIpWhitelist"] = args?.accountManageIpWhitelist;
            resourceInputs["accountManagePaymentMethods"] = args?.accountManagePaymentMethods;
            resourceInputs["accountManagePlan"] = args?.accountManagePlan;
            resourceInputs["accountManageTeams"] = args?.accountManageTeams;
            resourceInputs["accountManageUsers"] = args?.accountManageUsers;
            resourceInputs["accountViewActivityLog"] = args?.accountViewActivityLog;
            resourceInputs["accountViewInvoices"] = args?.accountViewInvoices;
            resourceInputs["dataManageDatafeeds"] = args?.dataManageDatafeeds;
            resourceInputs["dataManageDatasources"] = args?.dataManageDatasources;
            resourceInputs["dataPushToDatafeeds"] = args?.dataPushToDatafeeds;
            resourceInputs["dnsManageZones"] = args?.dnsManageZones;
            resourceInputs["dnsRecordsAllows"] = args?.dnsRecordsAllows;
            resourceInputs["dnsRecordsDenies"] = args?.dnsRecordsDenies;
            resourceInputs["dnsViewZones"] = args?.dnsViewZones;
            resourceInputs["dnsZonesAllowByDefault"] = args?.dnsZonesAllowByDefault;
            resourceInputs["dnsZonesAllows"] = args?.dnsZonesAllows;
            resourceInputs["dnsZonesDenies"] = args?.dnsZonesDenies;
            resourceInputs["email"] = args?.email;
            resourceInputs["ipWhitelistStrict"] = args?.ipWhitelistStrict;
            resourceInputs["ipWhitelists"] = args?.ipWhitelists;
            resourceInputs["monitoringCreateJobs"] = args?.monitoringCreateJobs;
            resourceInputs["monitoringDeleteJobs"] = args?.monitoringDeleteJobs;
            resourceInputs["monitoringManageJobs"] = args?.monitoringManageJobs;
            resourceInputs["monitoringManageLists"] = args?.monitoringManageLists;
            resourceInputs["monitoringUpdateJobs"] = args?.monitoringUpdateJobs;
            resourceInputs["monitoringViewJobs"] = args?.monitoringViewJobs;
            resourceInputs["name"] = args?.name;
            resourceInputs["notify"] = args?.notify;
            resourceInputs["redirectsManageRedirects"] = args?.redirectsManageRedirects;
            resourceInputs["securityManageActiveDirectory"] = args?.securityManageActiveDirectory;
            resourceInputs["securityManageGlobal2fa"] = args?.securityManageGlobal2fa;
            resourceInputs["teams"] = args?.teams;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Whether the user can modify account settings.
     */
    accountManageAccountSettings?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify account apikeys.
     */
    accountManageApikeys?: pulumi.Input<boolean>;
    /**
     * Whether the user can manage ip whitelist.
     */
    accountManageIpWhitelist?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify account payment methods.
     */
    accountManagePaymentMethods?: pulumi.Input<boolean>;
    /**
     * No longer in use.
     *
     * @deprecated obsolete, should no longer be used
     */
    accountManagePlan?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify other teams in the account.
     */
    accountManageTeams?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify account users.
     */
    accountManageUsers?: pulumi.Input<boolean>;
    /**
     * Whether the user can view activity logs.
     */
    accountViewActivityLog?: pulumi.Input<boolean>;
    /**
     * Whether the user can view invoices.
     */
    accountViewInvoices?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify data feeds.
     */
    dataManageDatafeeds?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify data sources.
     */
    dataManageDatasources?: pulumi.Input<boolean>;
    /**
     * Whether the user can publish to data feeds.
     */
    dataPushToDatafeeds?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify the accounts zones.
     */
    dnsManageZones?: pulumi.Input<boolean>;
    dnsRecordsAllows?: pulumi.Input<pulumi.Input<inputs.UserDnsRecordsAllow>[]>;
    dnsRecordsDenies?: pulumi.Input<pulumi.Input<inputs.UserDnsRecordsDeny>[]>;
    /**
     * Whether the user can view the accounts zones.
     */
    dnsViewZones?: pulumi.Input<boolean>;
    /**
     * If true, enable the `dnsZonesAllow` list, otherwise enable the `dnsZonesDeny` list.
     */
    dnsZonesAllowByDefault?: pulumi.Input<boolean>;
    /**
     * List of zones that the user may access.
     */
    dnsZonesAllows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of zones that the user may not access.
     */
    dnsZonesDenies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The email address of the user.
     */
    email?: pulumi.Input<string>;
    /**
     * Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.
     */
    ipWhitelistStrict?: pulumi.Input<boolean>;
    /**
     * Array of IP addresses/networks to which to grant the user access.
     */
    ipWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the user can create monitoring jobs when manageJobs is not set to true.
     */
    monitoringCreateJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can delete monitoring jobs when manageJobs is not set to true.
     */
    monitoringDeleteJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can create, update, and delete monitoring jobs.
     */
    monitoringManageJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify notification lists.
     */
    monitoringManageLists?: pulumi.Input<boolean>;
    /**
     * Whether the user can update monitoring jobs when manageJobs is not set to true.
     */
    monitoringUpdateJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can view monitoring jobs.
     */
    monitoringViewJobs?: pulumi.Input<boolean>;
    /**
     * The free form name of the user.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not to notify the user of specified events. Only `billing` is available currently.
     */
    notify?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether the user can manage redirects.
     * Only relevant for the DDI product.
     */
    redirectsManageRedirects?: pulumi.Input<boolean>;
    /**
     * Whether the user can manage global active directory.
     */
    securityManageActiveDirectory?: pulumi.Input<boolean>;
    /**
     * Whether the user can manage global two factor authentication.
     */
    securityManageGlobal2fa?: pulumi.Input<boolean>;
    /**
     * The teams that the user belongs to.
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The users login name.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Whether the user can modify account settings.
     */
    accountManageAccountSettings?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify account apikeys.
     */
    accountManageApikeys?: pulumi.Input<boolean>;
    /**
     * Whether the user can manage ip whitelist.
     */
    accountManageIpWhitelist?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify account payment methods.
     */
    accountManagePaymentMethods?: pulumi.Input<boolean>;
    /**
     * No longer in use.
     *
     * @deprecated obsolete, should no longer be used
     */
    accountManagePlan?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify other teams in the account.
     */
    accountManageTeams?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify account users.
     */
    accountManageUsers?: pulumi.Input<boolean>;
    /**
     * Whether the user can view activity logs.
     */
    accountViewActivityLog?: pulumi.Input<boolean>;
    /**
     * Whether the user can view invoices.
     */
    accountViewInvoices?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify data feeds.
     */
    dataManageDatafeeds?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify data sources.
     */
    dataManageDatasources?: pulumi.Input<boolean>;
    /**
     * Whether the user can publish to data feeds.
     */
    dataPushToDatafeeds?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify the accounts zones.
     */
    dnsManageZones?: pulumi.Input<boolean>;
    dnsRecordsAllows?: pulumi.Input<pulumi.Input<inputs.UserDnsRecordsAllow>[]>;
    dnsRecordsDenies?: pulumi.Input<pulumi.Input<inputs.UserDnsRecordsDeny>[]>;
    /**
     * Whether the user can view the accounts zones.
     */
    dnsViewZones?: pulumi.Input<boolean>;
    /**
     * If true, enable the `dnsZonesAllow` list, otherwise enable the `dnsZonesDeny` list.
     */
    dnsZonesAllowByDefault?: pulumi.Input<boolean>;
    /**
     * List of zones that the user may access.
     */
    dnsZonesAllows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of zones that the user may not access.
     */
    dnsZonesDenies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The email address of the user.
     */
    email: pulumi.Input<string>;
    /**
     * Set to true to restrict access to only those IP addresses and networks listed in the **ip_whitelist** field.
     */
    ipWhitelistStrict?: pulumi.Input<boolean>;
    /**
     * Array of IP addresses/networks to which to grant the user access.
     */
    ipWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the user can create monitoring jobs when manageJobs is not set to true.
     */
    monitoringCreateJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can delete monitoring jobs when manageJobs is not set to true.
     */
    monitoringDeleteJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can create, update, and delete monitoring jobs.
     */
    monitoringManageJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can modify notification lists.
     */
    monitoringManageLists?: pulumi.Input<boolean>;
    /**
     * Whether the user can update monitoring jobs when manageJobs is not set to true.
     */
    monitoringUpdateJobs?: pulumi.Input<boolean>;
    /**
     * Whether the user can view monitoring jobs.
     */
    monitoringViewJobs?: pulumi.Input<boolean>;
    /**
     * The free form name of the user.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not to notify the user of specified events. Only `billing` is available currently.
     */
    notify?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether the user can manage redirects.
     * Only relevant for the DDI product.
     */
    redirectsManageRedirects?: pulumi.Input<boolean>;
    /**
     * Whether the user can manage global active directory.
     */
    securityManageActiveDirectory?: pulumi.Input<boolean>;
    /**
     * Whether the user can manage global two factor authentication.
     */
    securityManageGlobal2fa?: pulumi.Input<boolean>;
    /**
     * The teams that the user belongs to.
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The users login name.
     */
    username: pulumi.Input<string>;
}
