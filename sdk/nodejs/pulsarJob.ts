// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class PulsarJob extends pulumi.CustomResource {
    /**
     * Get an existing PulsarJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PulsarJobState, opts?: pulumi.CustomResourceOptions): PulsarJob {
        return new PulsarJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/pulsarJob:PulsarJob';

    /**
     * Returns true if the given object is an instance of PulsarJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PulsarJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PulsarJob.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean | undefined>;
    public readonly appId!: pulumi.Output<string>;
    public readonly blendMetricWeights!: pulumi.Output<outputs.PulsarJobBlendMetricWeights | undefined>;
    public /*out*/ readonly community!: pulumi.Output<boolean>;
    public readonly config!: pulumi.Output<outputs.PulsarJobConfig | undefined>;
    public /*out*/ readonly customer!: pulumi.Output<number>;
    public /*out*/ readonly jobId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly shared!: pulumi.Output<boolean | undefined>;
    public readonly typeId!: pulumi.Output<string>;
    public readonly weights!: pulumi.Output<outputs.PulsarJobWeight[] | undefined>;

    /**
     * Create a PulsarJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PulsarJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PulsarJobArgs | PulsarJobState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PulsarJobState | undefined;
            inputs["active"] = state ? state.active : undefined;
            inputs["appId"] = state ? state.appId : undefined;
            inputs["blendMetricWeights"] = state ? state.blendMetricWeights : undefined;
            inputs["community"] = state ? state.community : undefined;
            inputs["config"] = state ? state.config : undefined;
            inputs["customer"] = state ? state.customer : undefined;
            inputs["jobId"] = state ? state.jobId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["shared"] = state ? state.shared : undefined;
            inputs["typeId"] = state ? state.typeId : undefined;
            inputs["weights"] = state ? state.weights : undefined;
        } else {
            const args = argsOrState as PulsarJobArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.typeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeId'");
            }
            inputs["active"] = args ? args.active : undefined;
            inputs["appId"] = args ? args.appId : undefined;
            inputs["blendMetricWeights"] = args ? args.blendMetricWeights : undefined;
            inputs["config"] = args ? args.config : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["shared"] = args ? args.shared : undefined;
            inputs["typeId"] = args ? args.typeId : undefined;
            inputs["weights"] = args ? args.weights : undefined;
            inputs["community"] = undefined /*out*/;
            inputs["customer"] = undefined /*out*/;
            inputs["jobId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(PulsarJob.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PulsarJob resources.
 */
export interface PulsarJobState {
    active?: pulumi.Input<boolean>;
    appId?: pulumi.Input<string>;
    blendMetricWeights?: pulumi.Input<inputs.PulsarJobBlendMetricWeights>;
    community?: pulumi.Input<boolean>;
    config?: pulumi.Input<inputs.PulsarJobConfig>;
    customer?: pulumi.Input<number>;
    jobId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    shared?: pulumi.Input<boolean>;
    typeId?: pulumi.Input<string>;
    weights?: pulumi.Input<pulumi.Input<inputs.PulsarJobWeight>[]>;
}

/**
 * The set of arguments for constructing a PulsarJob resource.
 */
export interface PulsarJobArgs {
    active?: pulumi.Input<boolean>;
    appId: pulumi.Input<string>;
    blendMetricWeights?: pulumi.Input<inputs.PulsarJobBlendMetricWeights>;
    config?: pulumi.Input<inputs.PulsarJobConfig>;
    name?: pulumi.Input<string>;
    shared?: pulumi.Input<boolean>;
    typeId: pulumi.Input<string>;
    weights?: pulumi.Input<pulumi.Input<inputs.PulsarJobWeight>[]>;
}
