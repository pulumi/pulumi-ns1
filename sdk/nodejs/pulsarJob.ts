// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PulsarJob extends pulumi.CustomResource {
    /**
     * Get an existing PulsarJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PulsarJobState, opts?: pulumi.CustomResourceOptions): PulsarJob {
        return new PulsarJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/pulsarJob:PulsarJob';

    /**
     * Returns true if the given object is an instance of PulsarJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PulsarJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PulsarJob.__pulumiType;
    }

    declare public readonly active: pulumi.Output<boolean | undefined>;
    declare public readonly appId: pulumi.Output<string>;
    declare public readonly blendMetricWeights: pulumi.Output<outputs.PulsarJobBlendMetricWeights | undefined>;
    declare public /*out*/ readonly community: pulumi.Output<boolean>;
    declare public readonly config: pulumi.Output<outputs.PulsarJobConfig | undefined>;
    declare public /*out*/ readonly customer: pulumi.Output<number>;
    declare public /*out*/ readonly jobId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly shared: pulumi.Output<boolean | undefined>;
    declare public readonly typeId: pulumi.Output<string>;
    declare public readonly weights: pulumi.Output<outputs.PulsarJobWeight[] | undefined>;

    /**
     * Create a PulsarJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PulsarJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PulsarJobArgs | PulsarJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PulsarJobState | undefined;
            resourceInputs["active"] = state?.active;
            resourceInputs["appId"] = state?.appId;
            resourceInputs["blendMetricWeights"] = state?.blendMetricWeights;
            resourceInputs["community"] = state?.community;
            resourceInputs["config"] = state?.config;
            resourceInputs["customer"] = state?.customer;
            resourceInputs["jobId"] = state?.jobId;
            resourceInputs["name"] = state?.name;
            resourceInputs["shared"] = state?.shared;
            resourceInputs["typeId"] = state?.typeId;
            resourceInputs["weights"] = state?.weights;
        } else {
            const args = argsOrState as PulsarJobArgs | undefined;
            if (args?.appId === undefined && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if (args?.typeId === undefined && !opts.urn) {
                throw new Error("Missing required property 'typeId'");
            }
            resourceInputs["active"] = args?.active;
            resourceInputs["appId"] = args?.appId;
            resourceInputs["blendMetricWeights"] = args?.blendMetricWeights;
            resourceInputs["config"] = args?.config;
            resourceInputs["name"] = args?.name;
            resourceInputs["shared"] = args?.shared;
            resourceInputs["typeId"] = args?.typeId;
            resourceInputs["weights"] = args?.weights;
            resourceInputs["community"] = undefined /*out*/;
            resourceInputs["customer"] = undefined /*out*/;
            resourceInputs["jobId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PulsarJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PulsarJob resources.
 */
export interface PulsarJobState {
    active?: pulumi.Input<boolean>;
    appId?: pulumi.Input<string>;
    blendMetricWeights?: pulumi.Input<inputs.PulsarJobBlendMetricWeights>;
    community?: pulumi.Input<boolean>;
    config?: pulumi.Input<inputs.PulsarJobConfig>;
    customer?: pulumi.Input<number>;
    jobId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    shared?: pulumi.Input<boolean>;
    typeId?: pulumi.Input<string>;
    weights?: pulumi.Input<pulumi.Input<inputs.PulsarJobWeight>[]>;
}

/**
 * The set of arguments for constructing a PulsarJob resource.
 */
export interface PulsarJobArgs {
    active?: pulumi.Input<boolean>;
    appId: pulumi.Input<string>;
    blendMetricWeights?: pulumi.Input<inputs.PulsarJobBlendMetricWeights>;
    config?: pulumi.Input<inputs.PulsarJobConfig>;
    name?: pulumi.Input<string>;
    shared?: pulumi.Input<boolean>;
    typeId: pulumi.Input<string>;
    weights?: pulumi.Input<pulumi.Input<inputs.PulsarJobWeight>[]>;
}
