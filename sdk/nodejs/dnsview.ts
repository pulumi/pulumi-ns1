// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Dnsview extends pulumi.CustomResource {
    /**
     * Get an existing Dnsview resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsviewState, opts?: pulumi.CustomResourceOptions): Dnsview {
        return new Dnsview(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/dnsview:Dnsview';

    /**
     * Returns true if the given object is an instance of Dnsview.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dnsview {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dnsview.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<number[] | undefined>;
    public readonly preference!: pulumi.Output<number>;
    public readonly readAcls!: pulumi.Output<string[] | undefined>;
    public readonly updateAcls!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<number>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Dnsview resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DnsviewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsviewArgs | DnsviewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsviewState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["preference"] = state ? state.preference : undefined;
            resourceInputs["readAcls"] = state ? state.readAcls : undefined;
            resourceInputs["updateAcls"] = state ? state.updateAcls : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as DnsviewArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["preference"] = args ? args.preference : undefined;
            resourceInputs["readAcls"] = args ? args.readAcls : undefined;
            resourceInputs["updateAcls"] = args ? args.updateAcls : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dnsview.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dnsview resources.
 */
export interface DnsviewState {
    createdAt?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<number>[]>;
    preference?: pulumi.Input<number>;
    readAcls?: pulumi.Input<pulumi.Input<string>[]>;
    updateAcls?: pulumi.Input<pulumi.Input<string>[]>;
    updatedAt?: pulumi.Input<number>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Dnsview resource.
 */
export interface DnsviewArgs {
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<number>[]>;
    preference?: pulumi.Input<number>;
    readAcls?: pulumi.Input<pulumi.Input<string>[]>;
    updateAcls?: pulumi.Input<pulumi.Input<string>[]>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
