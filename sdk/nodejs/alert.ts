// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a NS1 Alert resource. This can be used to create, modify, and delete alerts.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ns1 from "@pulumi/ns1";
 *
 * const example = new ns1.Alert("example", {
 *     name: "Example Alert",
 *     type: "zone",
 *     subtype: "transfer_failed",
 *     notificationLists: [],
 *     zoneNames: [],
 *     recordIds: [],
 * });
 * ```
 *
 * ## NS1 Documentation
 *
 * [Alerts Api Doc](https://ns1.com/api#alerts)
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import ns1:index/alert:Alert <name> <alert_id>`
 * ```
 */
export class Alert extends pulumi.CustomResource {
    /**
     * Get an existing Alert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertState, opts?: pulumi.CustomResourceOptions): Alert {
        return new Alert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/alert:Alert';

    /**
     * Returns true if the given object is an instance of Alert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alert.__pulumiType;
    }

    /**
     * (Read Only) The Unix timestamp representing when the alert configuration was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * (Read Only) The user or apikey that created this alert.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The free-form display name for the alert.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of id's for notification lists whose notifiers will be triggered by the alert.
     */
    public readonly notificationLists!: pulumi.Output<string[] | undefined>;
    /**
     * A list of record id's this alert applies to.
     */
    public readonly recordIds!: pulumi.Output<string[] | undefined>;
    /**
     * The type of the alert.
     */
    public readonly subtype!: pulumi.Output<string>;
    /**
     * The type of the alert.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * (Read Only) The Unix timestamp representing when the alert configuration was last modified.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<number>;
    /**
     * (Read Only) The user or apikey that last modified this alert.
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    /**
     * A list of zones this alert applies to.
     */
    public readonly zoneNames!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Alert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertArgs | AlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationLists"] = state ? state.notificationLists : undefined;
            resourceInputs["recordIds"] = state ? state.recordIds : undefined;
            resourceInputs["subtype"] = state ? state.subtype : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["zoneNames"] = state ? state.zoneNames : undefined;
        } else {
            const args = argsOrState as AlertArgs | undefined;
            if ((!args || args.subtype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subtype'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationLists"] = args ? args.notificationLists : undefined;
            resourceInputs["recordIds"] = args ? args.recordIds : undefined;
            resourceInputs["subtype"] = args ? args.subtype : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneNames"] = args ? args.zoneNames : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Alert resources.
 */
export interface AlertState {
    /**
     * (Read Only) The Unix timestamp representing when the alert configuration was created.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * (Read Only) The user or apikey that created this alert.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The free-form display name for the alert.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of id's for notification lists whose notifiers will be triggered by the alert.
     */
    notificationLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of record id's this alert applies to.
     */
    recordIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the alert.
     */
    subtype?: pulumi.Input<string>;
    /**
     * The type of the alert.
     */
    type?: pulumi.Input<string>;
    /**
     * (Read Only) The Unix timestamp representing when the alert configuration was last modified.
     */
    updatedAt?: pulumi.Input<number>;
    /**
     * (Read Only) The user or apikey that last modified this alert.
     */
    updatedBy?: pulumi.Input<string>;
    /**
     * A list of zones this alert applies to.
     */
    zoneNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Alert resource.
 */
export interface AlertArgs {
    /**
     * The free-form display name for the alert.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of id's for notification lists whose notifiers will be triggered by the alert.
     */
    notificationLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of record id's this alert applies to.
     */
    recordIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the alert.
     */
    subtype: pulumi.Input<string>;
    /**
     * The type of the alert.
     */
    type: pulumi.Input<string>;
    /**
     * A list of zones this alert applies to.
     */
    zoneNames?: pulumi.Input<pulumi.Input<string>[]>;
}
