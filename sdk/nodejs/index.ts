// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./apikey";
export * from "./application";
export * from "./dataFeed";
export * from "./dataSource";
export * from "./getDNSSec";
export * from "./getRecord";
export * from "./getZone";
export * from "./monitoringJob";
export * from "./notifyList";
export * from "./provider";
export * from "./pulsarJob";
export * from "./record";
export * from "./subnet";
export * from "./team";
export * from "./tsigkey";
export * from "./user";
export * from "./zone";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { APIKey } from "./apikey";
import { Application } from "./application";
import { DataFeed } from "./dataFeed";
import { DataSource } from "./dataSource";
import { MonitoringJob } from "./monitoringJob";
import { NotifyList } from "./notifyList";
import { PulsarJob } from "./pulsarJob";
import { Record } from "./record";
import { Subnet } from "./subnet";
import { Team } from "./team";
import { Tsigkey } from "./tsigkey";
import { User } from "./user";
import { Zone } from "./zone";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ns1:index/aPIKey:APIKey":
                return new APIKey(name, <any>undefined, { urn })
            case "ns1:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "ns1:index/dataFeed:DataFeed":
                return new DataFeed(name, <any>undefined, { urn })
            case "ns1:index/dataSource:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "ns1:index/monitoringJob:MonitoringJob":
                return new MonitoringJob(name, <any>undefined, { urn })
            case "ns1:index/notifyList:NotifyList":
                return new NotifyList(name, <any>undefined, { urn })
            case "ns1:index/pulsarJob:PulsarJob":
                return new PulsarJob(name, <any>undefined, { urn })
            case "ns1:index/record:Record":
                return new Record(name, <any>undefined, { urn })
            case "ns1:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "ns1:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "ns1:index/tsigkey:Tsigkey":
                return new Tsigkey(name, <any>undefined, { urn })
            case "ns1:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "ns1:index/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ns1", "index/aPIKey", _module)
pulumi.runtime.registerResourceModule("ns1", "index/application", _module)
pulumi.runtime.registerResourceModule("ns1", "index/dataFeed", _module)
pulumi.runtime.registerResourceModule("ns1", "index/dataSource", _module)
pulumi.runtime.registerResourceModule("ns1", "index/monitoringJob", _module)
pulumi.runtime.registerResourceModule("ns1", "index/notifyList", _module)
pulumi.runtime.registerResourceModule("ns1", "index/pulsarJob", _module)
pulumi.runtime.registerResourceModule("ns1", "index/record", _module)
pulumi.runtime.registerResourceModule("ns1", "index/subnet", _module)
pulumi.runtime.registerResourceModule("ns1", "index/team", _module)
pulumi.runtime.registerResourceModule("ns1", "index/tsigkey", _module)
pulumi.runtime.registerResourceModule("ns1", "index/user", _module)
pulumi.runtime.registerResourceModule("ns1", "index/zone", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("ns1", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ns1") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
