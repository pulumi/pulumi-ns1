# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class DataSource(pulumi.CustomResource):
    config: pulumi.Output[dict]
    """
    The data source configuration, determined by its type,
    matching the specification in `config` from /data/sourcetypes.
    """
    name: pulumi.Output[str]
    """
    The free form name of the data source.
    """
    sourcetype: pulumi.Output[str]
    """
    The data sources type, listed in API endpoint https://api.nsone.net/v1/data/sourcetypes.
    """
    def __init__(__self__, resource_name, opts=None, config=None, name=None, sourcetype=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a NS1 Data Source resource. This can be used to create, modify, and delete data sources.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ns1 as ns1

        example = ns1.DataSource("example", sourcetype="nsone_v1")
        ```
        ## NS1 Documentation

        [Datasource Api Doc](https://ns1.com/api#data-sources)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: The data source configuration, determined by its type,
               matching the specification in `config` from /data/sourcetypes.
        :param pulumi.Input[str] name: The free form name of the data source.
        :param pulumi.Input[str] sourcetype: The data sources type, listed in API endpoint https://api.nsone.net/v1/data/sourcetypes.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['config'] = config
            __props__['name'] = name
            if sourcetype is None:
                raise TypeError("Missing required property 'sourcetype'")
            __props__['sourcetype'] = sourcetype
        super(DataSource, __self__).__init__(
            'ns1:index/dataSource:DataSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, config=None, name=None, sourcetype=None):
        """
        Get an existing DataSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: The data source configuration, determined by its type,
               matching the specification in `config` from /data/sourcetypes.
        :param pulumi.Input[str] name: The free form name of the data source.
        :param pulumi.Input[str] sourcetype: The data sources type, listed in API endpoint https://api.nsone.net/v1/data/sourcetypes.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config"] = config
        __props__["name"] = name
        __props__["sourcetype"] = sourcetype
        return DataSource(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
