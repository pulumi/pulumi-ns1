// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Dnsview struct {
	pulumi.CustomResourceState

	CreatedAt  pulumi.IntOutput         `pulumi:"createdAt"`
	Name       pulumi.StringOutput      `pulumi:"name"`
	Networks   pulumi.IntArrayOutput    `pulumi:"networks"`
	Preference pulumi.IntOutput         `pulumi:"preference"`
	ReadAcls   pulumi.StringArrayOutput `pulumi:"readAcls"`
	UpdateAcls pulumi.StringArrayOutput `pulumi:"updateAcls"`
	UpdatedAt  pulumi.IntOutput         `pulumi:"updatedAt"`
	Zones      pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewDnsview registers a new resource with the given unique name, arguments, and options.
func NewDnsview(ctx *pulumi.Context,
	name string, args *DnsviewArgs, opts ...pulumi.ResourceOption) (*Dnsview, error) {
	if args == nil {
		args = &DnsviewArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dnsview
	err := ctx.RegisterResource("ns1:index/dnsview:Dnsview", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsview gets an existing Dnsview resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsview(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsviewState, opts ...pulumi.ResourceOption) (*Dnsview, error) {
	var resource Dnsview
	err := ctx.ReadResource("ns1:index/dnsview:Dnsview", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dnsview resources.
type dnsviewState struct {
	CreatedAt  *int     `pulumi:"createdAt"`
	Name       *string  `pulumi:"name"`
	Networks   []int    `pulumi:"networks"`
	Preference *int     `pulumi:"preference"`
	ReadAcls   []string `pulumi:"readAcls"`
	UpdateAcls []string `pulumi:"updateAcls"`
	UpdatedAt  *int     `pulumi:"updatedAt"`
	Zones      []string `pulumi:"zones"`
}

type DnsviewState struct {
	CreatedAt  pulumi.IntPtrInput
	Name       pulumi.StringPtrInput
	Networks   pulumi.IntArrayInput
	Preference pulumi.IntPtrInput
	ReadAcls   pulumi.StringArrayInput
	UpdateAcls pulumi.StringArrayInput
	UpdatedAt  pulumi.IntPtrInput
	Zones      pulumi.StringArrayInput
}

func (DnsviewState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsviewState)(nil)).Elem()
}

type dnsviewArgs struct {
	Name       *string  `pulumi:"name"`
	Networks   []int    `pulumi:"networks"`
	Preference *int     `pulumi:"preference"`
	ReadAcls   []string `pulumi:"readAcls"`
	UpdateAcls []string `pulumi:"updateAcls"`
	Zones      []string `pulumi:"zones"`
}

// The set of arguments for constructing a Dnsview resource.
type DnsviewArgs struct {
	Name       pulumi.StringPtrInput
	Networks   pulumi.IntArrayInput
	Preference pulumi.IntPtrInput
	ReadAcls   pulumi.StringArrayInput
	UpdateAcls pulumi.StringArrayInput
	Zones      pulumi.StringArrayInput
}

func (DnsviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsviewArgs)(nil)).Elem()
}

type DnsviewInput interface {
	pulumi.Input

	ToDnsviewOutput() DnsviewOutput
	ToDnsviewOutputWithContext(ctx context.Context) DnsviewOutput
}

func (*Dnsview) ElementType() reflect.Type {
	return reflect.TypeOf((**Dnsview)(nil)).Elem()
}

func (i *Dnsview) ToDnsviewOutput() DnsviewOutput {
	return i.ToDnsviewOutputWithContext(context.Background())
}

func (i *Dnsview) ToDnsviewOutputWithContext(ctx context.Context) DnsviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsviewOutput)
}

// DnsviewArrayInput is an input type that accepts DnsviewArray and DnsviewArrayOutput values.
// You can construct a concrete instance of `DnsviewArrayInput` via:
//
//	DnsviewArray{ DnsviewArgs{...} }
type DnsviewArrayInput interface {
	pulumi.Input

	ToDnsviewArrayOutput() DnsviewArrayOutput
	ToDnsviewArrayOutputWithContext(context.Context) DnsviewArrayOutput
}

type DnsviewArray []DnsviewInput

func (DnsviewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dnsview)(nil)).Elem()
}

func (i DnsviewArray) ToDnsviewArrayOutput() DnsviewArrayOutput {
	return i.ToDnsviewArrayOutputWithContext(context.Background())
}

func (i DnsviewArray) ToDnsviewArrayOutputWithContext(ctx context.Context) DnsviewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsviewArrayOutput)
}

// DnsviewMapInput is an input type that accepts DnsviewMap and DnsviewMapOutput values.
// You can construct a concrete instance of `DnsviewMapInput` via:
//
//	DnsviewMap{ "key": DnsviewArgs{...} }
type DnsviewMapInput interface {
	pulumi.Input

	ToDnsviewMapOutput() DnsviewMapOutput
	ToDnsviewMapOutputWithContext(context.Context) DnsviewMapOutput
}

type DnsviewMap map[string]DnsviewInput

func (DnsviewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dnsview)(nil)).Elem()
}

func (i DnsviewMap) ToDnsviewMapOutput() DnsviewMapOutput {
	return i.ToDnsviewMapOutputWithContext(context.Background())
}

func (i DnsviewMap) ToDnsviewMapOutputWithContext(ctx context.Context) DnsviewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsviewMapOutput)
}

type DnsviewOutput struct{ *pulumi.OutputState }

func (DnsviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dnsview)(nil)).Elem()
}

func (o DnsviewOutput) ToDnsviewOutput() DnsviewOutput {
	return o
}

func (o DnsviewOutput) ToDnsviewOutputWithContext(ctx context.Context) DnsviewOutput {
	return o
}

func (o DnsviewOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *Dnsview) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

func (o DnsviewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnsview) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DnsviewOutput) Networks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Dnsview) pulumi.IntArrayOutput { return v.Networks }).(pulumi.IntArrayOutput)
}

func (o DnsviewOutput) Preference() pulumi.IntOutput {
	return o.ApplyT(func(v *Dnsview) pulumi.IntOutput { return v.Preference }).(pulumi.IntOutput)
}

func (o DnsviewOutput) ReadAcls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dnsview) pulumi.StringArrayOutput { return v.ReadAcls }).(pulumi.StringArrayOutput)
}

func (o DnsviewOutput) UpdateAcls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dnsview) pulumi.StringArrayOutput { return v.UpdateAcls }).(pulumi.StringArrayOutput)
}

func (o DnsviewOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *Dnsview) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

func (o DnsviewOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dnsview) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type DnsviewArrayOutput struct{ *pulumi.OutputState }

func (DnsviewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dnsview)(nil)).Elem()
}

func (o DnsviewArrayOutput) ToDnsviewArrayOutput() DnsviewArrayOutput {
	return o
}

func (o DnsviewArrayOutput) ToDnsviewArrayOutputWithContext(ctx context.Context) DnsviewArrayOutput {
	return o
}

func (o DnsviewArrayOutput) Index(i pulumi.IntInput) DnsviewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dnsview {
		return vs[0].([]*Dnsview)[vs[1].(int)]
	}).(DnsviewOutput)
}

type DnsviewMapOutput struct{ *pulumi.OutputState }

func (DnsviewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dnsview)(nil)).Elem()
}

func (o DnsviewMapOutput) ToDnsviewMapOutput() DnsviewMapOutput {
	return o
}

func (o DnsviewMapOutput) ToDnsviewMapOutputWithContext(ctx context.Context) DnsviewMapOutput {
	return o
}

func (o DnsviewMapOutput) MapIndex(k pulumi.StringInput) DnsviewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dnsview {
		return vs[0].(map[string]*Dnsview)[vs[1].(string)]
	}).(DnsviewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsviewInput)(nil)).Elem(), &Dnsview{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsviewArrayInput)(nil)).Elem(), DnsviewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsviewMapInput)(nil)).Elem(), DnsviewMap{})
	pulumi.RegisterOutputType(DnsviewOutput{})
	pulumi.RegisterOutputType(DnsviewArrayOutput{})
	pulumi.RegisterOutputType(DnsviewMapOutput{})
}
