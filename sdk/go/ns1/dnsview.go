// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DnsView struct {
	pulumi.CustomResourceState

	CreatedAt  pulumi.IntOutput         `pulumi:"createdAt"`
	Name       pulumi.StringOutput      `pulumi:"name"`
	Networks   pulumi.IntArrayOutput    `pulumi:"networks"`
	Preference pulumi.IntOutput         `pulumi:"preference"`
	ReadAcls   pulumi.StringArrayOutput `pulumi:"readAcls"`
	UpdateAcls pulumi.StringArrayOutput `pulumi:"updateAcls"`
	UpdatedAt  pulumi.IntOutput         `pulumi:"updatedAt"`
	Zones      pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewDnsView registers a new resource with the given unique name, arguments, and options.
func NewDnsView(ctx *pulumi.Context,
	name string, args *DnsViewArgs, opts ...pulumi.ResourceOption) (*DnsView, error) {
	if args == nil {
		args = &DnsViewArgs{}
	}

	var resource DnsView
	err := ctx.RegisterResource("ns1:index/dnsView:DnsView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsView gets an existing DnsView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsViewState, opts ...pulumi.ResourceOption) (*DnsView, error) {
	var resource DnsView
	err := ctx.ReadResource("ns1:index/dnsView:DnsView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsView resources.
type dnsViewState struct {
	CreatedAt  *int     `pulumi:"createdAt"`
	Name       *string  `pulumi:"name"`
	Networks   []int    `pulumi:"networks"`
	Preference *int     `pulumi:"preference"`
	ReadAcls   []string `pulumi:"readAcls"`
	UpdateAcls []string `pulumi:"updateAcls"`
	UpdatedAt  *int     `pulumi:"updatedAt"`
	Zones      []string `pulumi:"zones"`
}

type DnsViewState struct {
	CreatedAt  pulumi.IntPtrInput
	Name       pulumi.StringPtrInput
	Networks   pulumi.IntArrayInput
	Preference pulumi.IntPtrInput
	ReadAcls   pulumi.StringArrayInput
	UpdateAcls pulumi.StringArrayInput
	UpdatedAt  pulumi.IntPtrInput
	Zones      pulumi.StringArrayInput
}

func (DnsViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsViewState)(nil)).Elem()
}

type dnsViewArgs struct {
	Name       *string  `pulumi:"name"`
	Networks   []int    `pulumi:"networks"`
	Preference *int     `pulumi:"preference"`
	ReadAcls   []string `pulumi:"readAcls"`
	UpdateAcls []string `pulumi:"updateAcls"`
	Zones      []string `pulumi:"zones"`
}

// The set of arguments for constructing a DnsView resource.
type DnsViewArgs struct {
	Name       pulumi.StringPtrInput
	Networks   pulumi.IntArrayInput
	Preference pulumi.IntPtrInput
	ReadAcls   pulumi.StringArrayInput
	UpdateAcls pulumi.StringArrayInput
	Zones      pulumi.StringArrayInput
}

func (DnsViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsViewArgs)(nil)).Elem()
}

type DnsViewInput interface {
	pulumi.Input

	ToDnsViewOutput() DnsViewOutput
	ToDnsViewOutputWithContext(ctx context.Context) DnsViewOutput
}

func (*DnsView) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsView)(nil)).Elem()
}

func (i *DnsView) ToDnsViewOutput() DnsViewOutput {
	return i.ToDnsViewOutputWithContext(context.Background())
}

func (i *DnsView) ToDnsViewOutputWithContext(ctx context.Context) DnsViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewOutput)
}

// DnsViewArrayInput is an input type that accepts DnsViewArray and DnsViewArrayOutput values.
// You can construct a concrete instance of `DnsViewArrayInput` via:
//
//	DnsViewArray{ DnsViewArgs{...} }
type DnsViewArrayInput interface {
	pulumi.Input

	ToDnsViewArrayOutput() DnsViewArrayOutput
	ToDnsViewArrayOutputWithContext(context.Context) DnsViewArrayOutput
}

type DnsViewArray []DnsViewInput

func (DnsViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsView)(nil)).Elem()
}

func (i DnsViewArray) ToDnsViewArrayOutput() DnsViewArrayOutput {
	return i.ToDnsViewArrayOutputWithContext(context.Background())
}

func (i DnsViewArray) ToDnsViewArrayOutputWithContext(ctx context.Context) DnsViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewArrayOutput)
}

// DnsViewMapInput is an input type that accepts DnsViewMap and DnsViewMapOutput values.
// You can construct a concrete instance of `DnsViewMapInput` via:
//
//	DnsViewMap{ "key": DnsViewArgs{...} }
type DnsViewMapInput interface {
	pulumi.Input

	ToDnsViewMapOutput() DnsViewMapOutput
	ToDnsViewMapOutputWithContext(context.Context) DnsViewMapOutput
}

type DnsViewMap map[string]DnsViewInput

func (DnsViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsView)(nil)).Elem()
}

func (i DnsViewMap) ToDnsViewMapOutput() DnsViewMapOutput {
	return i.ToDnsViewMapOutputWithContext(context.Background())
}

func (i DnsViewMap) ToDnsViewMapOutputWithContext(ctx context.Context) DnsViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewMapOutput)
}

type DnsViewOutput struct{ *pulumi.OutputState }

func (DnsViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsView)(nil)).Elem()
}

func (o DnsViewOutput) ToDnsViewOutput() DnsViewOutput {
	return o
}

func (o DnsViewOutput) ToDnsViewOutputWithContext(ctx context.Context) DnsViewOutput {
	return o
}

func (o DnsViewOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsView) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

func (o DnsViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DnsViewOutput) Networks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.IntArrayOutput { return v.Networks }).(pulumi.IntArrayOutput)
}

func (o DnsViewOutput) Preference() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsView) pulumi.IntOutput { return v.Preference }).(pulumi.IntOutput)
}

func (o DnsViewOutput) ReadAcls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringArrayOutput { return v.ReadAcls }).(pulumi.StringArrayOutput)
}

func (o DnsViewOutput) UpdateAcls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringArrayOutput { return v.UpdateAcls }).(pulumi.StringArrayOutput)
}

func (o DnsViewOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsView) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

func (o DnsViewOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type DnsViewArrayOutput struct{ *pulumi.OutputState }

func (DnsViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsView)(nil)).Elem()
}

func (o DnsViewArrayOutput) ToDnsViewArrayOutput() DnsViewArrayOutput {
	return o
}

func (o DnsViewArrayOutput) ToDnsViewArrayOutputWithContext(ctx context.Context) DnsViewArrayOutput {
	return o
}

func (o DnsViewArrayOutput) Index(i pulumi.IntInput) DnsViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsView {
		return vs[0].([]*DnsView)[vs[1].(int)]
	}).(DnsViewOutput)
}

type DnsViewMapOutput struct{ *pulumi.OutputState }

func (DnsViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsView)(nil)).Elem()
}

func (o DnsViewMapOutput) ToDnsViewMapOutput() DnsViewMapOutput {
	return o
}

func (o DnsViewMapOutput) ToDnsViewMapOutputWithContext(ctx context.Context) DnsViewMapOutput {
	return o
}

func (o DnsViewMapOutput) MapIndex(k pulumi.StringInput) DnsViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsView {
		return vs[0].(map[string]*DnsView)[vs[1].(string)]
	}).(DnsViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsViewInput)(nil)).Elem(), &DnsView{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsViewArrayInput)(nil)).Elem(), DnsViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsViewMapInput)(nil)).Elem(), DnsViewMap{})
	pulumi.RegisterOutputType(DnsViewOutput{})
	pulumi.RegisterOutputType(DnsViewArrayOutput{})
	pulumi.RegisterOutputType(DnsViewMapOutput{})
}
