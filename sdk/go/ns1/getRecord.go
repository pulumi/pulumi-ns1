// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides details about a NS1 Record. Use this if you would simply like to read
// information from NS1 into your configurations. For read/write operations, you
// should use a resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ns1/sdk/go/ns1"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ns1.LookupRecord(ctx, &ns1.LookupRecordArgs{
// 			Domain: "terraform.example.io",
// 			Type:   "A",
// 			Zone:   "example.io",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupRecord(ctx *pulumi.Context, args *LookupRecordArgs, opts ...pulumi.InvokeOption) (*LookupRecordResult, error) {
	var rv LookupRecordResult
	err := ctx.Invoke("ns1:index/getRecord:getRecord", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRecord.
type LookupRecordArgs struct {
	// The records' domain.
	Domain string `pulumi:"domain"`
	// The records' RR type.
	Type string `pulumi:"type"`
	// The zone the record belongs to.
	Zone string `pulumi:"zone"`
}

// A collection of values returned by getRecord.
type LookupRecordResult struct {
	// List of NS1 answers.
	Answers []GetRecordAnswer `pulumi:"answers"`
	Domain  string            `pulumi:"domain"`
	// List of NS1 filters.
	Filters []GetRecordFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The target record this links to.
	Link string `pulumi:"link"`
	// Map of metadata
	Meta map[string]interface{} `pulumi:"meta"`
	// List of regions.
	Regions      []GetRecordRegion `pulumi:"regions"`
	ShortAnswers []string          `pulumi:"shortAnswers"`
	// The records' time to live (in seconds).
	Ttl  int    `pulumi:"ttl"`
	Type string `pulumi:"type"`
	// Whether to use EDNS client subnet data when available (in filter chain).
	UseClientSubnet bool   `pulumi:"useClientSubnet"`
	Zone            string `pulumi:"zone"`
}
