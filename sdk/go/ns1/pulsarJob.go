// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PulsarJob struct {
	pulumi.CustomResourceState

	Active             pulumi.BoolPtrOutput                 `pulumi:"active"`
	AppId              pulumi.StringOutput                  `pulumi:"appId"`
	BlendMetricWeights PulsarJobBlendMetricWeightsPtrOutput `pulumi:"blendMetricWeights"`
	Community          pulumi.BoolOutput                    `pulumi:"community"`
	Config             PulsarJobConfigPtrOutput             `pulumi:"config"`
	Customer           pulumi.IntOutput                     `pulumi:"customer"`
	JobId              pulumi.StringOutput                  `pulumi:"jobId"`
	Name               pulumi.StringOutput                  `pulumi:"name"`
	Shared             pulumi.BoolPtrOutput                 `pulumi:"shared"`
	TypeId             pulumi.StringOutput                  `pulumi:"typeId"`
	Weights            PulsarJobWeightArrayOutput           `pulumi:"weights"`
}

// NewPulsarJob registers a new resource with the given unique name, arguments, and options.
func NewPulsarJob(ctx *pulumi.Context,
	name string, args *PulsarJobArgs, opts ...pulumi.ResourceOption) (*PulsarJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.TypeId == nil {
		return nil, errors.New("invalid value for required argument 'TypeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PulsarJob
	err := ctx.RegisterResource("ns1:index/pulsarJob:PulsarJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPulsarJob gets an existing PulsarJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPulsarJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PulsarJobState, opts ...pulumi.ResourceOption) (*PulsarJob, error) {
	var resource PulsarJob
	err := ctx.ReadResource("ns1:index/pulsarJob:PulsarJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PulsarJob resources.
type pulsarJobState struct {
	Active             *bool                        `pulumi:"active"`
	AppId              *string                      `pulumi:"appId"`
	BlendMetricWeights *PulsarJobBlendMetricWeights `pulumi:"blendMetricWeights"`
	Community          *bool                        `pulumi:"community"`
	Config             *PulsarJobConfig             `pulumi:"config"`
	Customer           *int                         `pulumi:"customer"`
	JobId              *string                      `pulumi:"jobId"`
	Name               *string                      `pulumi:"name"`
	Shared             *bool                        `pulumi:"shared"`
	TypeId             *string                      `pulumi:"typeId"`
	Weights            []PulsarJobWeight            `pulumi:"weights"`
}

type PulsarJobState struct {
	Active             pulumi.BoolPtrInput
	AppId              pulumi.StringPtrInput
	BlendMetricWeights PulsarJobBlendMetricWeightsPtrInput
	Community          pulumi.BoolPtrInput
	Config             PulsarJobConfigPtrInput
	Customer           pulumi.IntPtrInput
	JobId              pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	Shared             pulumi.BoolPtrInput
	TypeId             pulumi.StringPtrInput
	Weights            PulsarJobWeightArrayInput
}

func (PulsarJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulsarJobState)(nil)).Elem()
}

type pulsarJobArgs struct {
	Active             *bool                        `pulumi:"active"`
	AppId              string                       `pulumi:"appId"`
	BlendMetricWeights *PulsarJobBlendMetricWeights `pulumi:"blendMetricWeights"`
	Config             *PulsarJobConfig             `pulumi:"config"`
	Name               *string                      `pulumi:"name"`
	Shared             *bool                        `pulumi:"shared"`
	TypeId             string                       `pulumi:"typeId"`
	Weights            []PulsarJobWeight            `pulumi:"weights"`
}

// The set of arguments for constructing a PulsarJob resource.
type PulsarJobArgs struct {
	Active             pulumi.BoolPtrInput
	AppId              pulumi.StringInput
	BlendMetricWeights PulsarJobBlendMetricWeightsPtrInput
	Config             PulsarJobConfigPtrInput
	Name               pulumi.StringPtrInput
	Shared             pulumi.BoolPtrInput
	TypeId             pulumi.StringInput
	Weights            PulsarJobWeightArrayInput
}

func (PulsarJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pulsarJobArgs)(nil)).Elem()
}

type PulsarJobInput interface {
	pulumi.Input

	ToPulsarJobOutput() PulsarJobOutput
	ToPulsarJobOutputWithContext(ctx context.Context) PulsarJobOutput
}

func (*PulsarJob) ElementType() reflect.Type {
	return reflect.TypeOf((**PulsarJob)(nil)).Elem()
}

func (i *PulsarJob) ToPulsarJobOutput() PulsarJobOutput {
	return i.ToPulsarJobOutputWithContext(context.Background())
}

func (i *PulsarJob) ToPulsarJobOutputWithContext(ctx context.Context) PulsarJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobOutput)
}

// PulsarJobArrayInput is an input type that accepts PulsarJobArray and PulsarJobArrayOutput values.
// You can construct a concrete instance of `PulsarJobArrayInput` via:
//
//	PulsarJobArray{ PulsarJobArgs{...} }
type PulsarJobArrayInput interface {
	pulumi.Input

	ToPulsarJobArrayOutput() PulsarJobArrayOutput
	ToPulsarJobArrayOutputWithContext(context.Context) PulsarJobArrayOutput
}

type PulsarJobArray []PulsarJobInput

func (PulsarJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PulsarJob)(nil)).Elem()
}

func (i PulsarJobArray) ToPulsarJobArrayOutput() PulsarJobArrayOutput {
	return i.ToPulsarJobArrayOutputWithContext(context.Background())
}

func (i PulsarJobArray) ToPulsarJobArrayOutputWithContext(ctx context.Context) PulsarJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobArrayOutput)
}

// PulsarJobMapInput is an input type that accepts PulsarJobMap and PulsarJobMapOutput values.
// You can construct a concrete instance of `PulsarJobMapInput` via:
//
//	PulsarJobMap{ "key": PulsarJobArgs{...} }
type PulsarJobMapInput interface {
	pulumi.Input

	ToPulsarJobMapOutput() PulsarJobMapOutput
	ToPulsarJobMapOutputWithContext(context.Context) PulsarJobMapOutput
}

type PulsarJobMap map[string]PulsarJobInput

func (PulsarJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PulsarJob)(nil)).Elem()
}

func (i PulsarJobMap) ToPulsarJobMapOutput() PulsarJobMapOutput {
	return i.ToPulsarJobMapOutputWithContext(context.Background())
}

func (i PulsarJobMap) ToPulsarJobMapOutputWithContext(ctx context.Context) PulsarJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobMapOutput)
}

type PulsarJobOutput struct{ *pulumi.OutputState }

func (PulsarJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PulsarJob)(nil)).Elem()
}

func (o PulsarJobOutput) ToPulsarJobOutput() PulsarJobOutput {
	return o
}

func (o PulsarJobOutput) ToPulsarJobOutputWithContext(ctx context.Context) PulsarJobOutput {
	return o
}

func (o PulsarJobOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PulsarJob) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

func (o PulsarJobOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *PulsarJob) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

func (o PulsarJobOutput) BlendMetricWeights() PulsarJobBlendMetricWeightsPtrOutput {
	return o.ApplyT(func(v *PulsarJob) PulsarJobBlendMetricWeightsPtrOutput { return v.BlendMetricWeights }).(PulsarJobBlendMetricWeightsPtrOutput)
}

func (o PulsarJobOutput) Community() pulumi.BoolOutput {
	return o.ApplyT(func(v *PulsarJob) pulumi.BoolOutput { return v.Community }).(pulumi.BoolOutput)
}

func (o PulsarJobOutput) Config() PulsarJobConfigPtrOutput {
	return o.ApplyT(func(v *PulsarJob) PulsarJobConfigPtrOutput { return v.Config }).(PulsarJobConfigPtrOutput)
}

func (o PulsarJobOutput) Customer() pulumi.IntOutput {
	return o.ApplyT(func(v *PulsarJob) pulumi.IntOutput { return v.Customer }).(pulumi.IntOutput)
}

func (o PulsarJobOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *PulsarJob) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

func (o PulsarJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PulsarJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PulsarJobOutput) Shared() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PulsarJob) pulumi.BoolPtrOutput { return v.Shared }).(pulumi.BoolPtrOutput)
}

func (o PulsarJobOutput) TypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *PulsarJob) pulumi.StringOutput { return v.TypeId }).(pulumi.StringOutput)
}

func (o PulsarJobOutput) Weights() PulsarJobWeightArrayOutput {
	return o.ApplyT(func(v *PulsarJob) PulsarJobWeightArrayOutput { return v.Weights }).(PulsarJobWeightArrayOutput)
}

type PulsarJobArrayOutput struct{ *pulumi.OutputState }

func (PulsarJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PulsarJob)(nil)).Elem()
}

func (o PulsarJobArrayOutput) ToPulsarJobArrayOutput() PulsarJobArrayOutput {
	return o
}

func (o PulsarJobArrayOutput) ToPulsarJobArrayOutputWithContext(ctx context.Context) PulsarJobArrayOutput {
	return o
}

func (o PulsarJobArrayOutput) Index(i pulumi.IntInput) PulsarJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PulsarJob {
		return vs[0].([]*PulsarJob)[vs[1].(int)]
	}).(PulsarJobOutput)
}

type PulsarJobMapOutput struct{ *pulumi.OutputState }

func (PulsarJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PulsarJob)(nil)).Elem()
}

func (o PulsarJobMapOutput) ToPulsarJobMapOutput() PulsarJobMapOutput {
	return o
}

func (o PulsarJobMapOutput) ToPulsarJobMapOutputWithContext(ctx context.Context) PulsarJobMapOutput {
	return o
}

func (o PulsarJobMapOutput) MapIndex(k pulumi.StringInput) PulsarJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PulsarJob {
		return vs[0].(map[string]*PulsarJob)[vs[1].(string)]
	}).(PulsarJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PulsarJobInput)(nil)).Elem(), &PulsarJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*PulsarJobArrayInput)(nil)).Elem(), PulsarJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PulsarJobMapInput)(nil)).Elem(), PulsarJobMap{})
	pulumi.RegisterOutputType(PulsarJobOutput{})
	pulumi.RegisterOutputType(PulsarJobArrayOutput{})
	pulumi.RegisterOutputType(PulsarJobMapOutput{})
}
