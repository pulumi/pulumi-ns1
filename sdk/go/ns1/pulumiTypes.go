// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type MonitoringJobRule struct {
	// The comparison to perform on the the output.
	Comparison string `pulumi:"comparison"`
	// The output key.
	Key string `pulumi:"key"`
	// The value to compare to.
	Value string `pulumi:"value"`
}

// MonitoringJobRuleInput is an input type that accepts MonitoringJobRuleArgs and MonitoringJobRuleOutput values.
// You can construct a concrete instance of `MonitoringJobRuleInput` via:
//
// 		 MonitoringJobRuleArgs{...}
//
type MonitoringJobRuleInput interface {
	pulumi.Input

	ToMonitoringJobRuleOutput() MonitoringJobRuleOutput
	ToMonitoringJobRuleOutputWithContext(context.Context) MonitoringJobRuleOutput
}

type MonitoringJobRuleArgs struct {
	// The comparison to perform on the the output.
	Comparison pulumi.StringInput `pulumi:"comparison"`
	// The output key.
	Key pulumi.StringInput `pulumi:"key"`
	// The value to compare to.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MonitoringJobRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringJobRule)(nil)).Elem()
}

func (i MonitoringJobRuleArgs) ToMonitoringJobRuleOutput() MonitoringJobRuleOutput {
	return i.ToMonitoringJobRuleOutputWithContext(context.Background())
}

func (i MonitoringJobRuleArgs) ToMonitoringJobRuleOutputWithContext(ctx context.Context) MonitoringJobRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringJobRuleOutput)
}

// MonitoringJobRuleArrayInput is an input type that accepts MonitoringJobRuleArray and MonitoringJobRuleArrayOutput values.
// You can construct a concrete instance of `MonitoringJobRuleArrayInput` via:
//
// 		 MonitoringJobRuleArray{ MonitoringJobRuleArgs{...} }
//
type MonitoringJobRuleArrayInput interface {
	pulumi.Input

	ToMonitoringJobRuleArrayOutput() MonitoringJobRuleArrayOutput
	ToMonitoringJobRuleArrayOutputWithContext(context.Context) MonitoringJobRuleArrayOutput
}

type MonitoringJobRuleArray []MonitoringJobRuleInput

func (MonitoringJobRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringJobRule)(nil)).Elem()
}

func (i MonitoringJobRuleArray) ToMonitoringJobRuleArrayOutput() MonitoringJobRuleArrayOutput {
	return i.ToMonitoringJobRuleArrayOutputWithContext(context.Background())
}

func (i MonitoringJobRuleArray) ToMonitoringJobRuleArrayOutputWithContext(ctx context.Context) MonitoringJobRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringJobRuleArrayOutput)
}

type MonitoringJobRuleOutput struct{ *pulumi.OutputState }

func (MonitoringJobRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringJobRule)(nil)).Elem()
}

func (o MonitoringJobRuleOutput) ToMonitoringJobRuleOutput() MonitoringJobRuleOutput {
	return o
}

func (o MonitoringJobRuleOutput) ToMonitoringJobRuleOutputWithContext(ctx context.Context) MonitoringJobRuleOutput {
	return o
}

// The comparison to perform on the the output.
func (o MonitoringJobRuleOutput) Comparison() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringJobRule) string { return v.Comparison }).(pulumi.StringOutput)
}

// The output key.
func (o MonitoringJobRuleOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringJobRule) string { return v.Key }).(pulumi.StringOutput)
}

// The value to compare to.
func (o MonitoringJobRuleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringJobRule) string { return v.Value }).(pulumi.StringOutput)
}

type MonitoringJobRuleArrayOutput struct{ *pulumi.OutputState }

func (MonitoringJobRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringJobRule)(nil)).Elem()
}

func (o MonitoringJobRuleArrayOutput) ToMonitoringJobRuleArrayOutput() MonitoringJobRuleArrayOutput {
	return o
}

func (o MonitoringJobRuleArrayOutput) ToMonitoringJobRuleArrayOutputWithContext(ctx context.Context) MonitoringJobRuleArrayOutput {
	return o
}

func (o MonitoringJobRuleArrayOutput) Index(i pulumi.IntInput) MonitoringJobRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoringJobRule {
		return vs[0].([]MonitoringJobRule)[vs[1].(int)]
	}).(MonitoringJobRuleOutput)
}

type NotifyListNotification struct {
	// Configuration details for the given notifier type.
	Config map[string]interface{} `pulumi:"config"`
	// The type of notifier. Available notifiers are indicated in /notifytypes endpoint.
	Type string `pulumi:"type"`
}

// NotifyListNotificationInput is an input type that accepts NotifyListNotificationArgs and NotifyListNotificationOutput values.
// You can construct a concrete instance of `NotifyListNotificationInput` via:
//
// 		 NotifyListNotificationArgs{...}
//
type NotifyListNotificationInput interface {
	pulumi.Input

	ToNotifyListNotificationOutput() NotifyListNotificationOutput
	ToNotifyListNotificationOutputWithContext(context.Context) NotifyListNotificationOutput
}

type NotifyListNotificationArgs struct {
	// Configuration details for the given notifier type.
	Config pulumi.MapInput `pulumi:"config"`
	// The type of notifier. Available notifiers are indicated in /notifytypes endpoint.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NotifyListNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyListNotification)(nil)).Elem()
}

func (i NotifyListNotificationArgs) ToNotifyListNotificationOutput() NotifyListNotificationOutput {
	return i.ToNotifyListNotificationOutputWithContext(context.Background())
}

func (i NotifyListNotificationArgs) ToNotifyListNotificationOutputWithContext(ctx context.Context) NotifyListNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyListNotificationOutput)
}

// NotifyListNotificationArrayInput is an input type that accepts NotifyListNotificationArray and NotifyListNotificationArrayOutput values.
// You can construct a concrete instance of `NotifyListNotificationArrayInput` via:
//
// 		 NotifyListNotificationArray{ NotifyListNotificationArgs{...} }
//
type NotifyListNotificationArrayInput interface {
	pulumi.Input

	ToNotifyListNotificationArrayOutput() NotifyListNotificationArrayOutput
	ToNotifyListNotificationArrayOutputWithContext(context.Context) NotifyListNotificationArrayOutput
}

type NotifyListNotificationArray []NotifyListNotificationInput

func (NotifyListNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotifyListNotification)(nil)).Elem()
}

func (i NotifyListNotificationArray) ToNotifyListNotificationArrayOutput() NotifyListNotificationArrayOutput {
	return i.ToNotifyListNotificationArrayOutputWithContext(context.Background())
}

func (i NotifyListNotificationArray) ToNotifyListNotificationArrayOutputWithContext(ctx context.Context) NotifyListNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyListNotificationArrayOutput)
}

type NotifyListNotificationOutput struct{ *pulumi.OutputState }

func (NotifyListNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyListNotification)(nil)).Elem()
}

func (o NotifyListNotificationOutput) ToNotifyListNotificationOutput() NotifyListNotificationOutput {
	return o
}

func (o NotifyListNotificationOutput) ToNotifyListNotificationOutputWithContext(ctx context.Context) NotifyListNotificationOutput {
	return o
}

// Configuration details for the given notifier type.
func (o NotifyListNotificationOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v NotifyListNotification) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The type of notifier. Available notifiers are indicated in /notifytypes endpoint.
func (o NotifyListNotificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NotifyListNotification) string { return v.Type }).(pulumi.StringOutput)
}

type NotifyListNotificationArrayOutput struct{ *pulumi.OutputState }

func (NotifyListNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotifyListNotification)(nil)).Elem()
}

func (o NotifyListNotificationArrayOutput) ToNotifyListNotificationArrayOutput() NotifyListNotificationArrayOutput {
	return o
}

func (o NotifyListNotificationArrayOutput) ToNotifyListNotificationArrayOutputWithContext(ctx context.Context) NotifyListNotificationArrayOutput {
	return o
}

func (o NotifyListNotificationArrayOutput) Index(i pulumi.IntInput) NotifyListNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotifyListNotification {
		return vs[0].([]NotifyListNotification)[vs[1].(int)]
	}).(NotifyListNotificationOutput)
}

type RecordAnswer struct {
	// Space delimited string of RDATA fields dependent on the record type.
	Answer *string                `pulumi:"answer"`
	Meta   map[string]interface{} `pulumi:"meta"`
	// The region (Answer Group really) that this answer
	// belongs to. This should be one of the names specified in `regions`. Only a
	// single `region` per answer is currently supported. If you want an answer in
	// multiple regions, duplicating the answer (including metadata) is the correct
	// approach.
	// * ` meta` - (Optional) meta is supported at the `answer` level. Meta
	// is documented below.
	Region *string `pulumi:"region"`
}

// RecordAnswerInput is an input type that accepts RecordAnswerArgs and RecordAnswerOutput values.
// You can construct a concrete instance of `RecordAnswerInput` via:
//
// 		 RecordAnswerArgs{...}
//
type RecordAnswerInput interface {
	pulumi.Input

	ToRecordAnswerOutput() RecordAnswerOutput
	ToRecordAnswerOutputWithContext(context.Context) RecordAnswerOutput
}

type RecordAnswerArgs struct {
	// Space delimited string of RDATA fields dependent on the record type.
	Answer pulumi.StringPtrInput `pulumi:"answer"`
	Meta   pulumi.MapInput       `pulumi:"meta"`
	// The region (Answer Group really) that this answer
	// belongs to. This should be one of the names specified in `regions`. Only a
	// single `region` per answer is currently supported. If you want an answer in
	// multiple regions, duplicating the answer (including metadata) is the correct
	// approach.
	// * ` meta` - (Optional) meta is supported at the `answer` level. Meta
	// is documented below.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (RecordAnswerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAnswer)(nil)).Elem()
}

func (i RecordAnswerArgs) ToRecordAnswerOutput() RecordAnswerOutput {
	return i.ToRecordAnswerOutputWithContext(context.Background())
}

func (i RecordAnswerArgs) ToRecordAnswerOutputWithContext(ctx context.Context) RecordAnswerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAnswerOutput)
}

// RecordAnswerArrayInput is an input type that accepts RecordAnswerArray and RecordAnswerArrayOutput values.
// You can construct a concrete instance of `RecordAnswerArrayInput` via:
//
// 		 RecordAnswerArray{ RecordAnswerArgs{...} }
//
type RecordAnswerArrayInput interface {
	pulumi.Input

	ToRecordAnswerArrayOutput() RecordAnswerArrayOutput
	ToRecordAnswerArrayOutputWithContext(context.Context) RecordAnswerArrayOutput
}

type RecordAnswerArray []RecordAnswerInput

func (RecordAnswerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAnswer)(nil)).Elem()
}

func (i RecordAnswerArray) ToRecordAnswerArrayOutput() RecordAnswerArrayOutput {
	return i.ToRecordAnswerArrayOutputWithContext(context.Background())
}

func (i RecordAnswerArray) ToRecordAnswerArrayOutputWithContext(ctx context.Context) RecordAnswerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAnswerArrayOutput)
}

type RecordAnswerOutput struct{ *pulumi.OutputState }

func (RecordAnswerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAnswer)(nil)).Elem()
}

func (o RecordAnswerOutput) ToRecordAnswerOutput() RecordAnswerOutput {
	return o
}

func (o RecordAnswerOutput) ToRecordAnswerOutputWithContext(ctx context.Context) RecordAnswerOutput {
	return o
}

// Space delimited string of RDATA fields dependent on the record type.
func (o RecordAnswerOutput) Answer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAnswer) *string { return v.Answer }).(pulumi.StringPtrOutput)
}

func (o RecordAnswerOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v RecordAnswer) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

// The region (Answer Group really) that this answer
// belongs to. This should be one of the names specified in `regions`. Only a
// single `region` per answer is currently supported. If you want an answer in
// multiple regions, duplicating the answer (including metadata) is the correct
// approach.
// * ` meta` - (Optional) meta is supported at the `answer` level. Meta
// is documented below.
func (o RecordAnswerOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAnswer) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type RecordAnswerArrayOutput struct{ *pulumi.OutputState }

func (RecordAnswerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAnswer)(nil)).Elem()
}

func (o RecordAnswerArrayOutput) ToRecordAnswerArrayOutput() RecordAnswerArrayOutput {
	return o
}

func (o RecordAnswerArrayOutput) ToRecordAnswerArrayOutputWithContext(ctx context.Context) RecordAnswerArrayOutput {
	return o
}

func (o RecordAnswerArrayOutput) Index(i pulumi.IntInput) RecordAnswerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordAnswer {
		return vs[0].([]RecordAnswer)[vs[1].(int)]
	}).(RecordAnswerOutput)
}

type RecordFilter struct {
	// The filters' configuration. Simple key/value pairs
	// determined by the filter type.
	Config map[string]interface{} `pulumi:"config"`
	// Determines whether the filter is applied in the
	// filter chain.
	Disabled *bool `pulumi:"disabled"`
	// The type of filter.
	Filter string `pulumi:"filter"`
}

// RecordFilterInput is an input type that accepts RecordFilterArgs and RecordFilterOutput values.
// You can construct a concrete instance of `RecordFilterInput` via:
//
// 		 RecordFilterArgs{...}
//
type RecordFilterInput interface {
	pulumi.Input

	ToRecordFilterOutput() RecordFilterOutput
	ToRecordFilterOutputWithContext(context.Context) RecordFilterOutput
}

type RecordFilterArgs struct {
	// The filters' configuration. Simple key/value pairs
	// determined by the filter type.
	Config pulumi.MapInput `pulumi:"config"`
	// Determines whether the filter is applied in the
	// filter chain.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The type of filter.
	Filter pulumi.StringInput `pulumi:"filter"`
}

func (RecordFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFilter)(nil)).Elem()
}

func (i RecordFilterArgs) ToRecordFilterOutput() RecordFilterOutput {
	return i.ToRecordFilterOutputWithContext(context.Background())
}

func (i RecordFilterArgs) ToRecordFilterOutputWithContext(ctx context.Context) RecordFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFilterOutput)
}

// RecordFilterArrayInput is an input type that accepts RecordFilterArray and RecordFilterArrayOutput values.
// You can construct a concrete instance of `RecordFilterArrayInput` via:
//
// 		 RecordFilterArray{ RecordFilterArgs{...} }
//
type RecordFilterArrayInput interface {
	pulumi.Input

	ToRecordFilterArrayOutput() RecordFilterArrayOutput
	ToRecordFilterArrayOutputWithContext(context.Context) RecordFilterArrayOutput
}

type RecordFilterArray []RecordFilterInput

func (RecordFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFilter)(nil)).Elem()
}

func (i RecordFilterArray) ToRecordFilterArrayOutput() RecordFilterArrayOutput {
	return i.ToRecordFilterArrayOutputWithContext(context.Background())
}

func (i RecordFilterArray) ToRecordFilterArrayOutputWithContext(ctx context.Context) RecordFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFilterArrayOutput)
}

type RecordFilterOutput struct{ *pulumi.OutputState }

func (RecordFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFilter)(nil)).Elem()
}

func (o RecordFilterOutput) ToRecordFilterOutput() RecordFilterOutput {
	return o
}

func (o RecordFilterOutput) ToRecordFilterOutputWithContext(ctx context.Context) RecordFilterOutput {
	return o
}

// The filters' configuration. Simple key/value pairs
// determined by the filter type.
func (o RecordFilterOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v RecordFilter) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// Determines whether the filter is applied in the
// filter chain.
func (o RecordFilterOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RecordFilter) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The type of filter.
func (o RecordFilterOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v RecordFilter) string { return v.Filter }).(pulumi.StringOutput)
}

type RecordFilterArrayOutput struct{ *pulumi.OutputState }

func (RecordFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFilter)(nil)).Elem()
}

func (o RecordFilterArrayOutput) ToRecordFilterArrayOutput() RecordFilterArrayOutput {
	return o
}

func (o RecordFilterArrayOutput) ToRecordFilterArrayOutputWithContext(ctx context.Context) RecordFilterArrayOutput {
	return o
}

func (o RecordFilterArrayOutput) Index(i pulumi.IntInput) RecordFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordFilter {
		return vs[0].([]RecordFilter)[vs[1].(int)]
	}).(RecordFilterOutput)
}

type RecordRegion struct {
	Meta map[string]interface{} `pulumi:"meta"`
	// Name of the region (or Answer Group).
	Name string `pulumi:"name"`
}

// RecordRegionInput is an input type that accepts RecordRegionArgs and RecordRegionOutput values.
// You can construct a concrete instance of `RecordRegionInput` via:
//
// 		 RecordRegionArgs{...}
//
type RecordRegionInput interface {
	pulumi.Input

	ToRecordRegionOutput() RecordRegionOutput
	ToRecordRegionOutputWithContext(context.Context) RecordRegionOutput
}

type RecordRegionArgs struct {
	Meta pulumi.MapInput `pulumi:"meta"`
	// Name of the region (or Answer Group).
	Name pulumi.StringInput `pulumi:"name"`
}

func (RecordRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordRegion)(nil)).Elem()
}

func (i RecordRegionArgs) ToRecordRegionOutput() RecordRegionOutput {
	return i.ToRecordRegionOutputWithContext(context.Background())
}

func (i RecordRegionArgs) ToRecordRegionOutputWithContext(ctx context.Context) RecordRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordRegionOutput)
}

// RecordRegionArrayInput is an input type that accepts RecordRegionArray and RecordRegionArrayOutput values.
// You can construct a concrete instance of `RecordRegionArrayInput` via:
//
// 		 RecordRegionArray{ RecordRegionArgs{...} }
//
type RecordRegionArrayInput interface {
	pulumi.Input

	ToRecordRegionArrayOutput() RecordRegionArrayOutput
	ToRecordRegionArrayOutputWithContext(context.Context) RecordRegionArrayOutput
}

type RecordRegionArray []RecordRegionInput

func (RecordRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordRegion)(nil)).Elem()
}

func (i RecordRegionArray) ToRecordRegionArrayOutput() RecordRegionArrayOutput {
	return i.ToRecordRegionArrayOutputWithContext(context.Background())
}

func (i RecordRegionArray) ToRecordRegionArrayOutputWithContext(ctx context.Context) RecordRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordRegionArrayOutput)
}

type RecordRegionOutput struct{ *pulumi.OutputState }

func (RecordRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordRegion)(nil)).Elem()
}

func (o RecordRegionOutput) ToRecordRegionOutput() RecordRegionOutput {
	return o
}

func (o RecordRegionOutput) ToRecordRegionOutputWithContext(ctx context.Context) RecordRegionOutput {
	return o
}

func (o RecordRegionOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v RecordRegion) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

// Name of the region (or Answer Group).
func (o RecordRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RecordRegion) string { return v.Name }).(pulumi.StringOutput)
}

type RecordRegionArrayOutput struct{ *pulumi.OutputState }

func (RecordRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordRegion)(nil)).Elem()
}

func (o RecordRegionArrayOutput) ToRecordRegionArrayOutput() RecordRegionArrayOutput {
	return o
}

func (o RecordRegionArrayOutput) ToRecordRegionArrayOutputWithContext(ctx context.Context) RecordRegionArrayOutput {
	return o
}

func (o RecordRegionArrayOutput) Index(i pulumi.IntInput) RecordRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordRegion {
		return vs[0].([]RecordRegion)[vs[1].(int)]
	}).(RecordRegionOutput)
}

type TeamIpWhitelist struct {
	// The free form name of the team.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// TeamIpWhitelistInput is an input type that accepts TeamIpWhitelistArgs and TeamIpWhitelistOutput values.
// You can construct a concrete instance of `TeamIpWhitelistInput` via:
//
// 		 TeamIpWhitelistArgs{...}
//
type TeamIpWhitelistInput interface {
	pulumi.Input

	ToTeamIpWhitelistOutput() TeamIpWhitelistOutput
	ToTeamIpWhitelistOutputWithContext(context.Context) TeamIpWhitelistOutput
}

type TeamIpWhitelistArgs struct {
	// The free form name of the team.
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TeamIpWhitelistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamIpWhitelist)(nil)).Elem()
}

func (i TeamIpWhitelistArgs) ToTeamIpWhitelistOutput() TeamIpWhitelistOutput {
	return i.ToTeamIpWhitelistOutputWithContext(context.Background())
}

func (i TeamIpWhitelistArgs) ToTeamIpWhitelistOutputWithContext(ctx context.Context) TeamIpWhitelistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamIpWhitelistOutput)
}

// TeamIpWhitelistArrayInput is an input type that accepts TeamIpWhitelistArray and TeamIpWhitelistArrayOutput values.
// You can construct a concrete instance of `TeamIpWhitelistArrayInput` via:
//
// 		 TeamIpWhitelistArray{ TeamIpWhitelistArgs{...} }
//
type TeamIpWhitelistArrayInput interface {
	pulumi.Input

	ToTeamIpWhitelistArrayOutput() TeamIpWhitelistArrayOutput
	ToTeamIpWhitelistArrayOutputWithContext(context.Context) TeamIpWhitelistArrayOutput
}

type TeamIpWhitelistArray []TeamIpWhitelistInput

func (TeamIpWhitelistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamIpWhitelist)(nil)).Elem()
}

func (i TeamIpWhitelistArray) ToTeamIpWhitelistArrayOutput() TeamIpWhitelistArrayOutput {
	return i.ToTeamIpWhitelistArrayOutputWithContext(context.Background())
}

func (i TeamIpWhitelistArray) ToTeamIpWhitelistArrayOutputWithContext(ctx context.Context) TeamIpWhitelistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamIpWhitelistArrayOutput)
}

type TeamIpWhitelistOutput struct{ *pulumi.OutputState }

func (TeamIpWhitelistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamIpWhitelist)(nil)).Elem()
}

func (o TeamIpWhitelistOutput) ToTeamIpWhitelistOutput() TeamIpWhitelistOutput {
	return o
}

func (o TeamIpWhitelistOutput) ToTeamIpWhitelistOutputWithContext(ctx context.Context) TeamIpWhitelistOutput {
	return o
}

// The free form name of the team.
func (o TeamIpWhitelistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TeamIpWhitelist) string { return v.Name }).(pulumi.StringOutput)
}

func (o TeamIpWhitelistOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TeamIpWhitelist) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TeamIpWhitelistArrayOutput struct{ *pulumi.OutputState }

func (TeamIpWhitelistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamIpWhitelist)(nil)).Elem()
}

func (o TeamIpWhitelistArrayOutput) ToTeamIpWhitelistArrayOutput() TeamIpWhitelistArrayOutput {
	return o
}

func (o TeamIpWhitelistArrayOutput) ToTeamIpWhitelistArrayOutputWithContext(ctx context.Context) TeamIpWhitelistArrayOutput {
	return o
}

func (o TeamIpWhitelistArrayOutput) Index(i pulumi.IntInput) TeamIpWhitelistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamIpWhitelist {
		return vs[0].([]TeamIpWhitelist)[vs[1].(int)]
	}).(TeamIpWhitelistOutput)
}

type ZoneSecondary struct {
	// IPv4 address of the secondary server.
	Ip string `pulumi:"ip"`
	// - List of network IDs (`int`) for which the zone
	// should be made available. Default is network 0, the primary NSONE Global
	// Network. Normally, you should not have to worry about this.
	Networks []int `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify *bool `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port *int `pulumi:"port"`
}

// ZoneSecondaryInput is an input type that accepts ZoneSecondaryArgs and ZoneSecondaryOutput values.
// You can construct a concrete instance of `ZoneSecondaryInput` via:
//
// 		 ZoneSecondaryArgs{...}
//
type ZoneSecondaryInput interface {
	pulumi.Input

	ToZoneSecondaryOutput() ZoneSecondaryOutput
	ToZoneSecondaryOutputWithContext(context.Context) ZoneSecondaryOutput
}

type ZoneSecondaryArgs struct {
	// IPv4 address of the secondary server.
	Ip pulumi.StringInput `pulumi:"ip"`
	// - List of network IDs (`int`) for which the zone
	// should be made available. Default is network 0, the primary NSONE Global
	// Network. Normally, you should not have to worry about this.
	Networks pulumi.IntArrayInput `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify pulumi.BoolPtrInput `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ZoneSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneSecondary)(nil)).Elem()
}

func (i ZoneSecondaryArgs) ToZoneSecondaryOutput() ZoneSecondaryOutput {
	return i.ToZoneSecondaryOutputWithContext(context.Background())
}

func (i ZoneSecondaryArgs) ToZoneSecondaryOutputWithContext(ctx context.Context) ZoneSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSecondaryOutput)
}

// ZoneSecondaryArrayInput is an input type that accepts ZoneSecondaryArray and ZoneSecondaryArrayOutput values.
// You can construct a concrete instance of `ZoneSecondaryArrayInput` via:
//
// 		 ZoneSecondaryArray{ ZoneSecondaryArgs{...} }
//
type ZoneSecondaryArrayInput interface {
	pulumi.Input

	ToZoneSecondaryArrayOutput() ZoneSecondaryArrayOutput
	ToZoneSecondaryArrayOutputWithContext(context.Context) ZoneSecondaryArrayOutput
}

type ZoneSecondaryArray []ZoneSecondaryInput

func (ZoneSecondaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneSecondary)(nil)).Elem()
}

func (i ZoneSecondaryArray) ToZoneSecondaryArrayOutput() ZoneSecondaryArrayOutput {
	return i.ToZoneSecondaryArrayOutputWithContext(context.Background())
}

func (i ZoneSecondaryArray) ToZoneSecondaryArrayOutputWithContext(ctx context.Context) ZoneSecondaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSecondaryArrayOutput)
}

type ZoneSecondaryOutput struct{ *pulumi.OutputState }

func (ZoneSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneSecondary)(nil)).Elem()
}

func (o ZoneSecondaryOutput) ToZoneSecondaryOutput() ZoneSecondaryOutput {
	return o
}

func (o ZoneSecondaryOutput) ToZoneSecondaryOutputWithContext(ctx context.Context) ZoneSecondaryOutput {
	return o
}

// IPv4 address of the secondary server.
func (o ZoneSecondaryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneSecondary) string { return v.Ip }).(pulumi.StringOutput)
}

// - List of network IDs (`int`) for which the zone
// should be made available. Default is network 0, the primary NSONE Global
// Network. Normally, you should not have to worry about this.
func (o ZoneSecondaryOutput) Networks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ZoneSecondary) []int { return v.Networks }).(pulumi.IntArrayOutput)
}

// Whether we send `NOTIFY` messages to the secondary host
// when the zone changes. Default `false`.
func (o ZoneSecondaryOutput) Notify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ZoneSecondary) *bool { return v.Notify }).(pulumi.BoolPtrOutput)
}

// Port of the the secondary server. Default `53`.
func (o ZoneSecondaryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZoneSecondary) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ZoneSecondaryArrayOutput struct{ *pulumi.OutputState }

func (ZoneSecondaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneSecondary)(nil)).Elem()
}

func (o ZoneSecondaryArrayOutput) ToZoneSecondaryArrayOutput() ZoneSecondaryArrayOutput {
	return o
}

func (o ZoneSecondaryArrayOutput) ToZoneSecondaryArrayOutputWithContext(ctx context.Context) ZoneSecondaryArrayOutput {
	return o
}

func (o ZoneSecondaryArrayOutput) Index(i pulumi.IntInput) ZoneSecondaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneSecondary {
		return vs[0].([]ZoneSecondary)[vs[1].(int)]
	}).(ZoneSecondaryOutput)
}

type GetDNSSecDelegation struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys []GetDNSSecDelegationDnskey `pulumi:"dnskeys"`
	// (Computed) List of Keys. Key is documented below.
	Ds []GetDNSSecDelegationD `pulumi:"ds"`
	// (Computed) TTL for the Keys (int).
	Ttl int `pulumi:"ttl"`
}

// GetDNSSecDelegationInput is an input type that accepts GetDNSSecDelegationArgs and GetDNSSecDelegationOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationInput` via:
//
// 		 GetDNSSecDelegationArgs{...}
//
type GetDNSSecDelegationInput interface {
	pulumi.Input

	ToGetDNSSecDelegationOutput() GetDNSSecDelegationOutput
	ToGetDNSSecDelegationOutputWithContext(context.Context) GetDNSSecDelegationOutput
}

type GetDNSSecDelegationArgs struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys GetDNSSecDelegationDnskeyArrayInput `pulumi:"dnskeys"`
	// (Computed) List of Keys. Key is documented below.
	Ds GetDNSSecDelegationDArrayInput `pulumi:"ds"`
	// (Computed) TTL for the Keys (int).
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (GetDNSSecDelegationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegation)(nil)).Elem()
}

func (i GetDNSSecDelegationArgs) ToGetDNSSecDelegationOutput() GetDNSSecDelegationOutput {
	return i.ToGetDNSSecDelegationOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationArgs) ToGetDNSSecDelegationOutputWithContext(ctx context.Context) GetDNSSecDelegationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationOutput)
}

type GetDNSSecDelegationOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegation)(nil)).Elem()
}

func (o GetDNSSecDelegationOutput) ToGetDNSSecDelegationOutput() GetDNSSecDelegationOutput {
	return o
}

func (o GetDNSSecDelegationOutput) ToGetDNSSecDelegationOutputWithContext(ctx context.Context) GetDNSSecDelegationOutput {
	return o
}

// (Computed) List of Keys. Key is documented below.
func (o GetDNSSecDelegationOutput) Dnskeys() GetDNSSecDelegationDnskeyArrayOutput {
	return o.ApplyT(func(v GetDNSSecDelegation) []GetDNSSecDelegationDnskey { return v.Dnskeys }).(GetDNSSecDelegationDnskeyArrayOutput)
}

// (Computed) List of Keys. Key is documented below.
func (o GetDNSSecDelegationOutput) Ds() GetDNSSecDelegationDArrayOutput {
	return o.ApplyT(func(v GetDNSSecDelegation) []GetDNSSecDelegationD { return v.Ds }).(GetDNSSecDelegationDArrayOutput)
}

// (Computed) TTL for the Keys (int).
func (o GetDNSSecDelegationOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetDNSSecDelegation) int { return v.Ttl }).(pulumi.IntOutput)
}

type GetDNSSecDelegationD struct {
	// (Computed) Algorithm of the key.
	Algorithm string `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags string `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol string `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey string `pulumi:"publicKey"`
}

// GetDNSSecDelegationDInput is an input type that accepts GetDNSSecDelegationDArgs and GetDNSSecDelegationDOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDInput` via:
//
// 		 GetDNSSecDelegationDArgs{...}
//
type GetDNSSecDelegationDInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDOutput() GetDNSSecDelegationDOutput
	ToGetDNSSecDelegationDOutputWithContext(context.Context) GetDNSSecDelegationDOutput
}

type GetDNSSecDelegationDArgs struct {
	// (Computed) Algorithm of the key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags pulumi.StringInput `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetDNSSecDelegationDArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationD)(nil)).Elem()
}

func (i GetDNSSecDelegationDArgs) ToGetDNSSecDelegationDOutput() GetDNSSecDelegationDOutput {
	return i.ToGetDNSSecDelegationDOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDArgs) ToGetDNSSecDelegationDOutputWithContext(ctx context.Context) GetDNSSecDelegationDOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDOutput)
}

// GetDNSSecDelegationDArrayInput is an input type that accepts GetDNSSecDelegationDArray and GetDNSSecDelegationDArrayOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDArrayInput` via:
//
// 		 GetDNSSecDelegationDArray{ GetDNSSecDelegationDArgs{...} }
//
type GetDNSSecDelegationDArrayInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDArrayOutput() GetDNSSecDelegationDArrayOutput
	ToGetDNSSecDelegationDArrayOutputWithContext(context.Context) GetDNSSecDelegationDArrayOutput
}

type GetDNSSecDelegationDArray []GetDNSSecDelegationDInput

func (GetDNSSecDelegationDArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationD)(nil)).Elem()
}

func (i GetDNSSecDelegationDArray) ToGetDNSSecDelegationDArrayOutput() GetDNSSecDelegationDArrayOutput {
	return i.ToGetDNSSecDelegationDArrayOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDArray) ToGetDNSSecDelegationDArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDArrayOutput)
}

type GetDNSSecDelegationDOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationD)(nil)).Elem()
}

func (o GetDNSSecDelegationDOutput) ToGetDNSSecDelegationDOutput() GetDNSSecDelegationDOutput {
	return o
}

func (o GetDNSSecDelegationDOutput) ToGetDNSSecDelegationDOutputWithContext(ctx context.Context) GetDNSSecDelegationDOutput {
	return o
}

// (Computed) Algorithm of the key.
func (o GetDNSSecDelegationDOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.Algorithm }).(pulumi.StringOutput)
}

// (Computed) Flags for the key.
func (o GetDNSSecDelegationDOutput) Flags() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.Flags }).(pulumi.StringOutput)
}

// (Computed) Protocol of the key.
func (o GetDNSSecDelegationDOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Computed) Public key for the key.
func (o GetDNSSecDelegationDOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetDNSSecDelegationDArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationD)(nil)).Elem()
}

func (o GetDNSSecDelegationDArrayOutput) ToGetDNSSecDelegationDArrayOutput() GetDNSSecDelegationDArrayOutput {
	return o
}

func (o GetDNSSecDelegationDArrayOutput) ToGetDNSSecDelegationDArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDArrayOutput {
	return o
}

func (o GetDNSSecDelegationDArrayOutput) Index(i pulumi.IntInput) GetDNSSecDelegationDOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecDelegationD {
		return vs[0].([]GetDNSSecDelegationD)[vs[1].(int)]
	}).(GetDNSSecDelegationDOutput)
}

type GetDNSSecDelegationDnskey struct {
	// (Computed) Algorithm of the key.
	Algorithm string `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags string `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol string `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey string `pulumi:"publicKey"`
}

// GetDNSSecDelegationDnskeyInput is an input type that accepts GetDNSSecDelegationDnskeyArgs and GetDNSSecDelegationDnskeyOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDnskeyInput` via:
//
// 		 GetDNSSecDelegationDnskeyArgs{...}
//
type GetDNSSecDelegationDnskeyInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDnskeyOutput() GetDNSSecDelegationDnskeyOutput
	ToGetDNSSecDelegationDnskeyOutputWithContext(context.Context) GetDNSSecDelegationDnskeyOutput
}

type GetDNSSecDelegationDnskeyArgs struct {
	// (Computed) Algorithm of the key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags pulumi.StringInput `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetDNSSecDelegationDnskeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (i GetDNSSecDelegationDnskeyArgs) ToGetDNSSecDelegationDnskeyOutput() GetDNSSecDelegationDnskeyOutput {
	return i.ToGetDNSSecDelegationDnskeyOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDnskeyArgs) ToGetDNSSecDelegationDnskeyOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDnskeyOutput)
}

// GetDNSSecDelegationDnskeyArrayInput is an input type that accepts GetDNSSecDelegationDnskeyArray and GetDNSSecDelegationDnskeyArrayOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDnskeyArrayInput` via:
//
// 		 GetDNSSecDelegationDnskeyArray{ GetDNSSecDelegationDnskeyArgs{...} }
//
type GetDNSSecDelegationDnskeyArrayInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDnskeyArrayOutput() GetDNSSecDelegationDnskeyArrayOutput
	ToGetDNSSecDelegationDnskeyArrayOutputWithContext(context.Context) GetDNSSecDelegationDnskeyArrayOutput
}

type GetDNSSecDelegationDnskeyArray []GetDNSSecDelegationDnskeyInput

func (GetDNSSecDelegationDnskeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (i GetDNSSecDelegationDnskeyArray) ToGetDNSSecDelegationDnskeyArrayOutput() GetDNSSecDelegationDnskeyArrayOutput {
	return i.ToGetDNSSecDelegationDnskeyArrayOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDnskeyArray) ToGetDNSSecDelegationDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDnskeyArrayOutput)
}

type GetDNSSecDelegationDnskeyOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDnskeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (o GetDNSSecDelegationDnskeyOutput) ToGetDNSSecDelegationDnskeyOutput() GetDNSSecDelegationDnskeyOutput {
	return o
}

func (o GetDNSSecDelegationDnskeyOutput) ToGetDNSSecDelegationDnskeyOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyOutput {
	return o
}

// (Computed) Algorithm of the key.
func (o GetDNSSecDelegationDnskeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// (Computed) Flags for the key.
func (o GetDNSSecDelegationDnskeyOutput) Flags() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.Flags }).(pulumi.StringOutput)
}

// (Computed) Protocol of the key.
func (o GetDNSSecDelegationDnskeyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Computed) Public key for the key.
func (o GetDNSSecDelegationDnskeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetDNSSecDelegationDnskeyArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDnskeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (o GetDNSSecDelegationDnskeyArrayOutput) ToGetDNSSecDelegationDnskeyArrayOutput() GetDNSSecDelegationDnskeyArrayOutput {
	return o
}

func (o GetDNSSecDelegationDnskeyArrayOutput) ToGetDNSSecDelegationDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyArrayOutput {
	return o
}

func (o GetDNSSecDelegationDnskeyArrayOutput) Index(i pulumi.IntInput) GetDNSSecDelegationDnskeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecDelegationDnskey {
		return vs[0].([]GetDNSSecDelegationDnskey)[vs[1].(int)]
	}).(GetDNSSecDelegationDnskeyOutput)
}

type GetDNSSecKeys struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys []GetDNSSecKeysDnskey `pulumi:"dnskeys"`
	// (Computed) TTL for the Keys (int).
	Ttl int `pulumi:"ttl"`
}

// GetDNSSecKeysInput is an input type that accepts GetDNSSecKeysArgs and GetDNSSecKeysOutput values.
// You can construct a concrete instance of `GetDNSSecKeysInput` via:
//
// 		 GetDNSSecKeysArgs{...}
//
type GetDNSSecKeysInput interface {
	pulumi.Input

	ToGetDNSSecKeysOutput() GetDNSSecKeysOutput
	ToGetDNSSecKeysOutputWithContext(context.Context) GetDNSSecKeysOutput
}

type GetDNSSecKeysArgs struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys GetDNSSecKeysDnskeyArrayInput `pulumi:"dnskeys"`
	// (Computed) TTL for the Keys (int).
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (GetDNSSecKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeys)(nil)).Elem()
}

func (i GetDNSSecKeysArgs) ToGetDNSSecKeysOutput() GetDNSSecKeysOutput {
	return i.ToGetDNSSecKeysOutputWithContext(context.Background())
}

func (i GetDNSSecKeysArgs) ToGetDNSSecKeysOutputWithContext(ctx context.Context) GetDNSSecKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeysOutput)
}

type GetDNSSecKeysOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeys)(nil)).Elem()
}

func (o GetDNSSecKeysOutput) ToGetDNSSecKeysOutput() GetDNSSecKeysOutput {
	return o
}

func (o GetDNSSecKeysOutput) ToGetDNSSecKeysOutputWithContext(ctx context.Context) GetDNSSecKeysOutput {
	return o
}

// (Computed) List of Keys. Key is documented below.
func (o GetDNSSecKeysOutput) Dnskeys() GetDNSSecKeysDnskeyArrayOutput {
	return o.ApplyT(func(v GetDNSSecKeys) []GetDNSSecKeysDnskey { return v.Dnskeys }).(GetDNSSecKeysDnskeyArrayOutput)
}

// (Computed) TTL for the Keys (int).
func (o GetDNSSecKeysOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetDNSSecKeys) int { return v.Ttl }).(pulumi.IntOutput)
}

type GetDNSSecKeysDnskey struct {
	// (Computed) Algorithm of the key.
	Algorithm string `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags string `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol string `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey string `pulumi:"publicKey"`
}

// GetDNSSecKeysDnskeyInput is an input type that accepts GetDNSSecKeysDnskeyArgs and GetDNSSecKeysDnskeyOutput values.
// You can construct a concrete instance of `GetDNSSecKeysDnskeyInput` via:
//
// 		 GetDNSSecKeysDnskeyArgs{...}
//
type GetDNSSecKeysDnskeyInput interface {
	pulumi.Input

	ToGetDNSSecKeysDnskeyOutput() GetDNSSecKeysDnskeyOutput
	ToGetDNSSecKeysDnskeyOutputWithContext(context.Context) GetDNSSecKeysDnskeyOutput
}

type GetDNSSecKeysDnskeyArgs struct {
	// (Computed) Algorithm of the key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags pulumi.StringInput `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetDNSSecKeysDnskeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeysDnskey)(nil)).Elem()
}

func (i GetDNSSecKeysDnskeyArgs) ToGetDNSSecKeysDnskeyOutput() GetDNSSecKeysDnskeyOutput {
	return i.ToGetDNSSecKeysDnskeyOutputWithContext(context.Background())
}

func (i GetDNSSecKeysDnskeyArgs) ToGetDNSSecKeysDnskeyOutputWithContext(ctx context.Context) GetDNSSecKeysDnskeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeysDnskeyOutput)
}

// GetDNSSecKeysDnskeyArrayInput is an input type that accepts GetDNSSecKeysDnskeyArray and GetDNSSecKeysDnskeyArrayOutput values.
// You can construct a concrete instance of `GetDNSSecKeysDnskeyArrayInput` via:
//
// 		 GetDNSSecKeysDnskeyArray{ GetDNSSecKeysDnskeyArgs{...} }
//
type GetDNSSecKeysDnskeyArrayInput interface {
	pulumi.Input

	ToGetDNSSecKeysDnskeyArrayOutput() GetDNSSecKeysDnskeyArrayOutput
	ToGetDNSSecKeysDnskeyArrayOutputWithContext(context.Context) GetDNSSecKeysDnskeyArrayOutput
}

type GetDNSSecKeysDnskeyArray []GetDNSSecKeysDnskeyInput

func (GetDNSSecKeysDnskeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecKeysDnskey)(nil)).Elem()
}

func (i GetDNSSecKeysDnskeyArray) ToGetDNSSecKeysDnskeyArrayOutput() GetDNSSecKeysDnskeyArrayOutput {
	return i.ToGetDNSSecKeysDnskeyArrayOutputWithContext(context.Background())
}

func (i GetDNSSecKeysDnskeyArray) ToGetDNSSecKeysDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecKeysDnskeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeysDnskeyArrayOutput)
}

type GetDNSSecKeysDnskeyOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeysDnskeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeysDnskey)(nil)).Elem()
}

func (o GetDNSSecKeysDnskeyOutput) ToGetDNSSecKeysDnskeyOutput() GetDNSSecKeysDnskeyOutput {
	return o
}

func (o GetDNSSecKeysDnskeyOutput) ToGetDNSSecKeysDnskeyOutputWithContext(ctx context.Context) GetDNSSecKeysDnskeyOutput {
	return o
}

// (Computed) Algorithm of the key.
func (o GetDNSSecKeysDnskeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeysDnskey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// (Computed) Flags for the key.
func (o GetDNSSecKeysDnskeyOutput) Flags() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeysDnskey) string { return v.Flags }).(pulumi.StringOutput)
}

// (Computed) Protocol of the key.
func (o GetDNSSecKeysDnskeyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeysDnskey) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Computed) Public key for the key.
func (o GetDNSSecKeysDnskeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeysDnskey) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetDNSSecKeysDnskeyArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeysDnskeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecKeysDnskey)(nil)).Elem()
}

func (o GetDNSSecKeysDnskeyArrayOutput) ToGetDNSSecKeysDnskeyArrayOutput() GetDNSSecKeysDnskeyArrayOutput {
	return o
}

func (o GetDNSSecKeysDnskeyArrayOutput) ToGetDNSSecKeysDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecKeysDnskeyArrayOutput {
	return o
}

func (o GetDNSSecKeysDnskeyArrayOutput) Index(i pulumi.IntInput) GetDNSSecKeysDnskeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecKeysDnskey {
		return vs[0].([]GetDNSSecKeysDnskey)[vs[1].(int)]
	}).(GetDNSSecKeysDnskeyOutput)
}

type GetZoneSecondary struct {
	// IPv4 address of the secondary server.
	Ip string `pulumi:"ip"`
	// List of network IDs (`int`) for which the zone should be made
	// available. Default is network 0, the primary NSONE Global Network.
	Networks []int `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify bool `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port int `pulumi:"port"`
}

// GetZoneSecondaryInput is an input type that accepts GetZoneSecondaryArgs and GetZoneSecondaryOutput values.
// You can construct a concrete instance of `GetZoneSecondaryInput` via:
//
// 		 GetZoneSecondaryArgs{...}
//
type GetZoneSecondaryInput interface {
	pulumi.Input

	ToGetZoneSecondaryOutput() GetZoneSecondaryOutput
	ToGetZoneSecondaryOutputWithContext(context.Context) GetZoneSecondaryOutput
}

type GetZoneSecondaryArgs struct {
	// IPv4 address of the secondary server.
	Ip pulumi.StringInput `pulumi:"ip"`
	// List of network IDs (`int`) for which the zone should be made
	// available. Default is network 0, the primary NSONE Global Network.
	Networks pulumi.IntArrayInput `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify pulumi.BoolInput `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetZoneSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZoneSecondary)(nil)).Elem()
}

func (i GetZoneSecondaryArgs) ToGetZoneSecondaryOutput() GetZoneSecondaryOutput {
	return i.ToGetZoneSecondaryOutputWithContext(context.Background())
}

func (i GetZoneSecondaryArgs) ToGetZoneSecondaryOutputWithContext(ctx context.Context) GetZoneSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZoneSecondaryOutput)
}

// GetZoneSecondaryArrayInput is an input type that accepts GetZoneSecondaryArray and GetZoneSecondaryArrayOutput values.
// You can construct a concrete instance of `GetZoneSecondaryArrayInput` via:
//
// 		 GetZoneSecondaryArray{ GetZoneSecondaryArgs{...} }
//
type GetZoneSecondaryArrayInput interface {
	pulumi.Input

	ToGetZoneSecondaryArrayOutput() GetZoneSecondaryArrayOutput
	ToGetZoneSecondaryArrayOutputWithContext(context.Context) GetZoneSecondaryArrayOutput
}

type GetZoneSecondaryArray []GetZoneSecondaryInput

func (GetZoneSecondaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZoneSecondary)(nil)).Elem()
}

func (i GetZoneSecondaryArray) ToGetZoneSecondaryArrayOutput() GetZoneSecondaryArrayOutput {
	return i.ToGetZoneSecondaryArrayOutputWithContext(context.Background())
}

func (i GetZoneSecondaryArray) ToGetZoneSecondaryArrayOutputWithContext(ctx context.Context) GetZoneSecondaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZoneSecondaryArrayOutput)
}

type GetZoneSecondaryOutput struct{ *pulumi.OutputState }

func (GetZoneSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZoneSecondary)(nil)).Elem()
}

func (o GetZoneSecondaryOutput) ToGetZoneSecondaryOutput() GetZoneSecondaryOutput {
	return o
}

func (o GetZoneSecondaryOutput) ToGetZoneSecondaryOutputWithContext(ctx context.Context) GetZoneSecondaryOutput {
	return o
}

// IPv4 address of the secondary server.
func (o GetZoneSecondaryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetZoneSecondary) string { return v.Ip }).(pulumi.StringOutput)
}

// List of network IDs (`int`) for which the zone should be made
// available. Default is network 0, the primary NSONE Global Network.
func (o GetZoneSecondaryOutput) Networks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetZoneSecondary) []int { return v.Networks }).(pulumi.IntArrayOutput)
}

// Whether we send `NOTIFY` messages to the secondary host
// when the zone changes. Default `false`.
func (o GetZoneSecondaryOutput) Notify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetZoneSecondary) bool { return v.Notify }).(pulumi.BoolOutput)
}

// Port of the the secondary server. Default `53`.
func (o GetZoneSecondaryOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetZoneSecondary) int { return v.Port }).(pulumi.IntOutput)
}

type GetZoneSecondaryArrayOutput struct{ *pulumi.OutputState }

func (GetZoneSecondaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZoneSecondary)(nil)).Elem()
}

func (o GetZoneSecondaryArrayOutput) ToGetZoneSecondaryArrayOutput() GetZoneSecondaryArrayOutput {
	return o
}

func (o GetZoneSecondaryArrayOutput) ToGetZoneSecondaryArrayOutputWithContext(ctx context.Context) GetZoneSecondaryArrayOutput {
	return o
}

func (o GetZoneSecondaryArrayOutput) Index(i pulumi.IntInput) GetZoneSecondaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZoneSecondary {
		return vs[0].([]GetZoneSecondary)[vs[1].(int)]
	}).(GetZoneSecondaryOutput)
}

func init() {
	pulumi.RegisterOutputType(MonitoringJobRuleOutput{})
	pulumi.RegisterOutputType(MonitoringJobRuleArrayOutput{})
	pulumi.RegisterOutputType(NotifyListNotificationOutput{})
	pulumi.RegisterOutputType(NotifyListNotificationArrayOutput{})
	pulumi.RegisterOutputType(RecordAnswerOutput{})
	pulumi.RegisterOutputType(RecordAnswerArrayOutput{})
	pulumi.RegisterOutputType(RecordFilterOutput{})
	pulumi.RegisterOutputType(RecordFilterArrayOutput{})
	pulumi.RegisterOutputType(RecordRegionOutput{})
	pulumi.RegisterOutputType(RecordRegionArrayOutput{})
	pulumi.RegisterOutputType(TeamIpWhitelistOutput{})
	pulumi.RegisterOutputType(TeamIpWhitelistArrayOutput{})
	pulumi.RegisterOutputType(ZoneSecondaryOutput{})
	pulumi.RegisterOutputType(ZoneSecondaryArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDnskeyOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDnskeyArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeysOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeysDnskeyOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeysDnskeyArrayOutput{})
	pulumi.RegisterOutputType(GetZoneSecondaryOutput{})
	pulumi.RegisterOutputType(GetZoneSecondaryArrayOutput{})
}
