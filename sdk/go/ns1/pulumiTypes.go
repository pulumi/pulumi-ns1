// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type APIKeyDnsRecordsAllow struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// APIKeyDnsRecordsAllowInput is an input type that accepts APIKeyDnsRecordsAllowArgs and APIKeyDnsRecordsAllowOutput values.
// You can construct a concrete instance of `APIKeyDnsRecordsAllowInput` via:
//
//	APIKeyDnsRecordsAllowArgs{...}
type APIKeyDnsRecordsAllowInput interface {
	pulumi.Input

	ToAPIKeyDnsRecordsAllowOutput() APIKeyDnsRecordsAllowOutput
	ToAPIKeyDnsRecordsAllowOutputWithContext(context.Context) APIKeyDnsRecordsAllowOutput
}

type APIKeyDnsRecordsAllowArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (APIKeyDnsRecordsAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*APIKeyDnsRecordsAllow)(nil)).Elem()
}

func (i APIKeyDnsRecordsAllowArgs) ToAPIKeyDnsRecordsAllowOutput() APIKeyDnsRecordsAllowOutput {
	return i.ToAPIKeyDnsRecordsAllowOutputWithContext(context.Background())
}

func (i APIKeyDnsRecordsAllowArgs) ToAPIKeyDnsRecordsAllowOutputWithContext(ctx context.Context) APIKeyDnsRecordsAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIKeyDnsRecordsAllowOutput)
}

// APIKeyDnsRecordsAllowArrayInput is an input type that accepts APIKeyDnsRecordsAllowArray and APIKeyDnsRecordsAllowArrayOutput values.
// You can construct a concrete instance of `APIKeyDnsRecordsAllowArrayInput` via:
//
//	APIKeyDnsRecordsAllowArray{ APIKeyDnsRecordsAllowArgs{...} }
type APIKeyDnsRecordsAllowArrayInput interface {
	pulumi.Input

	ToAPIKeyDnsRecordsAllowArrayOutput() APIKeyDnsRecordsAllowArrayOutput
	ToAPIKeyDnsRecordsAllowArrayOutputWithContext(context.Context) APIKeyDnsRecordsAllowArrayOutput
}

type APIKeyDnsRecordsAllowArray []APIKeyDnsRecordsAllowInput

func (APIKeyDnsRecordsAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]APIKeyDnsRecordsAllow)(nil)).Elem()
}

func (i APIKeyDnsRecordsAllowArray) ToAPIKeyDnsRecordsAllowArrayOutput() APIKeyDnsRecordsAllowArrayOutput {
	return i.ToAPIKeyDnsRecordsAllowArrayOutputWithContext(context.Background())
}

func (i APIKeyDnsRecordsAllowArray) ToAPIKeyDnsRecordsAllowArrayOutputWithContext(ctx context.Context) APIKeyDnsRecordsAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIKeyDnsRecordsAllowArrayOutput)
}

type APIKeyDnsRecordsAllowOutput struct{ *pulumi.OutputState }

func (APIKeyDnsRecordsAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*APIKeyDnsRecordsAllow)(nil)).Elem()
}

func (o APIKeyDnsRecordsAllowOutput) ToAPIKeyDnsRecordsAllowOutput() APIKeyDnsRecordsAllowOutput {
	return o
}

func (o APIKeyDnsRecordsAllowOutput) ToAPIKeyDnsRecordsAllowOutputWithContext(ctx context.Context) APIKeyDnsRecordsAllowOutput {
	return o
}

func (o APIKeyDnsRecordsAllowOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsAllow) string { return v.Domain }).(pulumi.StringOutput)
}

func (o APIKeyDnsRecordsAllowOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsAllow) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o APIKeyDnsRecordsAllowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsAllow) string { return v.Type }).(pulumi.StringOutput)
}

func (o APIKeyDnsRecordsAllowOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsAllow) string { return v.Zone }).(pulumi.StringOutput)
}

type APIKeyDnsRecordsAllowArrayOutput struct{ *pulumi.OutputState }

func (APIKeyDnsRecordsAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]APIKeyDnsRecordsAllow)(nil)).Elem()
}

func (o APIKeyDnsRecordsAllowArrayOutput) ToAPIKeyDnsRecordsAllowArrayOutput() APIKeyDnsRecordsAllowArrayOutput {
	return o
}

func (o APIKeyDnsRecordsAllowArrayOutput) ToAPIKeyDnsRecordsAllowArrayOutputWithContext(ctx context.Context) APIKeyDnsRecordsAllowArrayOutput {
	return o
}

func (o APIKeyDnsRecordsAllowArrayOutput) Index(i pulumi.IntInput) APIKeyDnsRecordsAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) APIKeyDnsRecordsAllow {
		return vs[0].([]APIKeyDnsRecordsAllow)[vs[1].(int)]
	}).(APIKeyDnsRecordsAllowOutput)
}

type APIKeyDnsRecordsDeny struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// APIKeyDnsRecordsDenyInput is an input type that accepts APIKeyDnsRecordsDenyArgs and APIKeyDnsRecordsDenyOutput values.
// You can construct a concrete instance of `APIKeyDnsRecordsDenyInput` via:
//
//	APIKeyDnsRecordsDenyArgs{...}
type APIKeyDnsRecordsDenyInput interface {
	pulumi.Input

	ToAPIKeyDnsRecordsDenyOutput() APIKeyDnsRecordsDenyOutput
	ToAPIKeyDnsRecordsDenyOutputWithContext(context.Context) APIKeyDnsRecordsDenyOutput
}

type APIKeyDnsRecordsDenyArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (APIKeyDnsRecordsDenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*APIKeyDnsRecordsDeny)(nil)).Elem()
}

func (i APIKeyDnsRecordsDenyArgs) ToAPIKeyDnsRecordsDenyOutput() APIKeyDnsRecordsDenyOutput {
	return i.ToAPIKeyDnsRecordsDenyOutputWithContext(context.Background())
}

func (i APIKeyDnsRecordsDenyArgs) ToAPIKeyDnsRecordsDenyOutputWithContext(ctx context.Context) APIKeyDnsRecordsDenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIKeyDnsRecordsDenyOutput)
}

// APIKeyDnsRecordsDenyArrayInput is an input type that accepts APIKeyDnsRecordsDenyArray and APIKeyDnsRecordsDenyArrayOutput values.
// You can construct a concrete instance of `APIKeyDnsRecordsDenyArrayInput` via:
//
//	APIKeyDnsRecordsDenyArray{ APIKeyDnsRecordsDenyArgs{...} }
type APIKeyDnsRecordsDenyArrayInput interface {
	pulumi.Input

	ToAPIKeyDnsRecordsDenyArrayOutput() APIKeyDnsRecordsDenyArrayOutput
	ToAPIKeyDnsRecordsDenyArrayOutputWithContext(context.Context) APIKeyDnsRecordsDenyArrayOutput
}

type APIKeyDnsRecordsDenyArray []APIKeyDnsRecordsDenyInput

func (APIKeyDnsRecordsDenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]APIKeyDnsRecordsDeny)(nil)).Elem()
}

func (i APIKeyDnsRecordsDenyArray) ToAPIKeyDnsRecordsDenyArrayOutput() APIKeyDnsRecordsDenyArrayOutput {
	return i.ToAPIKeyDnsRecordsDenyArrayOutputWithContext(context.Background())
}

func (i APIKeyDnsRecordsDenyArray) ToAPIKeyDnsRecordsDenyArrayOutputWithContext(ctx context.Context) APIKeyDnsRecordsDenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIKeyDnsRecordsDenyArrayOutput)
}

type APIKeyDnsRecordsDenyOutput struct{ *pulumi.OutputState }

func (APIKeyDnsRecordsDenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*APIKeyDnsRecordsDeny)(nil)).Elem()
}

func (o APIKeyDnsRecordsDenyOutput) ToAPIKeyDnsRecordsDenyOutput() APIKeyDnsRecordsDenyOutput {
	return o
}

func (o APIKeyDnsRecordsDenyOutput) ToAPIKeyDnsRecordsDenyOutputWithContext(ctx context.Context) APIKeyDnsRecordsDenyOutput {
	return o
}

func (o APIKeyDnsRecordsDenyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsDeny) string { return v.Domain }).(pulumi.StringOutput)
}

func (o APIKeyDnsRecordsDenyOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsDeny) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o APIKeyDnsRecordsDenyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsDeny) string { return v.Type }).(pulumi.StringOutput)
}

func (o APIKeyDnsRecordsDenyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsDeny) string { return v.Zone }).(pulumi.StringOutput)
}

type APIKeyDnsRecordsDenyArrayOutput struct{ *pulumi.OutputState }

func (APIKeyDnsRecordsDenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]APIKeyDnsRecordsDeny)(nil)).Elem()
}

func (o APIKeyDnsRecordsDenyArrayOutput) ToAPIKeyDnsRecordsDenyArrayOutput() APIKeyDnsRecordsDenyArrayOutput {
	return o
}

func (o APIKeyDnsRecordsDenyArrayOutput) ToAPIKeyDnsRecordsDenyArrayOutputWithContext(ctx context.Context) APIKeyDnsRecordsDenyArrayOutput {
	return o
}

func (o APIKeyDnsRecordsDenyArrayOutput) Index(i pulumi.IntInput) APIKeyDnsRecordsDenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) APIKeyDnsRecordsDeny {
		return vs[0].([]APIKeyDnsRecordsDeny)[vs[1].(int)]
	}).(APIKeyDnsRecordsDenyOutput)
}

type ApplicationDefaultConfig struct {
	// Indicates whether or not to use HTTP in measurements.
	Http bool `pulumi:"http"`
	// Indicates whether or not to use HTTPS in measurements.
	Https *bool `pulumi:"https"`
	// Maximum timeout per job
	// 0, the primary NSONE Global Network. Normally, you should not have to worry about this.
	JobTimeoutMillis *int `pulumi:"jobTimeoutMillis"`
	// Maximum timeout per request.
	RequestTimeoutMillis *int `pulumi:"requestTimeoutMillis"`
	// Indicates whether or not to skip aggregation for this job's measurements
	StaticValues *bool `pulumi:"staticValues"`
	// Whether to use XMLHttpRequest (XHR) when taking measurements.
	UseXhr *bool `pulumi:"useXhr"`
}

// ApplicationDefaultConfigInput is an input type that accepts ApplicationDefaultConfigArgs and ApplicationDefaultConfigOutput values.
// You can construct a concrete instance of `ApplicationDefaultConfigInput` via:
//
//	ApplicationDefaultConfigArgs{...}
type ApplicationDefaultConfigInput interface {
	pulumi.Input

	ToApplicationDefaultConfigOutput() ApplicationDefaultConfigOutput
	ToApplicationDefaultConfigOutputWithContext(context.Context) ApplicationDefaultConfigOutput
}

type ApplicationDefaultConfigArgs struct {
	// Indicates whether or not to use HTTP in measurements.
	Http pulumi.BoolInput `pulumi:"http"`
	// Indicates whether or not to use HTTPS in measurements.
	Https pulumi.BoolPtrInput `pulumi:"https"`
	// Maximum timeout per job
	// 0, the primary NSONE Global Network. Normally, you should not have to worry about this.
	JobTimeoutMillis pulumi.IntPtrInput `pulumi:"jobTimeoutMillis"`
	// Maximum timeout per request.
	RequestTimeoutMillis pulumi.IntPtrInput `pulumi:"requestTimeoutMillis"`
	// Indicates whether or not to skip aggregation for this job's measurements
	StaticValues pulumi.BoolPtrInput `pulumi:"staticValues"`
	// Whether to use XMLHttpRequest (XHR) when taking measurements.
	UseXhr pulumi.BoolPtrInput `pulumi:"useXhr"`
}

func (ApplicationDefaultConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDefaultConfig)(nil)).Elem()
}

func (i ApplicationDefaultConfigArgs) ToApplicationDefaultConfigOutput() ApplicationDefaultConfigOutput {
	return i.ToApplicationDefaultConfigOutputWithContext(context.Background())
}

func (i ApplicationDefaultConfigArgs) ToApplicationDefaultConfigOutputWithContext(ctx context.Context) ApplicationDefaultConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDefaultConfigOutput)
}

func (i ApplicationDefaultConfigArgs) ToApplicationDefaultConfigPtrOutput() ApplicationDefaultConfigPtrOutput {
	return i.ToApplicationDefaultConfigPtrOutputWithContext(context.Background())
}

func (i ApplicationDefaultConfigArgs) ToApplicationDefaultConfigPtrOutputWithContext(ctx context.Context) ApplicationDefaultConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDefaultConfigOutput).ToApplicationDefaultConfigPtrOutputWithContext(ctx)
}

// ApplicationDefaultConfigPtrInput is an input type that accepts ApplicationDefaultConfigArgs, ApplicationDefaultConfigPtr and ApplicationDefaultConfigPtrOutput values.
// You can construct a concrete instance of `ApplicationDefaultConfigPtrInput` via:
//
//	        ApplicationDefaultConfigArgs{...}
//
//	or:
//
//	        nil
type ApplicationDefaultConfigPtrInput interface {
	pulumi.Input

	ToApplicationDefaultConfigPtrOutput() ApplicationDefaultConfigPtrOutput
	ToApplicationDefaultConfigPtrOutputWithContext(context.Context) ApplicationDefaultConfigPtrOutput
}

type applicationDefaultConfigPtrType ApplicationDefaultConfigArgs

func ApplicationDefaultConfigPtr(v *ApplicationDefaultConfigArgs) ApplicationDefaultConfigPtrInput {
	return (*applicationDefaultConfigPtrType)(v)
}

func (*applicationDefaultConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDefaultConfig)(nil)).Elem()
}

func (i *applicationDefaultConfigPtrType) ToApplicationDefaultConfigPtrOutput() ApplicationDefaultConfigPtrOutput {
	return i.ToApplicationDefaultConfigPtrOutputWithContext(context.Background())
}

func (i *applicationDefaultConfigPtrType) ToApplicationDefaultConfigPtrOutputWithContext(ctx context.Context) ApplicationDefaultConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDefaultConfigPtrOutput)
}

type ApplicationDefaultConfigOutput struct{ *pulumi.OutputState }

func (ApplicationDefaultConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDefaultConfig)(nil)).Elem()
}

func (o ApplicationDefaultConfigOutput) ToApplicationDefaultConfigOutput() ApplicationDefaultConfigOutput {
	return o
}

func (o ApplicationDefaultConfigOutput) ToApplicationDefaultConfigOutputWithContext(ctx context.Context) ApplicationDefaultConfigOutput {
	return o
}

func (o ApplicationDefaultConfigOutput) ToApplicationDefaultConfigPtrOutput() ApplicationDefaultConfigPtrOutput {
	return o.ToApplicationDefaultConfigPtrOutputWithContext(context.Background())
}

func (o ApplicationDefaultConfigOutput) ToApplicationDefaultConfigPtrOutputWithContext(ctx context.Context) ApplicationDefaultConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationDefaultConfig) *ApplicationDefaultConfig {
		return &v
	}).(ApplicationDefaultConfigPtrOutput)
}

// Indicates whether or not to use HTTP in measurements.
func (o ApplicationDefaultConfigOutput) Http() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplicationDefaultConfig) bool { return v.Http }).(pulumi.BoolOutput)
}

// Indicates whether or not to use HTTPS in measurements.
func (o ApplicationDefaultConfigOutput) Https() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationDefaultConfig) *bool { return v.Https }).(pulumi.BoolPtrOutput)
}

// Maximum timeout per job
// 0, the primary NSONE Global Network. Normally, you should not have to worry about this.
func (o ApplicationDefaultConfigOutput) JobTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationDefaultConfig) *int { return v.JobTimeoutMillis }).(pulumi.IntPtrOutput)
}

// Maximum timeout per request.
func (o ApplicationDefaultConfigOutput) RequestTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationDefaultConfig) *int { return v.RequestTimeoutMillis }).(pulumi.IntPtrOutput)
}

// Indicates whether or not to skip aggregation for this job's measurements
func (o ApplicationDefaultConfigOutput) StaticValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationDefaultConfig) *bool { return v.StaticValues }).(pulumi.BoolPtrOutput)
}

// Whether to use XMLHttpRequest (XHR) when taking measurements.
func (o ApplicationDefaultConfigOutput) UseXhr() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationDefaultConfig) *bool { return v.UseXhr }).(pulumi.BoolPtrOutput)
}

type ApplicationDefaultConfigPtrOutput struct{ *pulumi.OutputState }

func (ApplicationDefaultConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDefaultConfig)(nil)).Elem()
}

func (o ApplicationDefaultConfigPtrOutput) ToApplicationDefaultConfigPtrOutput() ApplicationDefaultConfigPtrOutput {
	return o
}

func (o ApplicationDefaultConfigPtrOutput) ToApplicationDefaultConfigPtrOutputWithContext(ctx context.Context) ApplicationDefaultConfigPtrOutput {
	return o
}

func (o ApplicationDefaultConfigPtrOutput) Elem() ApplicationDefaultConfigOutput {
	return o.ApplyT(func(v *ApplicationDefaultConfig) ApplicationDefaultConfig {
		if v != nil {
			return *v
		}
		var ret ApplicationDefaultConfig
		return ret
	}).(ApplicationDefaultConfigOutput)
}

// Indicates whether or not to use HTTP in measurements.
func (o ApplicationDefaultConfigPtrOutput) Http() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationDefaultConfig) *bool {
		if v == nil {
			return nil
		}
		return &v.Http
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether or not to use HTTPS in measurements.
func (o ApplicationDefaultConfigPtrOutput) Https() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationDefaultConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Https
	}).(pulumi.BoolPtrOutput)
}

// Maximum timeout per job
// 0, the primary NSONE Global Network. Normally, you should not have to worry about this.
func (o ApplicationDefaultConfigPtrOutput) JobTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationDefaultConfig) *int {
		if v == nil {
			return nil
		}
		return v.JobTimeoutMillis
	}).(pulumi.IntPtrOutput)
}

// Maximum timeout per request.
func (o ApplicationDefaultConfigPtrOutput) RequestTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationDefaultConfig) *int {
		if v == nil {
			return nil
		}
		return v.RequestTimeoutMillis
	}).(pulumi.IntPtrOutput)
}

// Indicates whether or not to skip aggregation for this job's measurements
func (o ApplicationDefaultConfigPtrOutput) StaticValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationDefaultConfig) *bool {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.BoolPtrOutput)
}

// Whether to use XMLHttpRequest (XHR) when taking measurements.
func (o ApplicationDefaultConfigPtrOutput) UseXhr() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationDefaultConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseXhr
	}).(pulumi.BoolPtrOutput)
}

type DatasetDatatype struct {
	Data  map[string]string `pulumi:"data"`
	Scope string            `pulumi:"scope"`
	Type  string            `pulumi:"type"`
}

// DatasetDatatypeInput is an input type that accepts DatasetDatatypeArgs and DatasetDatatypeOutput values.
// You can construct a concrete instance of `DatasetDatatypeInput` via:
//
//	DatasetDatatypeArgs{...}
type DatasetDatatypeInput interface {
	pulumi.Input

	ToDatasetDatatypeOutput() DatasetDatatypeOutput
	ToDatasetDatatypeOutputWithContext(context.Context) DatasetDatatypeOutput
}

type DatasetDatatypeArgs struct {
	Data  pulumi.StringMapInput `pulumi:"data"`
	Scope pulumi.StringInput    `pulumi:"scope"`
	Type  pulumi.StringInput    `pulumi:"type"`
}

func (DatasetDatatypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDatatype)(nil)).Elem()
}

func (i DatasetDatatypeArgs) ToDatasetDatatypeOutput() DatasetDatatypeOutput {
	return i.ToDatasetDatatypeOutputWithContext(context.Background())
}

func (i DatasetDatatypeArgs) ToDatasetDatatypeOutputWithContext(ctx context.Context) DatasetDatatypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatatypeOutput)
}

func (i DatasetDatatypeArgs) ToDatasetDatatypePtrOutput() DatasetDatatypePtrOutput {
	return i.ToDatasetDatatypePtrOutputWithContext(context.Background())
}

func (i DatasetDatatypeArgs) ToDatasetDatatypePtrOutputWithContext(ctx context.Context) DatasetDatatypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatatypeOutput).ToDatasetDatatypePtrOutputWithContext(ctx)
}

// DatasetDatatypePtrInput is an input type that accepts DatasetDatatypeArgs, DatasetDatatypePtr and DatasetDatatypePtrOutput values.
// You can construct a concrete instance of `DatasetDatatypePtrInput` via:
//
//	        DatasetDatatypeArgs{...}
//
//	or:
//
//	        nil
type DatasetDatatypePtrInput interface {
	pulumi.Input

	ToDatasetDatatypePtrOutput() DatasetDatatypePtrOutput
	ToDatasetDatatypePtrOutputWithContext(context.Context) DatasetDatatypePtrOutput
}

type datasetDatatypePtrType DatasetDatatypeArgs

func DatasetDatatypePtr(v *DatasetDatatypeArgs) DatasetDatatypePtrInput {
	return (*datasetDatatypePtrType)(v)
}

func (*datasetDatatypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDatatype)(nil)).Elem()
}

func (i *datasetDatatypePtrType) ToDatasetDatatypePtrOutput() DatasetDatatypePtrOutput {
	return i.ToDatasetDatatypePtrOutputWithContext(context.Background())
}

func (i *datasetDatatypePtrType) ToDatasetDatatypePtrOutputWithContext(ctx context.Context) DatasetDatatypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatatypePtrOutput)
}

type DatasetDatatypeOutput struct{ *pulumi.OutputState }

func (DatasetDatatypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDatatype)(nil)).Elem()
}

func (o DatasetDatatypeOutput) ToDatasetDatatypeOutput() DatasetDatatypeOutput {
	return o
}

func (o DatasetDatatypeOutput) ToDatasetDatatypeOutputWithContext(ctx context.Context) DatasetDatatypeOutput {
	return o
}

func (o DatasetDatatypeOutput) ToDatasetDatatypePtrOutput() DatasetDatatypePtrOutput {
	return o.ToDatasetDatatypePtrOutputWithContext(context.Background())
}

func (o DatasetDatatypeOutput) ToDatasetDatatypePtrOutputWithContext(ctx context.Context) DatasetDatatypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetDatatype) *DatasetDatatype {
		return &v
	}).(DatasetDatatypePtrOutput)
}

func (o DatasetDatatypeOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatasetDatatype) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

func (o DatasetDatatypeOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDatatype) string { return v.Scope }).(pulumi.StringOutput)
}

func (o DatasetDatatypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDatatype) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetDatatypePtrOutput struct{ *pulumi.OutputState }

func (DatasetDatatypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDatatype)(nil)).Elem()
}

func (o DatasetDatatypePtrOutput) ToDatasetDatatypePtrOutput() DatasetDatatypePtrOutput {
	return o
}

func (o DatasetDatatypePtrOutput) ToDatasetDatatypePtrOutputWithContext(ctx context.Context) DatasetDatatypePtrOutput {
	return o
}

func (o DatasetDatatypePtrOutput) Elem() DatasetDatatypeOutput {
	return o.ApplyT(func(v *DatasetDatatype) DatasetDatatype {
		if v != nil {
			return *v
		}
		var ret DatasetDatatype
		return ret
	}).(DatasetDatatypeOutput)
}

func (o DatasetDatatypePtrOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetDatatype) map[string]string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringMapOutput)
}

func (o DatasetDatatypePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDatatype) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

func (o DatasetDatatypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDatatype) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DatasetRepeat struct {
	EndAfterN    int    `pulumi:"endAfterN"`
	RepeatsEvery string `pulumi:"repeatsEvery"`
	Start        int    `pulumi:"start"`
}

// DatasetRepeatInput is an input type that accepts DatasetRepeatArgs and DatasetRepeatOutput values.
// You can construct a concrete instance of `DatasetRepeatInput` via:
//
//	DatasetRepeatArgs{...}
type DatasetRepeatInput interface {
	pulumi.Input

	ToDatasetRepeatOutput() DatasetRepeatOutput
	ToDatasetRepeatOutputWithContext(context.Context) DatasetRepeatOutput
}

type DatasetRepeatArgs struct {
	EndAfterN    pulumi.IntInput    `pulumi:"endAfterN"`
	RepeatsEvery pulumi.StringInput `pulumi:"repeatsEvery"`
	Start        pulumi.IntInput    `pulumi:"start"`
}

func (DatasetRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetRepeat)(nil)).Elem()
}

func (i DatasetRepeatArgs) ToDatasetRepeatOutput() DatasetRepeatOutput {
	return i.ToDatasetRepeatOutputWithContext(context.Background())
}

func (i DatasetRepeatArgs) ToDatasetRepeatOutputWithContext(ctx context.Context) DatasetRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetRepeatOutput)
}

func (i DatasetRepeatArgs) ToDatasetRepeatPtrOutput() DatasetRepeatPtrOutput {
	return i.ToDatasetRepeatPtrOutputWithContext(context.Background())
}

func (i DatasetRepeatArgs) ToDatasetRepeatPtrOutputWithContext(ctx context.Context) DatasetRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetRepeatOutput).ToDatasetRepeatPtrOutputWithContext(ctx)
}

// DatasetRepeatPtrInput is an input type that accepts DatasetRepeatArgs, DatasetRepeatPtr and DatasetRepeatPtrOutput values.
// You can construct a concrete instance of `DatasetRepeatPtrInput` via:
//
//	        DatasetRepeatArgs{...}
//
//	or:
//
//	        nil
type DatasetRepeatPtrInput interface {
	pulumi.Input

	ToDatasetRepeatPtrOutput() DatasetRepeatPtrOutput
	ToDatasetRepeatPtrOutputWithContext(context.Context) DatasetRepeatPtrOutput
}

type datasetRepeatPtrType DatasetRepeatArgs

func DatasetRepeatPtr(v *DatasetRepeatArgs) DatasetRepeatPtrInput {
	return (*datasetRepeatPtrType)(v)
}

func (*datasetRepeatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetRepeat)(nil)).Elem()
}

func (i *datasetRepeatPtrType) ToDatasetRepeatPtrOutput() DatasetRepeatPtrOutput {
	return i.ToDatasetRepeatPtrOutputWithContext(context.Background())
}

func (i *datasetRepeatPtrType) ToDatasetRepeatPtrOutputWithContext(ctx context.Context) DatasetRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetRepeatPtrOutput)
}

type DatasetRepeatOutput struct{ *pulumi.OutputState }

func (DatasetRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetRepeat)(nil)).Elem()
}

func (o DatasetRepeatOutput) ToDatasetRepeatOutput() DatasetRepeatOutput {
	return o
}

func (o DatasetRepeatOutput) ToDatasetRepeatOutputWithContext(ctx context.Context) DatasetRepeatOutput {
	return o
}

func (o DatasetRepeatOutput) ToDatasetRepeatPtrOutput() DatasetRepeatPtrOutput {
	return o.ToDatasetRepeatPtrOutputWithContext(context.Background())
}

func (o DatasetRepeatOutput) ToDatasetRepeatPtrOutputWithContext(ctx context.Context) DatasetRepeatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetRepeat) *DatasetRepeat {
		return &v
	}).(DatasetRepeatPtrOutput)
}

func (o DatasetRepeatOutput) EndAfterN() pulumi.IntOutput {
	return o.ApplyT(func(v DatasetRepeat) int { return v.EndAfterN }).(pulumi.IntOutput)
}

func (o DatasetRepeatOutput) RepeatsEvery() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetRepeat) string { return v.RepeatsEvery }).(pulumi.StringOutput)
}

func (o DatasetRepeatOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v DatasetRepeat) int { return v.Start }).(pulumi.IntOutput)
}

type DatasetRepeatPtrOutput struct{ *pulumi.OutputState }

func (DatasetRepeatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetRepeat)(nil)).Elem()
}

func (o DatasetRepeatPtrOutput) ToDatasetRepeatPtrOutput() DatasetRepeatPtrOutput {
	return o
}

func (o DatasetRepeatPtrOutput) ToDatasetRepeatPtrOutputWithContext(ctx context.Context) DatasetRepeatPtrOutput {
	return o
}

func (o DatasetRepeatPtrOutput) Elem() DatasetRepeatOutput {
	return o.ApplyT(func(v *DatasetRepeat) DatasetRepeat {
		if v != nil {
			return *v
		}
		var ret DatasetRepeat
		return ret
	}).(DatasetRepeatOutput)
}

func (o DatasetRepeatPtrOutput) EndAfterN() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatasetRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.EndAfterN
	}).(pulumi.IntPtrOutput)
}

func (o DatasetRepeatPtrOutput) RepeatsEvery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetRepeat) *string {
		if v == nil {
			return nil
		}
		return &v.RepeatsEvery
	}).(pulumi.StringPtrOutput)
}

func (o DatasetRepeatPtrOutput) Start() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatasetRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.IntPtrOutput)
}

type DatasetReport struct {
	CreatedAt *int    `pulumi:"createdAt"`
	End       *int    `pulumi:"end"`
	Id        *string `pulumi:"id"`
	Start     *int    `pulumi:"start"`
	Status    *string `pulumi:"status"`
}

// DatasetReportInput is an input type that accepts DatasetReportArgs and DatasetReportOutput values.
// You can construct a concrete instance of `DatasetReportInput` via:
//
//	DatasetReportArgs{...}
type DatasetReportInput interface {
	pulumi.Input

	ToDatasetReportOutput() DatasetReportOutput
	ToDatasetReportOutputWithContext(context.Context) DatasetReportOutput
}

type DatasetReportArgs struct {
	CreatedAt pulumi.IntPtrInput    `pulumi:"createdAt"`
	End       pulumi.IntPtrInput    `pulumi:"end"`
	Id        pulumi.StringPtrInput `pulumi:"id"`
	Start     pulumi.IntPtrInput    `pulumi:"start"`
	Status    pulumi.StringPtrInput `pulumi:"status"`
}

func (DatasetReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReport)(nil)).Elem()
}

func (i DatasetReportArgs) ToDatasetReportOutput() DatasetReportOutput {
	return i.ToDatasetReportOutputWithContext(context.Background())
}

func (i DatasetReportArgs) ToDatasetReportOutputWithContext(ctx context.Context) DatasetReportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReportOutput)
}

// DatasetReportArrayInput is an input type that accepts DatasetReportArray and DatasetReportArrayOutput values.
// You can construct a concrete instance of `DatasetReportArrayInput` via:
//
//	DatasetReportArray{ DatasetReportArgs{...} }
type DatasetReportArrayInput interface {
	pulumi.Input

	ToDatasetReportArrayOutput() DatasetReportArrayOutput
	ToDatasetReportArrayOutputWithContext(context.Context) DatasetReportArrayOutput
}

type DatasetReportArray []DatasetReportInput

func (DatasetReportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetReport)(nil)).Elem()
}

func (i DatasetReportArray) ToDatasetReportArrayOutput() DatasetReportArrayOutput {
	return i.ToDatasetReportArrayOutputWithContext(context.Background())
}

func (i DatasetReportArray) ToDatasetReportArrayOutputWithContext(ctx context.Context) DatasetReportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReportArrayOutput)
}

type DatasetReportOutput struct{ *pulumi.OutputState }

func (DatasetReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReport)(nil)).Elem()
}

func (o DatasetReportOutput) ToDatasetReportOutput() DatasetReportOutput {
	return o
}

func (o DatasetReportOutput) ToDatasetReportOutputWithContext(ctx context.Context) DatasetReportOutput {
	return o
}

func (o DatasetReportOutput) CreatedAt() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasetReport) *int { return v.CreatedAt }).(pulumi.IntPtrOutput)
}

func (o DatasetReportOutput) End() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasetReport) *int { return v.End }).(pulumi.IntPtrOutput)
}

func (o DatasetReportOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetReport) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o DatasetReportOutput) Start() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasetReport) *int { return v.Start }).(pulumi.IntPtrOutput)
}

func (o DatasetReportOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetReport) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type DatasetReportArrayOutput struct{ *pulumi.OutputState }

func (DatasetReportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetReport)(nil)).Elem()
}

func (o DatasetReportArrayOutput) ToDatasetReportArrayOutput() DatasetReportArrayOutput {
	return o
}

func (o DatasetReportArrayOutput) ToDatasetReportArrayOutputWithContext(ctx context.Context) DatasetReportArrayOutput {
	return o
}

func (o DatasetReportArrayOutput) Index(i pulumi.IntInput) DatasetReportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetReport {
		return vs[0].([]DatasetReport)[vs[1].(int)]
	}).(DatasetReportOutput)
}

type DatasetTimeframe struct {
	Aggregation string `pulumi:"aggregation"`
	Cycles      *int   `pulumi:"cycles"`
	From        *int   `pulumi:"from"`
	To          *int   `pulumi:"to"`
}

// DatasetTimeframeInput is an input type that accepts DatasetTimeframeArgs and DatasetTimeframeOutput values.
// You can construct a concrete instance of `DatasetTimeframeInput` via:
//
//	DatasetTimeframeArgs{...}
type DatasetTimeframeInput interface {
	pulumi.Input

	ToDatasetTimeframeOutput() DatasetTimeframeOutput
	ToDatasetTimeframeOutputWithContext(context.Context) DatasetTimeframeOutput
}

type DatasetTimeframeArgs struct {
	Aggregation pulumi.StringInput `pulumi:"aggregation"`
	Cycles      pulumi.IntPtrInput `pulumi:"cycles"`
	From        pulumi.IntPtrInput `pulumi:"from"`
	To          pulumi.IntPtrInput `pulumi:"to"`
}

func (DatasetTimeframeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTimeframe)(nil)).Elem()
}

func (i DatasetTimeframeArgs) ToDatasetTimeframeOutput() DatasetTimeframeOutput {
	return i.ToDatasetTimeframeOutputWithContext(context.Background())
}

func (i DatasetTimeframeArgs) ToDatasetTimeframeOutputWithContext(ctx context.Context) DatasetTimeframeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTimeframeOutput)
}

func (i DatasetTimeframeArgs) ToDatasetTimeframePtrOutput() DatasetTimeframePtrOutput {
	return i.ToDatasetTimeframePtrOutputWithContext(context.Background())
}

func (i DatasetTimeframeArgs) ToDatasetTimeframePtrOutputWithContext(ctx context.Context) DatasetTimeframePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTimeframeOutput).ToDatasetTimeframePtrOutputWithContext(ctx)
}

// DatasetTimeframePtrInput is an input type that accepts DatasetTimeframeArgs, DatasetTimeframePtr and DatasetTimeframePtrOutput values.
// You can construct a concrete instance of `DatasetTimeframePtrInput` via:
//
//	        DatasetTimeframeArgs{...}
//
//	or:
//
//	        nil
type DatasetTimeframePtrInput interface {
	pulumi.Input

	ToDatasetTimeframePtrOutput() DatasetTimeframePtrOutput
	ToDatasetTimeframePtrOutputWithContext(context.Context) DatasetTimeframePtrOutput
}

type datasetTimeframePtrType DatasetTimeframeArgs

func DatasetTimeframePtr(v *DatasetTimeframeArgs) DatasetTimeframePtrInput {
	return (*datasetTimeframePtrType)(v)
}

func (*datasetTimeframePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetTimeframe)(nil)).Elem()
}

func (i *datasetTimeframePtrType) ToDatasetTimeframePtrOutput() DatasetTimeframePtrOutput {
	return i.ToDatasetTimeframePtrOutputWithContext(context.Background())
}

func (i *datasetTimeframePtrType) ToDatasetTimeframePtrOutputWithContext(ctx context.Context) DatasetTimeframePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTimeframePtrOutput)
}

type DatasetTimeframeOutput struct{ *pulumi.OutputState }

func (DatasetTimeframeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTimeframe)(nil)).Elem()
}

func (o DatasetTimeframeOutput) ToDatasetTimeframeOutput() DatasetTimeframeOutput {
	return o
}

func (o DatasetTimeframeOutput) ToDatasetTimeframeOutputWithContext(ctx context.Context) DatasetTimeframeOutput {
	return o
}

func (o DatasetTimeframeOutput) ToDatasetTimeframePtrOutput() DatasetTimeframePtrOutput {
	return o.ToDatasetTimeframePtrOutputWithContext(context.Background())
}

func (o DatasetTimeframeOutput) ToDatasetTimeframePtrOutputWithContext(ctx context.Context) DatasetTimeframePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetTimeframe) *DatasetTimeframe {
		return &v
	}).(DatasetTimeframePtrOutput)
}

func (o DatasetTimeframeOutput) Aggregation() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTimeframe) string { return v.Aggregation }).(pulumi.StringOutput)
}

func (o DatasetTimeframeOutput) Cycles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasetTimeframe) *int { return v.Cycles }).(pulumi.IntPtrOutput)
}

func (o DatasetTimeframeOutput) From() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasetTimeframe) *int { return v.From }).(pulumi.IntPtrOutput)
}

func (o DatasetTimeframeOutput) To() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasetTimeframe) *int { return v.To }).(pulumi.IntPtrOutput)
}

type DatasetTimeframePtrOutput struct{ *pulumi.OutputState }

func (DatasetTimeframePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetTimeframe)(nil)).Elem()
}

func (o DatasetTimeframePtrOutput) ToDatasetTimeframePtrOutput() DatasetTimeframePtrOutput {
	return o
}

func (o DatasetTimeframePtrOutput) ToDatasetTimeframePtrOutputWithContext(ctx context.Context) DatasetTimeframePtrOutput {
	return o
}

func (o DatasetTimeframePtrOutput) Elem() DatasetTimeframeOutput {
	return o.ApplyT(func(v *DatasetTimeframe) DatasetTimeframe {
		if v != nil {
			return *v
		}
		var ret DatasetTimeframe
		return ret
	}).(DatasetTimeframeOutput)
}

func (o DatasetTimeframePtrOutput) Aggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetTimeframe) *string {
		if v == nil {
			return nil
		}
		return &v.Aggregation
	}).(pulumi.StringPtrOutput)
}

func (o DatasetTimeframePtrOutput) Cycles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatasetTimeframe) *int {
		if v == nil {
			return nil
		}
		return v.Cycles
	}).(pulumi.IntPtrOutput)
}

func (o DatasetTimeframePtrOutput) From() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatasetTimeframe) *int {
		if v == nil {
			return nil
		}
		return v.From
	}).(pulumi.IntPtrOutput)
}

func (o DatasetTimeframePtrOutput) To() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatasetTimeframe) *int {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.IntPtrOutput)
}

type MonitoringJobRule struct {
	Comparison string `pulumi:"comparison"`
	Key        string `pulumi:"key"`
	Value      string `pulumi:"value"`
}

// MonitoringJobRuleInput is an input type that accepts MonitoringJobRuleArgs and MonitoringJobRuleOutput values.
// You can construct a concrete instance of `MonitoringJobRuleInput` via:
//
//	MonitoringJobRuleArgs{...}
type MonitoringJobRuleInput interface {
	pulumi.Input

	ToMonitoringJobRuleOutput() MonitoringJobRuleOutput
	ToMonitoringJobRuleOutputWithContext(context.Context) MonitoringJobRuleOutput
}

type MonitoringJobRuleArgs struct {
	Comparison pulumi.StringInput `pulumi:"comparison"`
	Key        pulumi.StringInput `pulumi:"key"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (MonitoringJobRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringJobRule)(nil)).Elem()
}

func (i MonitoringJobRuleArgs) ToMonitoringJobRuleOutput() MonitoringJobRuleOutput {
	return i.ToMonitoringJobRuleOutputWithContext(context.Background())
}

func (i MonitoringJobRuleArgs) ToMonitoringJobRuleOutputWithContext(ctx context.Context) MonitoringJobRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringJobRuleOutput)
}

// MonitoringJobRuleArrayInput is an input type that accepts MonitoringJobRuleArray and MonitoringJobRuleArrayOutput values.
// You can construct a concrete instance of `MonitoringJobRuleArrayInput` via:
//
//	MonitoringJobRuleArray{ MonitoringJobRuleArgs{...} }
type MonitoringJobRuleArrayInput interface {
	pulumi.Input

	ToMonitoringJobRuleArrayOutput() MonitoringJobRuleArrayOutput
	ToMonitoringJobRuleArrayOutputWithContext(context.Context) MonitoringJobRuleArrayOutput
}

type MonitoringJobRuleArray []MonitoringJobRuleInput

func (MonitoringJobRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringJobRule)(nil)).Elem()
}

func (i MonitoringJobRuleArray) ToMonitoringJobRuleArrayOutput() MonitoringJobRuleArrayOutput {
	return i.ToMonitoringJobRuleArrayOutputWithContext(context.Background())
}

func (i MonitoringJobRuleArray) ToMonitoringJobRuleArrayOutputWithContext(ctx context.Context) MonitoringJobRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringJobRuleArrayOutput)
}

type MonitoringJobRuleOutput struct{ *pulumi.OutputState }

func (MonitoringJobRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringJobRule)(nil)).Elem()
}

func (o MonitoringJobRuleOutput) ToMonitoringJobRuleOutput() MonitoringJobRuleOutput {
	return o
}

func (o MonitoringJobRuleOutput) ToMonitoringJobRuleOutputWithContext(ctx context.Context) MonitoringJobRuleOutput {
	return o
}

func (o MonitoringJobRuleOutput) Comparison() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringJobRule) string { return v.Comparison }).(pulumi.StringOutput)
}

func (o MonitoringJobRuleOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringJobRule) string { return v.Key }).(pulumi.StringOutput)
}

func (o MonitoringJobRuleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringJobRule) string { return v.Value }).(pulumi.StringOutput)
}

type MonitoringJobRuleArrayOutput struct{ *pulumi.OutputState }

func (MonitoringJobRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringJobRule)(nil)).Elem()
}

func (o MonitoringJobRuleArrayOutput) ToMonitoringJobRuleArrayOutput() MonitoringJobRuleArrayOutput {
	return o
}

func (o MonitoringJobRuleArrayOutput) ToMonitoringJobRuleArrayOutputWithContext(ctx context.Context) MonitoringJobRuleArrayOutput {
	return o
}

func (o MonitoringJobRuleArrayOutput) Index(i pulumi.IntInput) MonitoringJobRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoringJobRule {
		return vs[0].([]MonitoringJobRule)[vs[1].(int)]
	}).(MonitoringJobRuleOutput)
}

type NotifyListNotification struct {
	// Configuration details for the given notifier type.
	Config map[string]string `pulumi:"config"`
	// The type of notifier. Available notifiers are indicated in /notifytypes endpoint.
	Type string `pulumi:"type"`
}

// NotifyListNotificationInput is an input type that accepts NotifyListNotificationArgs and NotifyListNotificationOutput values.
// You can construct a concrete instance of `NotifyListNotificationInput` via:
//
//	NotifyListNotificationArgs{...}
type NotifyListNotificationInput interface {
	pulumi.Input

	ToNotifyListNotificationOutput() NotifyListNotificationOutput
	ToNotifyListNotificationOutputWithContext(context.Context) NotifyListNotificationOutput
}

type NotifyListNotificationArgs struct {
	// Configuration details for the given notifier type.
	Config pulumi.StringMapInput `pulumi:"config"`
	// The type of notifier. Available notifiers are indicated in /notifytypes endpoint.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NotifyListNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyListNotification)(nil)).Elem()
}

func (i NotifyListNotificationArgs) ToNotifyListNotificationOutput() NotifyListNotificationOutput {
	return i.ToNotifyListNotificationOutputWithContext(context.Background())
}

func (i NotifyListNotificationArgs) ToNotifyListNotificationOutputWithContext(ctx context.Context) NotifyListNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyListNotificationOutput)
}

// NotifyListNotificationArrayInput is an input type that accepts NotifyListNotificationArray and NotifyListNotificationArrayOutput values.
// You can construct a concrete instance of `NotifyListNotificationArrayInput` via:
//
//	NotifyListNotificationArray{ NotifyListNotificationArgs{...} }
type NotifyListNotificationArrayInput interface {
	pulumi.Input

	ToNotifyListNotificationArrayOutput() NotifyListNotificationArrayOutput
	ToNotifyListNotificationArrayOutputWithContext(context.Context) NotifyListNotificationArrayOutput
}

type NotifyListNotificationArray []NotifyListNotificationInput

func (NotifyListNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotifyListNotification)(nil)).Elem()
}

func (i NotifyListNotificationArray) ToNotifyListNotificationArrayOutput() NotifyListNotificationArrayOutput {
	return i.ToNotifyListNotificationArrayOutputWithContext(context.Background())
}

func (i NotifyListNotificationArray) ToNotifyListNotificationArrayOutputWithContext(ctx context.Context) NotifyListNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyListNotificationArrayOutput)
}

type NotifyListNotificationOutput struct{ *pulumi.OutputState }

func (NotifyListNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyListNotification)(nil)).Elem()
}

func (o NotifyListNotificationOutput) ToNotifyListNotificationOutput() NotifyListNotificationOutput {
	return o
}

func (o NotifyListNotificationOutput) ToNotifyListNotificationOutputWithContext(ctx context.Context) NotifyListNotificationOutput {
	return o
}

// Configuration details for the given notifier type.
func (o NotifyListNotificationOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v NotifyListNotification) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// The type of notifier. Available notifiers are indicated in /notifytypes endpoint.
func (o NotifyListNotificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NotifyListNotification) string { return v.Type }).(pulumi.StringOutput)
}

type NotifyListNotificationArrayOutput struct{ *pulumi.OutputState }

func (NotifyListNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotifyListNotification)(nil)).Elem()
}

func (o NotifyListNotificationArrayOutput) ToNotifyListNotificationArrayOutput() NotifyListNotificationArrayOutput {
	return o
}

func (o NotifyListNotificationArrayOutput) ToNotifyListNotificationArrayOutputWithContext(ctx context.Context) NotifyListNotificationArrayOutput {
	return o
}

func (o NotifyListNotificationArrayOutput) Index(i pulumi.IntInput) NotifyListNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotifyListNotification {
		return vs[0].([]NotifyListNotification)[vs[1].(int)]
	}).(NotifyListNotificationOutput)
}

type PulsarJobBlendMetricWeights struct {
	Timestamp int `pulumi:"timestamp"`
}

// PulsarJobBlendMetricWeightsInput is an input type that accepts PulsarJobBlendMetricWeightsArgs and PulsarJobBlendMetricWeightsOutput values.
// You can construct a concrete instance of `PulsarJobBlendMetricWeightsInput` via:
//
//	PulsarJobBlendMetricWeightsArgs{...}
type PulsarJobBlendMetricWeightsInput interface {
	pulumi.Input

	ToPulsarJobBlendMetricWeightsOutput() PulsarJobBlendMetricWeightsOutput
	ToPulsarJobBlendMetricWeightsOutputWithContext(context.Context) PulsarJobBlendMetricWeightsOutput
}

type PulsarJobBlendMetricWeightsArgs struct {
	Timestamp pulumi.IntInput `pulumi:"timestamp"`
}

func (PulsarJobBlendMetricWeightsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PulsarJobBlendMetricWeights)(nil)).Elem()
}

func (i PulsarJobBlendMetricWeightsArgs) ToPulsarJobBlendMetricWeightsOutput() PulsarJobBlendMetricWeightsOutput {
	return i.ToPulsarJobBlendMetricWeightsOutputWithContext(context.Background())
}

func (i PulsarJobBlendMetricWeightsArgs) ToPulsarJobBlendMetricWeightsOutputWithContext(ctx context.Context) PulsarJobBlendMetricWeightsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobBlendMetricWeightsOutput)
}

func (i PulsarJobBlendMetricWeightsArgs) ToPulsarJobBlendMetricWeightsPtrOutput() PulsarJobBlendMetricWeightsPtrOutput {
	return i.ToPulsarJobBlendMetricWeightsPtrOutputWithContext(context.Background())
}

func (i PulsarJobBlendMetricWeightsArgs) ToPulsarJobBlendMetricWeightsPtrOutputWithContext(ctx context.Context) PulsarJobBlendMetricWeightsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobBlendMetricWeightsOutput).ToPulsarJobBlendMetricWeightsPtrOutputWithContext(ctx)
}

// PulsarJobBlendMetricWeightsPtrInput is an input type that accepts PulsarJobBlendMetricWeightsArgs, PulsarJobBlendMetricWeightsPtr and PulsarJobBlendMetricWeightsPtrOutput values.
// You can construct a concrete instance of `PulsarJobBlendMetricWeightsPtrInput` via:
//
//	        PulsarJobBlendMetricWeightsArgs{...}
//
//	or:
//
//	        nil
type PulsarJobBlendMetricWeightsPtrInput interface {
	pulumi.Input

	ToPulsarJobBlendMetricWeightsPtrOutput() PulsarJobBlendMetricWeightsPtrOutput
	ToPulsarJobBlendMetricWeightsPtrOutputWithContext(context.Context) PulsarJobBlendMetricWeightsPtrOutput
}

type pulsarJobBlendMetricWeightsPtrType PulsarJobBlendMetricWeightsArgs

func PulsarJobBlendMetricWeightsPtr(v *PulsarJobBlendMetricWeightsArgs) PulsarJobBlendMetricWeightsPtrInput {
	return (*pulsarJobBlendMetricWeightsPtrType)(v)
}

func (*pulsarJobBlendMetricWeightsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PulsarJobBlendMetricWeights)(nil)).Elem()
}

func (i *pulsarJobBlendMetricWeightsPtrType) ToPulsarJobBlendMetricWeightsPtrOutput() PulsarJobBlendMetricWeightsPtrOutput {
	return i.ToPulsarJobBlendMetricWeightsPtrOutputWithContext(context.Background())
}

func (i *pulsarJobBlendMetricWeightsPtrType) ToPulsarJobBlendMetricWeightsPtrOutputWithContext(ctx context.Context) PulsarJobBlendMetricWeightsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobBlendMetricWeightsPtrOutput)
}

type PulsarJobBlendMetricWeightsOutput struct{ *pulumi.OutputState }

func (PulsarJobBlendMetricWeightsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PulsarJobBlendMetricWeights)(nil)).Elem()
}

func (o PulsarJobBlendMetricWeightsOutput) ToPulsarJobBlendMetricWeightsOutput() PulsarJobBlendMetricWeightsOutput {
	return o
}

func (o PulsarJobBlendMetricWeightsOutput) ToPulsarJobBlendMetricWeightsOutputWithContext(ctx context.Context) PulsarJobBlendMetricWeightsOutput {
	return o
}

func (o PulsarJobBlendMetricWeightsOutput) ToPulsarJobBlendMetricWeightsPtrOutput() PulsarJobBlendMetricWeightsPtrOutput {
	return o.ToPulsarJobBlendMetricWeightsPtrOutputWithContext(context.Background())
}

func (o PulsarJobBlendMetricWeightsOutput) ToPulsarJobBlendMetricWeightsPtrOutputWithContext(ctx context.Context) PulsarJobBlendMetricWeightsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PulsarJobBlendMetricWeights) *PulsarJobBlendMetricWeights {
		return &v
	}).(PulsarJobBlendMetricWeightsPtrOutput)
}

func (o PulsarJobBlendMetricWeightsOutput) Timestamp() pulumi.IntOutput {
	return o.ApplyT(func(v PulsarJobBlendMetricWeights) int { return v.Timestamp }).(pulumi.IntOutput)
}

type PulsarJobBlendMetricWeightsPtrOutput struct{ *pulumi.OutputState }

func (PulsarJobBlendMetricWeightsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PulsarJobBlendMetricWeights)(nil)).Elem()
}

func (o PulsarJobBlendMetricWeightsPtrOutput) ToPulsarJobBlendMetricWeightsPtrOutput() PulsarJobBlendMetricWeightsPtrOutput {
	return o
}

func (o PulsarJobBlendMetricWeightsPtrOutput) ToPulsarJobBlendMetricWeightsPtrOutputWithContext(ctx context.Context) PulsarJobBlendMetricWeightsPtrOutput {
	return o
}

func (o PulsarJobBlendMetricWeightsPtrOutput) Elem() PulsarJobBlendMetricWeightsOutput {
	return o.ApplyT(func(v *PulsarJobBlendMetricWeights) PulsarJobBlendMetricWeights {
		if v != nil {
			return *v
		}
		var ret PulsarJobBlendMetricWeights
		return ret
	}).(PulsarJobBlendMetricWeightsOutput)
}

func (o PulsarJobBlendMetricWeightsPtrOutput) Timestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PulsarJobBlendMetricWeights) *int {
		if v == nil {
			return nil
		}
		return &v.Timestamp
	}).(pulumi.IntPtrOutput)
}

type PulsarJobConfig struct {
	Host                 *string `pulumi:"host"`
	Http                 *bool   `pulumi:"http"`
	Https                *bool   `pulumi:"https"`
	JobTimeoutMillis     *int    `pulumi:"jobTimeoutMillis"`
	RequestTimeoutMillis *int    `pulumi:"requestTimeoutMillis"`
	StaticValues         *bool   `pulumi:"staticValues"`
	UrlPath              *string `pulumi:"urlPath"`
	UseXhr               *bool   `pulumi:"useXhr"`
}

// PulsarJobConfigInput is an input type that accepts PulsarJobConfigArgs and PulsarJobConfigOutput values.
// You can construct a concrete instance of `PulsarJobConfigInput` via:
//
//	PulsarJobConfigArgs{...}
type PulsarJobConfigInput interface {
	pulumi.Input

	ToPulsarJobConfigOutput() PulsarJobConfigOutput
	ToPulsarJobConfigOutputWithContext(context.Context) PulsarJobConfigOutput
}

type PulsarJobConfigArgs struct {
	Host                 pulumi.StringPtrInput `pulumi:"host"`
	Http                 pulumi.BoolPtrInput   `pulumi:"http"`
	Https                pulumi.BoolPtrInput   `pulumi:"https"`
	JobTimeoutMillis     pulumi.IntPtrInput    `pulumi:"jobTimeoutMillis"`
	RequestTimeoutMillis pulumi.IntPtrInput    `pulumi:"requestTimeoutMillis"`
	StaticValues         pulumi.BoolPtrInput   `pulumi:"staticValues"`
	UrlPath              pulumi.StringPtrInput `pulumi:"urlPath"`
	UseXhr               pulumi.BoolPtrInput   `pulumi:"useXhr"`
}

func (PulsarJobConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PulsarJobConfig)(nil)).Elem()
}

func (i PulsarJobConfigArgs) ToPulsarJobConfigOutput() PulsarJobConfigOutput {
	return i.ToPulsarJobConfigOutputWithContext(context.Background())
}

func (i PulsarJobConfigArgs) ToPulsarJobConfigOutputWithContext(ctx context.Context) PulsarJobConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobConfigOutput)
}

func (i PulsarJobConfigArgs) ToPulsarJobConfigPtrOutput() PulsarJobConfigPtrOutput {
	return i.ToPulsarJobConfigPtrOutputWithContext(context.Background())
}

func (i PulsarJobConfigArgs) ToPulsarJobConfigPtrOutputWithContext(ctx context.Context) PulsarJobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobConfigOutput).ToPulsarJobConfigPtrOutputWithContext(ctx)
}

// PulsarJobConfigPtrInput is an input type that accepts PulsarJobConfigArgs, PulsarJobConfigPtr and PulsarJobConfigPtrOutput values.
// You can construct a concrete instance of `PulsarJobConfigPtrInput` via:
//
//	        PulsarJobConfigArgs{...}
//
//	or:
//
//	        nil
type PulsarJobConfigPtrInput interface {
	pulumi.Input

	ToPulsarJobConfigPtrOutput() PulsarJobConfigPtrOutput
	ToPulsarJobConfigPtrOutputWithContext(context.Context) PulsarJobConfigPtrOutput
}

type pulsarJobConfigPtrType PulsarJobConfigArgs

func PulsarJobConfigPtr(v *PulsarJobConfigArgs) PulsarJobConfigPtrInput {
	return (*pulsarJobConfigPtrType)(v)
}

func (*pulsarJobConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PulsarJobConfig)(nil)).Elem()
}

func (i *pulsarJobConfigPtrType) ToPulsarJobConfigPtrOutput() PulsarJobConfigPtrOutput {
	return i.ToPulsarJobConfigPtrOutputWithContext(context.Background())
}

func (i *pulsarJobConfigPtrType) ToPulsarJobConfigPtrOutputWithContext(ctx context.Context) PulsarJobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobConfigPtrOutput)
}

type PulsarJobConfigOutput struct{ *pulumi.OutputState }

func (PulsarJobConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PulsarJobConfig)(nil)).Elem()
}

func (o PulsarJobConfigOutput) ToPulsarJobConfigOutput() PulsarJobConfigOutput {
	return o
}

func (o PulsarJobConfigOutput) ToPulsarJobConfigOutputWithContext(ctx context.Context) PulsarJobConfigOutput {
	return o
}

func (o PulsarJobConfigOutput) ToPulsarJobConfigPtrOutput() PulsarJobConfigPtrOutput {
	return o.ToPulsarJobConfigPtrOutputWithContext(context.Background())
}

func (o PulsarJobConfigOutput) ToPulsarJobConfigPtrOutputWithContext(ctx context.Context) PulsarJobConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PulsarJobConfig) *PulsarJobConfig {
		return &v
	}).(PulsarJobConfigPtrOutput)
}

func (o PulsarJobConfigOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PulsarJobConfig) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o PulsarJobConfigOutput) Http() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PulsarJobConfig) *bool { return v.Http }).(pulumi.BoolPtrOutput)
}

func (o PulsarJobConfigOutput) Https() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PulsarJobConfig) *bool { return v.Https }).(pulumi.BoolPtrOutput)
}

func (o PulsarJobConfigOutput) JobTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PulsarJobConfig) *int { return v.JobTimeoutMillis }).(pulumi.IntPtrOutput)
}

func (o PulsarJobConfigOutput) RequestTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PulsarJobConfig) *int { return v.RequestTimeoutMillis }).(pulumi.IntPtrOutput)
}

func (o PulsarJobConfigOutput) StaticValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PulsarJobConfig) *bool { return v.StaticValues }).(pulumi.BoolPtrOutput)
}

func (o PulsarJobConfigOutput) UrlPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PulsarJobConfig) *string { return v.UrlPath }).(pulumi.StringPtrOutput)
}

func (o PulsarJobConfigOutput) UseXhr() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PulsarJobConfig) *bool { return v.UseXhr }).(pulumi.BoolPtrOutput)
}

type PulsarJobConfigPtrOutput struct{ *pulumi.OutputState }

func (PulsarJobConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PulsarJobConfig)(nil)).Elem()
}

func (o PulsarJobConfigPtrOutput) ToPulsarJobConfigPtrOutput() PulsarJobConfigPtrOutput {
	return o
}

func (o PulsarJobConfigPtrOutput) ToPulsarJobConfigPtrOutputWithContext(ctx context.Context) PulsarJobConfigPtrOutput {
	return o
}

func (o PulsarJobConfigPtrOutput) Elem() PulsarJobConfigOutput {
	return o.ApplyT(func(v *PulsarJobConfig) PulsarJobConfig {
		if v != nil {
			return *v
		}
		var ret PulsarJobConfig
		return ret
	}).(PulsarJobConfigOutput)
}

func (o PulsarJobConfigPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PulsarJobConfig) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

func (o PulsarJobConfigPtrOutput) Http() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PulsarJobConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Http
	}).(pulumi.BoolPtrOutput)
}

func (o PulsarJobConfigPtrOutput) Https() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PulsarJobConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Https
	}).(pulumi.BoolPtrOutput)
}

func (o PulsarJobConfigPtrOutput) JobTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PulsarJobConfig) *int {
		if v == nil {
			return nil
		}
		return v.JobTimeoutMillis
	}).(pulumi.IntPtrOutput)
}

func (o PulsarJobConfigPtrOutput) RequestTimeoutMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PulsarJobConfig) *int {
		if v == nil {
			return nil
		}
		return v.RequestTimeoutMillis
	}).(pulumi.IntPtrOutput)
}

func (o PulsarJobConfigPtrOutput) StaticValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PulsarJobConfig) *bool {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.BoolPtrOutput)
}

func (o PulsarJobConfigPtrOutput) UrlPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PulsarJobConfig) *string {
		if v == nil {
			return nil
		}
		return v.UrlPath
	}).(pulumi.StringPtrOutput)
}

func (o PulsarJobConfigPtrOutput) UseXhr() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PulsarJobConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseXhr
	}).(pulumi.BoolPtrOutput)
}

type PulsarJobWeight struct {
	DefaultValue float64 `pulumi:"defaultValue"`
	Maximize     *bool   `pulumi:"maximize"`
	Name         string  `pulumi:"name"`
	Weight       int     `pulumi:"weight"`
}

// PulsarJobWeightInput is an input type that accepts PulsarJobWeightArgs and PulsarJobWeightOutput values.
// You can construct a concrete instance of `PulsarJobWeightInput` via:
//
//	PulsarJobWeightArgs{...}
type PulsarJobWeightInput interface {
	pulumi.Input

	ToPulsarJobWeightOutput() PulsarJobWeightOutput
	ToPulsarJobWeightOutputWithContext(context.Context) PulsarJobWeightOutput
}

type PulsarJobWeightArgs struct {
	DefaultValue pulumi.Float64Input `pulumi:"defaultValue"`
	Maximize     pulumi.BoolPtrInput `pulumi:"maximize"`
	Name         pulumi.StringInput  `pulumi:"name"`
	Weight       pulumi.IntInput     `pulumi:"weight"`
}

func (PulsarJobWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PulsarJobWeight)(nil)).Elem()
}

func (i PulsarJobWeightArgs) ToPulsarJobWeightOutput() PulsarJobWeightOutput {
	return i.ToPulsarJobWeightOutputWithContext(context.Background())
}

func (i PulsarJobWeightArgs) ToPulsarJobWeightOutputWithContext(ctx context.Context) PulsarJobWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobWeightOutput)
}

// PulsarJobWeightArrayInput is an input type that accepts PulsarJobWeightArray and PulsarJobWeightArrayOutput values.
// You can construct a concrete instance of `PulsarJobWeightArrayInput` via:
//
//	PulsarJobWeightArray{ PulsarJobWeightArgs{...} }
type PulsarJobWeightArrayInput interface {
	pulumi.Input

	ToPulsarJobWeightArrayOutput() PulsarJobWeightArrayOutput
	ToPulsarJobWeightArrayOutputWithContext(context.Context) PulsarJobWeightArrayOutput
}

type PulsarJobWeightArray []PulsarJobWeightInput

func (PulsarJobWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PulsarJobWeight)(nil)).Elem()
}

func (i PulsarJobWeightArray) ToPulsarJobWeightArrayOutput() PulsarJobWeightArrayOutput {
	return i.ToPulsarJobWeightArrayOutputWithContext(context.Background())
}

func (i PulsarJobWeightArray) ToPulsarJobWeightArrayOutputWithContext(ctx context.Context) PulsarJobWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PulsarJobWeightArrayOutput)
}

type PulsarJobWeightOutput struct{ *pulumi.OutputState }

func (PulsarJobWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PulsarJobWeight)(nil)).Elem()
}

func (o PulsarJobWeightOutput) ToPulsarJobWeightOutput() PulsarJobWeightOutput {
	return o
}

func (o PulsarJobWeightOutput) ToPulsarJobWeightOutputWithContext(ctx context.Context) PulsarJobWeightOutput {
	return o
}

func (o PulsarJobWeightOutput) DefaultValue() pulumi.Float64Output {
	return o.ApplyT(func(v PulsarJobWeight) float64 { return v.DefaultValue }).(pulumi.Float64Output)
}

func (o PulsarJobWeightOutput) Maximize() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PulsarJobWeight) *bool { return v.Maximize }).(pulumi.BoolPtrOutput)
}

func (o PulsarJobWeightOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PulsarJobWeight) string { return v.Name }).(pulumi.StringOutput)
}

func (o PulsarJobWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v PulsarJobWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type PulsarJobWeightArrayOutput struct{ *pulumi.OutputState }

func (PulsarJobWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PulsarJobWeight)(nil)).Elem()
}

func (o PulsarJobWeightArrayOutput) ToPulsarJobWeightArrayOutput() PulsarJobWeightArrayOutput {
	return o
}

func (o PulsarJobWeightArrayOutput) ToPulsarJobWeightArrayOutputWithContext(ctx context.Context) PulsarJobWeightArrayOutput {
	return o
}

func (o PulsarJobWeightArrayOutput) Index(i pulumi.IntInput) PulsarJobWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PulsarJobWeight {
		return vs[0].([]PulsarJobWeight)[vs[1].(int)]
	}).(PulsarJobWeightOutput)
}

type RecordAnswer struct {
	// Space delimited string of RDATA fields dependent on the record type.
	//
	// A:
	//
	// answer = "1.2.3.4"
	//
	// CNAME:
	//
	// answer = "www.example.com"
	//
	// MX:
	//
	// answer = "5 mail.example.com"
	//
	// SRV:
	//
	// answer = "10 0 2380 node-1.example.com"
	//
	// SPF:
	//
	// answer = "v=DKIM1; k=rsa; p=XXXXXXXX"
	Answer *string           `pulumi:"answer"`
	Meta   map[string]string `pulumi:"meta"`
	// The region (Answer Group really) that this answer
	// belongs to. This should be one of the names specified in `regions`. Only a
	// single `region` per answer is currently supported. If you want an answer in
	// multiple regions, duplicating the answer (including metadata) is the correct
	// approach.
	// * `  meta ` - (Optional) meta is supported at the `answer` level. Meta
	//   is documented below.
	Region *string `pulumi:"region"`
}

// RecordAnswerInput is an input type that accepts RecordAnswerArgs and RecordAnswerOutput values.
// You can construct a concrete instance of `RecordAnswerInput` via:
//
//	RecordAnswerArgs{...}
type RecordAnswerInput interface {
	pulumi.Input

	ToRecordAnswerOutput() RecordAnswerOutput
	ToRecordAnswerOutputWithContext(context.Context) RecordAnswerOutput
}

type RecordAnswerArgs struct {
	// Space delimited string of RDATA fields dependent on the record type.
	//
	// A:
	//
	// answer = "1.2.3.4"
	//
	// CNAME:
	//
	// answer = "www.example.com"
	//
	// MX:
	//
	// answer = "5 mail.example.com"
	//
	// SRV:
	//
	// answer = "10 0 2380 node-1.example.com"
	//
	// SPF:
	//
	// answer = "v=DKIM1; k=rsa; p=XXXXXXXX"
	Answer pulumi.StringPtrInput `pulumi:"answer"`
	Meta   pulumi.StringMapInput `pulumi:"meta"`
	// The region (Answer Group really) that this answer
	// belongs to. This should be one of the names specified in `regions`. Only a
	// single `region` per answer is currently supported. If you want an answer in
	// multiple regions, duplicating the answer (including metadata) is the correct
	// approach.
	// * `  meta ` - (Optional) meta is supported at the `answer` level. Meta
	//   is documented below.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (RecordAnswerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAnswer)(nil)).Elem()
}

func (i RecordAnswerArgs) ToRecordAnswerOutput() RecordAnswerOutput {
	return i.ToRecordAnswerOutputWithContext(context.Background())
}

func (i RecordAnswerArgs) ToRecordAnswerOutputWithContext(ctx context.Context) RecordAnswerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAnswerOutput)
}

// RecordAnswerArrayInput is an input type that accepts RecordAnswerArray and RecordAnswerArrayOutput values.
// You can construct a concrete instance of `RecordAnswerArrayInput` via:
//
//	RecordAnswerArray{ RecordAnswerArgs{...} }
type RecordAnswerArrayInput interface {
	pulumi.Input

	ToRecordAnswerArrayOutput() RecordAnswerArrayOutput
	ToRecordAnswerArrayOutputWithContext(context.Context) RecordAnswerArrayOutput
}

type RecordAnswerArray []RecordAnswerInput

func (RecordAnswerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAnswer)(nil)).Elem()
}

func (i RecordAnswerArray) ToRecordAnswerArrayOutput() RecordAnswerArrayOutput {
	return i.ToRecordAnswerArrayOutputWithContext(context.Background())
}

func (i RecordAnswerArray) ToRecordAnswerArrayOutputWithContext(ctx context.Context) RecordAnswerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAnswerArrayOutput)
}

type RecordAnswerOutput struct{ *pulumi.OutputState }

func (RecordAnswerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAnswer)(nil)).Elem()
}

func (o RecordAnswerOutput) ToRecordAnswerOutput() RecordAnswerOutput {
	return o
}

func (o RecordAnswerOutput) ToRecordAnswerOutputWithContext(ctx context.Context) RecordAnswerOutput {
	return o
}

// Space delimited string of RDATA fields dependent on the record type.
//
// A:
//
// answer = "1.2.3.4"
//
// CNAME:
//
// answer = "www.example.com"
//
// MX:
//
// answer = "5 mail.example.com"
//
// SRV:
//
// answer = "10 0 2380 node-1.example.com"
//
// SPF:
//
// answer = "v=DKIM1; k=rsa; p=XXXXXXXX"
func (o RecordAnswerOutput) Answer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAnswer) *string { return v.Answer }).(pulumi.StringPtrOutput)
}

func (o RecordAnswerOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v RecordAnswer) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

// The region (Answer Group really) that this answer
// belongs to. This should be one of the names specified in `regions`. Only a
// single `region` per answer is currently supported. If you want an answer in
// multiple regions, duplicating the answer (including metadata) is the correct
// approach.
//   - `  meta ` - (Optional) meta is supported at the `answer` level. Meta
//     is documented below.
func (o RecordAnswerOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAnswer) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type RecordAnswerArrayOutput struct{ *pulumi.OutputState }

func (RecordAnswerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAnswer)(nil)).Elem()
}

func (o RecordAnswerArrayOutput) ToRecordAnswerArrayOutput() RecordAnswerArrayOutput {
	return o
}

func (o RecordAnswerArrayOutput) ToRecordAnswerArrayOutputWithContext(ctx context.Context) RecordAnswerArrayOutput {
	return o
}

func (o RecordAnswerArrayOutput) Index(i pulumi.IntInput) RecordAnswerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordAnswer {
		return vs[0].([]RecordAnswer)[vs[1].(int)]
	}).(RecordAnswerOutput)
}

type RecordFilter struct {
	// The filters' configuration. Simple key/value pairs
	// determined by the filter type.
	Config map[string]string `pulumi:"config"`
	// Determines whether the filter is applied in the
	// filter chain.
	Disabled *bool `pulumi:"disabled"`
	// The type of filter.
	Filter string `pulumi:"filter"`
}

// RecordFilterInput is an input type that accepts RecordFilterArgs and RecordFilterOutput values.
// You can construct a concrete instance of `RecordFilterInput` via:
//
//	RecordFilterArgs{...}
type RecordFilterInput interface {
	pulumi.Input

	ToRecordFilterOutput() RecordFilterOutput
	ToRecordFilterOutputWithContext(context.Context) RecordFilterOutput
}

type RecordFilterArgs struct {
	// The filters' configuration. Simple key/value pairs
	// determined by the filter type.
	Config pulumi.StringMapInput `pulumi:"config"`
	// Determines whether the filter is applied in the
	// filter chain.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The type of filter.
	Filter pulumi.StringInput `pulumi:"filter"`
}

func (RecordFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFilter)(nil)).Elem()
}

func (i RecordFilterArgs) ToRecordFilterOutput() RecordFilterOutput {
	return i.ToRecordFilterOutputWithContext(context.Background())
}

func (i RecordFilterArgs) ToRecordFilterOutputWithContext(ctx context.Context) RecordFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFilterOutput)
}

// RecordFilterArrayInput is an input type that accepts RecordFilterArray and RecordFilterArrayOutput values.
// You can construct a concrete instance of `RecordFilterArrayInput` via:
//
//	RecordFilterArray{ RecordFilterArgs{...} }
type RecordFilterArrayInput interface {
	pulumi.Input

	ToRecordFilterArrayOutput() RecordFilterArrayOutput
	ToRecordFilterArrayOutputWithContext(context.Context) RecordFilterArrayOutput
}

type RecordFilterArray []RecordFilterInput

func (RecordFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFilter)(nil)).Elem()
}

func (i RecordFilterArray) ToRecordFilterArrayOutput() RecordFilterArrayOutput {
	return i.ToRecordFilterArrayOutputWithContext(context.Background())
}

func (i RecordFilterArray) ToRecordFilterArrayOutputWithContext(ctx context.Context) RecordFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFilterArrayOutput)
}

type RecordFilterOutput struct{ *pulumi.OutputState }

func (RecordFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFilter)(nil)).Elem()
}

func (o RecordFilterOutput) ToRecordFilterOutput() RecordFilterOutput {
	return o
}

func (o RecordFilterOutput) ToRecordFilterOutputWithContext(ctx context.Context) RecordFilterOutput {
	return o
}

// The filters' configuration. Simple key/value pairs
// determined by the filter type.
func (o RecordFilterOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v RecordFilter) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Determines whether the filter is applied in the
// filter chain.
func (o RecordFilterOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RecordFilter) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The type of filter.
func (o RecordFilterOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v RecordFilter) string { return v.Filter }).(pulumi.StringOutput)
}

type RecordFilterArrayOutput struct{ *pulumi.OutputState }

func (RecordFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFilter)(nil)).Elem()
}

func (o RecordFilterArrayOutput) ToRecordFilterArrayOutput() RecordFilterArrayOutput {
	return o
}

func (o RecordFilterArrayOutput) ToRecordFilterArrayOutputWithContext(ctx context.Context) RecordFilterArrayOutput {
	return o
}

func (o RecordFilterArrayOutput) Index(i pulumi.IntInput) RecordFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordFilter {
		return vs[0].([]RecordFilter)[vs[1].(int)]
	}).(RecordFilterOutput)
}

type RecordRegion struct {
	Meta map[string]string `pulumi:"meta"`
	// Name of the region (or Answer Group).
	Name string `pulumi:"name"`
}

// RecordRegionInput is an input type that accepts RecordRegionArgs and RecordRegionOutput values.
// You can construct a concrete instance of `RecordRegionInput` via:
//
//	RecordRegionArgs{...}
type RecordRegionInput interface {
	pulumi.Input

	ToRecordRegionOutput() RecordRegionOutput
	ToRecordRegionOutputWithContext(context.Context) RecordRegionOutput
}

type RecordRegionArgs struct {
	Meta pulumi.StringMapInput `pulumi:"meta"`
	// Name of the region (or Answer Group).
	Name pulumi.StringInput `pulumi:"name"`
}

func (RecordRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordRegion)(nil)).Elem()
}

func (i RecordRegionArgs) ToRecordRegionOutput() RecordRegionOutput {
	return i.ToRecordRegionOutputWithContext(context.Background())
}

func (i RecordRegionArgs) ToRecordRegionOutputWithContext(ctx context.Context) RecordRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordRegionOutput)
}

// RecordRegionArrayInput is an input type that accepts RecordRegionArray and RecordRegionArrayOutput values.
// You can construct a concrete instance of `RecordRegionArrayInput` via:
//
//	RecordRegionArray{ RecordRegionArgs{...} }
type RecordRegionArrayInput interface {
	pulumi.Input

	ToRecordRegionArrayOutput() RecordRegionArrayOutput
	ToRecordRegionArrayOutputWithContext(context.Context) RecordRegionArrayOutput
}

type RecordRegionArray []RecordRegionInput

func (RecordRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordRegion)(nil)).Elem()
}

func (i RecordRegionArray) ToRecordRegionArrayOutput() RecordRegionArrayOutput {
	return i.ToRecordRegionArrayOutputWithContext(context.Background())
}

func (i RecordRegionArray) ToRecordRegionArrayOutputWithContext(ctx context.Context) RecordRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordRegionArrayOutput)
}

type RecordRegionOutput struct{ *pulumi.OutputState }

func (RecordRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordRegion)(nil)).Elem()
}

func (o RecordRegionOutput) ToRecordRegionOutput() RecordRegionOutput {
	return o
}

func (o RecordRegionOutput) ToRecordRegionOutputWithContext(ctx context.Context) RecordRegionOutput {
	return o
}

func (o RecordRegionOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v RecordRegion) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

// Name of the region (or Answer Group).
func (o RecordRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RecordRegion) string { return v.Name }).(pulumi.StringOutput)
}

type RecordRegionArrayOutput struct{ *pulumi.OutputState }

func (RecordRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordRegion)(nil)).Elem()
}

func (o RecordRegionArrayOutput) ToRecordRegionArrayOutput() RecordRegionArrayOutput {
	return o
}

func (o RecordRegionArrayOutput) ToRecordRegionArrayOutputWithContext(ctx context.Context) RecordRegionArrayOutput {
	return o
}

func (o RecordRegionArrayOutput) Index(i pulumi.IntInput) RecordRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordRegion {
		return vs[0].([]RecordRegion)[vs[1].(int)]
	}).(RecordRegionOutput)
}

type TeamDnsRecordsAllow struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// TeamDnsRecordsAllowInput is an input type that accepts TeamDnsRecordsAllowArgs and TeamDnsRecordsAllowOutput values.
// You can construct a concrete instance of `TeamDnsRecordsAllowInput` via:
//
//	TeamDnsRecordsAllowArgs{...}
type TeamDnsRecordsAllowInput interface {
	pulumi.Input

	ToTeamDnsRecordsAllowOutput() TeamDnsRecordsAllowOutput
	ToTeamDnsRecordsAllowOutputWithContext(context.Context) TeamDnsRecordsAllowOutput
}

type TeamDnsRecordsAllowArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (TeamDnsRecordsAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDnsRecordsAllow)(nil)).Elem()
}

func (i TeamDnsRecordsAllowArgs) ToTeamDnsRecordsAllowOutput() TeamDnsRecordsAllowOutput {
	return i.ToTeamDnsRecordsAllowOutputWithContext(context.Background())
}

func (i TeamDnsRecordsAllowArgs) ToTeamDnsRecordsAllowOutputWithContext(ctx context.Context) TeamDnsRecordsAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamDnsRecordsAllowOutput)
}

// TeamDnsRecordsAllowArrayInput is an input type that accepts TeamDnsRecordsAllowArray and TeamDnsRecordsAllowArrayOutput values.
// You can construct a concrete instance of `TeamDnsRecordsAllowArrayInput` via:
//
//	TeamDnsRecordsAllowArray{ TeamDnsRecordsAllowArgs{...} }
type TeamDnsRecordsAllowArrayInput interface {
	pulumi.Input

	ToTeamDnsRecordsAllowArrayOutput() TeamDnsRecordsAllowArrayOutput
	ToTeamDnsRecordsAllowArrayOutputWithContext(context.Context) TeamDnsRecordsAllowArrayOutput
}

type TeamDnsRecordsAllowArray []TeamDnsRecordsAllowInput

func (TeamDnsRecordsAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamDnsRecordsAllow)(nil)).Elem()
}

func (i TeamDnsRecordsAllowArray) ToTeamDnsRecordsAllowArrayOutput() TeamDnsRecordsAllowArrayOutput {
	return i.ToTeamDnsRecordsAllowArrayOutputWithContext(context.Background())
}

func (i TeamDnsRecordsAllowArray) ToTeamDnsRecordsAllowArrayOutputWithContext(ctx context.Context) TeamDnsRecordsAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamDnsRecordsAllowArrayOutput)
}

type TeamDnsRecordsAllowOutput struct{ *pulumi.OutputState }

func (TeamDnsRecordsAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDnsRecordsAllow)(nil)).Elem()
}

func (o TeamDnsRecordsAllowOutput) ToTeamDnsRecordsAllowOutput() TeamDnsRecordsAllowOutput {
	return o
}

func (o TeamDnsRecordsAllowOutput) ToTeamDnsRecordsAllowOutputWithContext(ctx context.Context) TeamDnsRecordsAllowOutput {
	return o
}

func (o TeamDnsRecordsAllowOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsAllow) string { return v.Domain }).(pulumi.StringOutput)
}

func (o TeamDnsRecordsAllowOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v TeamDnsRecordsAllow) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o TeamDnsRecordsAllowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsAllow) string { return v.Type }).(pulumi.StringOutput)
}

func (o TeamDnsRecordsAllowOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsAllow) string { return v.Zone }).(pulumi.StringOutput)
}

type TeamDnsRecordsAllowArrayOutput struct{ *pulumi.OutputState }

func (TeamDnsRecordsAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamDnsRecordsAllow)(nil)).Elem()
}

func (o TeamDnsRecordsAllowArrayOutput) ToTeamDnsRecordsAllowArrayOutput() TeamDnsRecordsAllowArrayOutput {
	return o
}

func (o TeamDnsRecordsAllowArrayOutput) ToTeamDnsRecordsAllowArrayOutputWithContext(ctx context.Context) TeamDnsRecordsAllowArrayOutput {
	return o
}

func (o TeamDnsRecordsAllowArrayOutput) Index(i pulumi.IntInput) TeamDnsRecordsAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamDnsRecordsAllow {
		return vs[0].([]TeamDnsRecordsAllow)[vs[1].(int)]
	}).(TeamDnsRecordsAllowOutput)
}

type TeamDnsRecordsDeny struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// TeamDnsRecordsDenyInput is an input type that accepts TeamDnsRecordsDenyArgs and TeamDnsRecordsDenyOutput values.
// You can construct a concrete instance of `TeamDnsRecordsDenyInput` via:
//
//	TeamDnsRecordsDenyArgs{...}
type TeamDnsRecordsDenyInput interface {
	pulumi.Input

	ToTeamDnsRecordsDenyOutput() TeamDnsRecordsDenyOutput
	ToTeamDnsRecordsDenyOutputWithContext(context.Context) TeamDnsRecordsDenyOutput
}

type TeamDnsRecordsDenyArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (TeamDnsRecordsDenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDnsRecordsDeny)(nil)).Elem()
}

func (i TeamDnsRecordsDenyArgs) ToTeamDnsRecordsDenyOutput() TeamDnsRecordsDenyOutput {
	return i.ToTeamDnsRecordsDenyOutputWithContext(context.Background())
}

func (i TeamDnsRecordsDenyArgs) ToTeamDnsRecordsDenyOutputWithContext(ctx context.Context) TeamDnsRecordsDenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamDnsRecordsDenyOutput)
}

// TeamDnsRecordsDenyArrayInput is an input type that accepts TeamDnsRecordsDenyArray and TeamDnsRecordsDenyArrayOutput values.
// You can construct a concrete instance of `TeamDnsRecordsDenyArrayInput` via:
//
//	TeamDnsRecordsDenyArray{ TeamDnsRecordsDenyArgs{...} }
type TeamDnsRecordsDenyArrayInput interface {
	pulumi.Input

	ToTeamDnsRecordsDenyArrayOutput() TeamDnsRecordsDenyArrayOutput
	ToTeamDnsRecordsDenyArrayOutputWithContext(context.Context) TeamDnsRecordsDenyArrayOutput
}

type TeamDnsRecordsDenyArray []TeamDnsRecordsDenyInput

func (TeamDnsRecordsDenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamDnsRecordsDeny)(nil)).Elem()
}

func (i TeamDnsRecordsDenyArray) ToTeamDnsRecordsDenyArrayOutput() TeamDnsRecordsDenyArrayOutput {
	return i.ToTeamDnsRecordsDenyArrayOutputWithContext(context.Background())
}

func (i TeamDnsRecordsDenyArray) ToTeamDnsRecordsDenyArrayOutputWithContext(ctx context.Context) TeamDnsRecordsDenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamDnsRecordsDenyArrayOutput)
}

type TeamDnsRecordsDenyOutput struct{ *pulumi.OutputState }

func (TeamDnsRecordsDenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDnsRecordsDeny)(nil)).Elem()
}

func (o TeamDnsRecordsDenyOutput) ToTeamDnsRecordsDenyOutput() TeamDnsRecordsDenyOutput {
	return o
}

func (o TeamDnsRecordsDenyOutput) ToTeamDnsRecordsDenyOutputWithContext(ctx context.Context) TeamDnsRecordsDenyOutput {
	return o
}

func (o TeamDnsRecordsDenyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsDeny) string { return v.Domain }).(pulumi.StringOutput)
}

func (o TeamDnsRecordsDenyOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v TeamDnsRecordsDeny) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o TeamDnsRecordsDenyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsDeny) string { return v.Type }).(pulumi.StringOutput)
}

func (o TeamDnsRecordsDenyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsDeny) string { return v.Zone }).(pulumi.StringOutput)
}

type TeamDnsRecordsDenyArrayOutput struct{ *pulumi.OutputState }

func (TeamDnsRecordsDenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamDnsRecordsDeny)(nil)).Elem()
}

func (o TeamDnsRecordsDenyArrayOutput) ToTeamDnsRecordsDenyArrayOutput() TeamDnsRecordsDenyArrayOutput {
	return o
}

func (o TeamDnsRecordsDenyArrayOutput) ToTeamDnsRecordsDenyArrayOutputWithContext(ctx context.Context) TeamDnsRecordsDenyArrayOutput {
	return o
}

func (o TeamDnsRecordsDenyArrayOutput) Index(i pulumi.IntInput) TeamDnsRecordsDenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamDnsRecordsDeny {
		return vs[0].([]TeamDnsRecordsDeny)[vs[1].(int)]
	}).(TeamDnsRecordsDenyOutput)
}

type TeamIpWhitelist struct {
	// The free form name of the team.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// TeamIpWhitelistInput is an input type that accepts TeamIpWhitelistArgs and TeamIpWhitelistOutput values.
// You can construct a concrete instance of `TeamIpWhitelistInput` via:
//
//	TeamIpWhitelistArgs{...}
type TeamIpWhitelistInput interface {
	pulumi.Input

	ToTeamIpWhitelistOutput() TeamIpWhitelistOutput
	ToTeamIpWhitelistOutputWithContext(context.Context) TeamIpWhitelistOutput
}

type TeamIpWhitelistArgs struct {
	// The free form name of the team.
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TeamIpWhitelistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamIpWhitelist)(nil)).Elem()
}

func (i TeamIpWhitelistArgs) ToTeamIpWhitelistOutput() TeamIpWhitelistOutput {
	return i.ToTeamIpWhitelistOutputWithContext(context.Background())
}

func (i TeamIpWhitelistArgs) ToTeamIpWhitelistOutputWithContext(ctx context.Context) TeamIpWhitelistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamIpWhitelistOutput)
}

// TeamIpWhitelistArrayInput is an input type that accepts TeamIpWhitelistArray and TeamIpWhitelistArrayOutput values.
// You can construct a concrete instance of `TeamIpWhitelistArrayInput` via:
//
//	TeamIpWhitelistArray{ TeamIpWhitelistArgs{...} }
type TeamIpWhitelistArrayInput interface {
	pulumi.Input

	ToTeamIpWhitelistArrayOutput() TeamIpWhitelistArrayOutput
	ToTeamIpWhitelistArrayOutputWithContext(context.Context) TeamIpWhitelistArrayOutput
}

type TeamIpWhitelistArray []TeamIpWhitelistInput

func (TeamIpWhitelistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamIpWhitelist)(nil)).Elem()
}

func (i TeamIpWhitelistArray) ToTeamIpWhitelistArrayOutput() TeamIpWhitelistArrayOutput {
	return i.ToTeamIpWhitelistArrayOutputWithContext(context.Background())
}

func (i TeamIpWhitelistArray) ToTeamIpWhitelistArrayOutputWithContext(ctx context.Context) TeamIpWhitelistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamIpWhitelistArrayOutput)
}

type TeamIpWhitelistOutput struct{ *pulumi.OutputState }

func (TeamIpWhitelistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamIpWhitelist)(nil)).Elem()
}

func (o TeamIpWhitelistOutput) ToTeamIpWhitelistOutput() TeamIpWhitelistOutput {
	return o
}

func (o TeamIpWhitelistOutput) ToTeamIpWhitelistOutputWithContext(ctx context.Context) TeamIpWhitelistOutput {
	return o
}

// The free form name of the team.
func (o TeamIpWhitelistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TeamIpWhitelist) string { return v.Name }).(pulumi.StringOutput)
}

func (o TeamIpWhitelistOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TeamIpWhitelist) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TeamIpWhitelistArrayOutput struct{ *pulumi.OutputState }

func (TeamIpWhitelistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamIpWhitelist)(nil)).Elem()
}

func (o TeamIpWhitelistArrayOutput) ToTeamIpWhitelistArrayOutput() TeamIpWhitelistArrayOutput {
	return o
}

func (o TeamIpWhitelistArrayOutput) ToTeamIpWhitelistArrayOutputWithContext(ctx context.Context) TeamIpWhitelistArrayOutput {
	return o
}

func (o TeamIpWhitelistArrayOutput) Index(i pulumi.IntInput) TeamIpWhitelistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamIpWhitelist {
		return vs[0].([]TeamIpWhitelist)[vs[1].(int)]
	}).(TeamIpWhitelistOutput)
}

type UserDnsRecordsAllow struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// UserDnsRecordsAllowInput is an input type that accepts UserDnsRecordsAllowArgs and UserDnsRecordsAllowOutput values.
// You can construct a concrete instance of `UserDnsRecordsAllowInput` via:
//
//	UserDnsRecordsAllowArgs{...}
type UserDnsRecordsAllowInput interface {
	pulumi.Input

	ToUserDnsRecordsAllowOutput() UserDnsRecordsAllowOutput
	ToUserDnsRecordsAllowOutputWithContext(context.Context) UserDnsRecordsAllowOutput
}

type UserDnsRecordsAllowArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (UserDnsRecordsAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDnsRecordsAllow)(nil)).Elem()
}

func (i UserDnsRecordsAllowArgs) ToUserDnsRecordsAllowOutput() UserDnsRecordsAllowOutput {
	return i.ToUserDnsRecordsAllowOutputWithContext(context.Background())
}

func (i UserDnsRecordsAllowArgs) ToUserDnsRecordsAllowOutputWithContext(ctx context.Context) UserDnsRecordsAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDnsRecordsAllowOutput)
}

// UserDnsRecordsAllowArrayInput is an input type that accepts UserDnsRecordsAllowArray and UserDnsRecordsAllowArrayOutput values.
// You can construct a concrete instance of `UserDnsRecordsAllowArrayInput` via:
//
//	UserDnsRecordsAllowArray{ UserDnsRecordsAllowArgs{...} }
type UserDnsRecordsAllowArrayInput interface {
	pulumi.Input

	ToUserDnsRecordsAllowArrayOutput() UserDnsRecordsAllowArrayOutput
	ToUserDnsRecordsAllowArrayOutputWithContext(context.Context) UserDnsRecordsAllowArrayOutput
}

type UserDnsRecordsAllowArray []UserDnsRecordsAllowInput

func (UserDnsRecordsAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDnsRecordsAllow)(nil)).Elem()
}

func (i UserDnsRecordsAllowArray) ToUserDnsRecordsAllowArrayOutput() UserDnsRecordsAllowArrayOutput {
	return i.ToUserDnsRecordsAllowArrayOutputWithContext(context.Background())
}

func (i UserDnsRecordsAllowArray) ToUserDnsRecordsAllowArrayOutputWithContext(ctx context.Context) UserDnsRecordsAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDnsRecordsAllowArrayOutput)
}

type UserDnsRecordsAllowOutput struct{ *pulumi.OutputState }

func (UserDnsRecordsAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDnsRecordsAllow)(nil)).Elem()
}

func (o UserDnsRecordsAllowOutput) ToUserDnsRecordsAllowOutput() UserDnsRecordsAllowOutput {
	return o
}

func (o UserDnsRecordsAllowOutput) ToUserDnsRecordsAllowOutputWithContext(ctx context.Context) UserDnsRecordsAllowOutput {
	return o
}

func (o UserDnsRecordsAllowOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsAllow) string { return v.Domain }).(pulumi.StringOutput)
}

func (o UserDnsRecordsAllowOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v UserDnsRecordsAllow) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o UserDnsRecordsAllowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsAllow) string { return v.Type }).(pulumi.StringOutput)
}

func (o UserDnsRecordsAllowOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsAllow) string { return v.Zone }).(pulumi.StringOutput)
}

type UserDnsRecordsAllowArrayOutput struct{ *pulumi.OutputState }

func (UserDnsRecordsAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDnsRecordsAllow)(nil)).Elem()
}

func (o UserDnsRecordsAllowArrayOutput) ToUserDnsRecordsAllowArrayOutput() UserDnsRecordsAllowArrayOutput {
	return o
}

func (o UserDnsRecordsAllowArrayOutput) ToUserDnsRecordsAllowArrayOutputWithContext(ctx context.Context) UserDnsRecordsAllowArrayOutput {
	return o
}

func (o UserDnsRecordsAllowArrayOutput) Index(i pulumi.IntInput) UserDnsRecordsAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDnsRecordsAllow {
		return vs[0].([]UserDnsRecordsAllow)[vs[1].(int)]
	}).(UserDnsRecordsAllowOutput)
}

type UserDnsRecordsDeny struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// UserDnsRecordsDenyInput is an input type that accepts UserDnsRecordsDenyArgs and UserDnsRecordsDenyOutput values.
// You can construct a concrete instance of `UserDnsRecordsDenyInput` via:
//
//	UserDnsRecordsDenyArgs{...}
type UserDnsRecordsDenyInput interface {
	pulumi.Input

	ToUserDnsRecordsDenyOutput() UserDnsRecordsDenyOutput
	ToUserDnsRecordsDenyOutputWithContext(context.Context) UserDnsRecordsDenyOutput
}

type UserDnsRecordsDenyArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (UserDnsRecordsDenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDnsRecordsDeny)(nil)).Elem()
}

func (i UserDnsRecordsDenyArgs) ToUserDnsRecordsDenyOutput() UserDnsRecordsDenyOutput {
	return i.ToUserDnsRecordsDenyOutputWithContext(context.Background())
}

func (i UserDnsRecordsDenyArgs) ToUserDnsRecordsDenyOutputWithContext(ctx context.Context) UserDnsRecordsDenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDnsRecordsDenyOutput)
}

// UserDnsRecordsDenyArrayInput is an input type that accepts UserDnsRecordsDenyArray and UserDnsRecordsDenyArrayOutput values.
// You can construct a concrete instance of `UserDnsRecordsDenyArrayInput` via:
//
//	UserDnsRecordsDenyArray{ UserDnsRecordsDenyArgs{...} }
type UserDnsRecordsDenyArrayInput interface {
	pulumi.Input

	ToUserDnsRecordsDenyArrayOutput() UserDnsRecordsDenyArrayOutput
	ToUserDnsRecordsDenyArrayOutputWithContext(context.Context) UserDnsRecordsDenyArrayOutput
}

type UserDnsRecordsDenyArray []UserDnsRecordsDenyInput

func (UserDnsRecordsDenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDnsRecordsDeny)(nil)).Elem()
}

func (i UserDnsRecordsDenyArray) ToUserDnsRecordsDenyArrayOutput() UserDnsRecordsDenyArrayOutput {
	return i.ToUserDnsRecordsDenyArrayOutputWithContext(context.Background())
}

func (i UserDnsRecordsDenyArray) ToUserDnsRecordsDenyArrayOutputWithContext(ctx context.Context) UserDnsRecordsDenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDnsRecordsDenyArrayOutput)
}

type UserDnsRecordsDenyOutput struct{ *pulumi.OutputState }

func (UserDnsRecordsDenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDnsRecordsDeny)(nil)).Elem()
}

func (o UserDnsRecordsDenyOutput) ToUserDnsRecordsDenyOutput() UserDnsRecordsDenyOutput {
	return o
}

func (o UserDnsRecordsDenyOutput) ToUserDnsRecordsDenyOutputWithContext(ctx context.Context) UserDnsRecordsDenyOutput {
	return o
}

func (o UserDnsRecordsDenyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsDeny) string { return v.Domain }).(pulumi.StringOutput)
}

func (o UserDnsRecordsDenyOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v UserDnsRecordsDeny) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o UserDnsRecordsDenyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsDeny) string { return v.Type }).(pulumi.StringOutput)
}

func (o UserDnsRecordsDenyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsDeny) string { return v.Zone }).(pulumi.StringOutput)
}

type UserDnsRecordsDenyArrayOutput struct{ *pulumi.OutputState }

func (UserDnsRecordsDenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDnsRecordsDeny)(nil)).Elem()
}

func (o UserDnsRecordsDenyArrayOutput) ToUserDnsRecordsDenyArrayOutput() UserDnsRecordsDenyArrayOutput {
	return o
}

func (o UserDnsRecordsDenyArrayOutput) ToUserDnsRecordsDenyArrayOutputWithContext(ctx context.Context) UserDnsRecordsDenyArrayOutput {
	return o
}

func (o UserDnsRecordsDenyArrayOutput) Index(i pulumi.IntInput) UserDnsRecordsDenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDnsRecordsDeny {
		return vs[0].([]UserDnsRecordsDeny)[vs[1].(int)]
	}).(UserDnsRecordsDenyOutput)
}

type ZoneSecondary struct {
	// IPv4 address of the secondary server.
	Ip string `pulumi:"ip"`
	// List of network IDs (`int`) for which the zone
	// should be made available. Default is network 0, the primary NSONE Global
	// Network. Normally, you should not have to worry about this.
	Networks []int `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify *bool `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port *int `pulumi:"port"`
}

// ZoneSecondaryInput is an input type that accepts ZoneSecondaryArgs and ZoneSecondaryOutput values.
// You can construct a concrete instance of `ZoneSecondaryInput` via:
//
//	ZoneSecondaryArgs{...}
type ZoneSecondaryInput interface {
	pulumi.Input

	ToZoneSecondaryOutput() ZoneSecondaryOutput
	ToZoneSecondaryOutputWithContext(context.Context) ZoneSecondaryOutput
}

type ZoneSecondaryArgs struct {
	// IPv4 address of the secondary server.
	Ip pulumi.StringInput `pulumi:"ip"`
	// List of network IDs (`int`) for which the zone
	// should be made available. Default is network 0, the primary NSONE Global
	// Network. Normally, you should not have to worry about this.
	Networks pulumi.IntArrayInput `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify pulumi.BoolPtrInput `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ZoneSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneSecondary)(nil)).Elem()
}

func (i ZoneSecondaryArgs) ToZoneSecondaryOutput() ZoneSecondaryOutput {
	return i.ToZoneSecondaryOutputWithContext(context.Background())
}

func (i ZoneSecondaryArgs) ToZoneSecondaryOutputWithContext(ctx context.Context) ZoneSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSecondaryOutput)
}

// ZoneSecondaryArrayInput is an input type that accepts ZoneSecondaryArray and ZoneSecondaryArrayOutput values.
// You can construct a concrete instance of `ZoneSecondaryArrayInput` via:
//
//	ZoneSecondaryArray{ ZoneSecondaryArgs{...} }
type ZoneSecondaryArrayInput interface {
	pulumi.Input

	ToZoneSecondaryArrayOutput() ZoneSecondaryArrayOutput
	ToZoneSecondaryArrayOutputWithContext(context.Context) ZoneSecondaryArrayOutput
}

type ZoneSecondaryArray []ZoneSecondaryInput

func (ZoneSecondaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneSecondary)(nil)).Elem()
}

func (i ZoneSecondaryArray) ToZoneSecondaryArrayOutput() ZoneSecondaryArrayOutput {
	return i.ToZoneSecondaryArrayOutputWithContext(context.Background())
}

func (i ZoneSecondaryArray) ToZoneSecondaryArrayOutputWithContext(ctx context.Context) ZoneSecondaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSecondaryArrayOutput)
}

type ZoneSecondaryOutput struct{ *pulumi.OutputState }

func (ZoneSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneSecondary)(nil)).Elem()
}

func (o ZoneSecondaryOutput) ToZoneSecondaryOutput() ZoneSecondaryOutput {
	return o
}

func (o ZoneSecondaryOutput) ToZoneSecondaryOutputWithContext(ctx context.Context) ZoneSecondaryOutput {
	return o
}

// IPv4 address of the secondary server.
func (o ZoneSecondaryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneSecondary) string { return v.Ip }).(pulumi.StringOutput)
}

// List of network IDs (`int`) for which the zone
// should be made available. Default is network 0, the primary NSONE Global
// Network. Normally, you should not have to worry about this.
func (o ZoneSecondaryOutput) Networks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ZoneSecondary) []int { return v.Networks }).(pulumi.IntArrayOutput)
}

// Whether we send `NOTIFY` messages to the secondary host
// when the zone changes. Default `false`.
func (o ZoneSecondaryOutput) Notify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ZoneSecondary) *bool { return v.Notify }).(pulumi.BoolPtrOutput)
}

// Port of the the secondary server. Default `53`.
func (o ZoneSecondaryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZoneSecondary) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ZoneSecondaryArrayOutput struct{ *pulumi.OutputState }

func (ZoneSecondaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneSecondary)(nil)).Elem()
}

func (o ZoneSecondaryArrayOutput) ToZoneSecondaryArrayOutput() ZoneSecondaryArrayOutput {
	return o
}

func (o ZoneSecondaryArrayOutput) ToZoneSecondaryArrayOutputWithContext(ctx context.Context) ZoneSecondaryArrayOutput {
	return o
}

func (o ZoneSecondaryArrayOutput) Index(i pulumi.IntInput) ZoneSecondaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneSecondary {
		return vs[0].([]ZoneSecondary)[vs[1].(int)]
	}).(ZoneSecondaryOutput)
}

type GetBillingUsageByNetwork struct {
	// Total billable queries for this network.
	BillableQueries int `pulumi:"billableQueries"`
	// Clean queries for this day.
	CleanQueries int `pulumi:"cleanQueries"`
	// Daily breakdown containing:
	Dailies []GetBillingUsageByNetworkDaily `pulumi:"dailies"`
	// DDoS queries for this day.
	DdosQueries int `pulumi:"ddosQueries"`
	// The network ID.
	Network int `pulumi:"network"`
	// NXD responses for this day.
	NxdResponses int `pulumi:"nxdResponses"`
}

// GetBillingUsageByNetworkInput is an input type that accepts GetBillingUsageByNetworkArgs and GetBillingUsageByNetworkOutput values.
// You can construct a concrete instance of `GetBillingUsageByNetworkInput` via:
//
//	GetBillingUsageByNetworkArgs{...}
type GetBillingUsageByNetworkInput interface {
	pulumi.Input

	ToGetBillingUsageByNetworkOutput() GetBillingUsageByNetworkOutput
	ToGetBillingUsageByNetworkOutputWithContext(context.Context) GetBillingUsageByNetworkOutput
}

type GetBillingUsageByNetworkArgs struct {
	// Total billable queries for this network.
	BillableQueries pulumi.IntInput `pulumi:"billableQueries"`
	// Clean queries for this day.
	CleanQueries pulumi.IntInput `pulumi:"cleanQueries"`
	// Daily breakdown containing:
	Dailies GetBillingUsageByNetworkDailyArrayInput `pulumi:"dailies"`
	// DDoS queries for this day.
	DdosQueries pulumi.IntInput `pulumi:"ddosQueries"`
	// The network ID.
	Network pulumi.IntInput `pulumi:"network"`
	// NXD responses for this day.
	NxdResponses pulumi.IntInput `pulumi:"nxdResponses"`
}

func (GetBillingUsageByNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBillingUsageByNetwork)(nil)).Elem()
}

func (i GetBillingUsageByNetworkArgs) ToGetBillingUsageByNetworkOutput() GetBillingUsageByNetworkOutput {
	return i.ToGetBillingUsageByNetworkOutputWithContext(context.Background())
}

func (i GetBillingUsageByNetworkArgs) ToGetBillingUsageByNetworkOutputWithContext(ctx context.Context) GetBillingUsageByNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBillingUsageByNetworkOutput)
}

// GetBillingUsageByNetworkArrayInput is an input type that accepts GetBillingUsageByNetworkArray and GetBillingUsageByNetworkArrayOutput values.
// You can construct a concrete instance of `GetBillingUsageByNetworkArrayInput` via:
//
//	GetBillingUsageByNetworkArray{ GetBillingUsageByNetworkArgs{...} }
type GetBillingUsageByNetworkArrayInput interface {
	pulumi.Input

	ToGetBillingUsageByNetworkArrayOutput() GetBillingUsageByNetworkArrayOutput
	ToGetBillingUsageByNetworkArrayOutputWithContext(context.Context) GetBillingUsageByNetworkArrayOutput
}

type GetBillingUsageByNetworkArray []GetBillingUsageByNetworkInput

func (GetBillingUsageByNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBillingUsageByNetwork)(nil)).Elem()
}

func (i GetBillingUsageByNetworkArray) ToGetBillingUsageByNetworkArrayOutput() GetBillingUsageByNetworkArrayOutput {
	return i.ToGetBillingUsageByNetworkArrayOutputWithContext(context.Background())
}

func (i GetBillingUsageByNetworkArray) ToGetBillingUsageByNetworkArrayOutputWithContext(ctx context.Context) GetBillingUsageByNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBillingUsageByNetworkArrayOutput)
}

type GetBillingUsageByNetworkOutput struct{ *pulumi.OutputState }

func (GetBillingUsageByNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBillingUsageByNetwork)(nil)).Elem()
}

func (o GetBillingUsageByNetworkOutput) ToGetBillingUsageByNetworkOutput() GetBillingUsageByNetworkOutput {
	return o
}

func (o GetBillingUsageByNetworkOutput) ToGetBillingUsageByNetworkOutputWithContext(ctx context.Context) GetBillingUsageByNetworkOutput {
	return o
}

// Total billable queries for this network.
func (o GetBillingUsageByNetworkOutput) BillableQueries() pulumi.IntOutput {
	return o.ApplyT(func(v GetBillingUsageByNetwork) int { return v.BillableQueries }).(pulumi.IntOutput)
}

// Clean queries for this day.
func (o GetBillingUsageByNetworkOutput) CleanQueries() pulumi.IntOutput {
	return o.ApplyT(func(v GetBillingUsageByNetwork) int { return v.CleanQueries }).(pulumi.IntOutput)
}

// Daily breakdown containing:
func (o GetBillingUsageByNetworkOutput) Dailies() GetBillingUsageByNetworkDailyArrayOutput {
	return o.ApplyT(func(v GetBillingUsageByNetwork) []GetBillingUsageByNetworkDaily { return v.Dailies }).(GetBillingUsageByNetworkDailyArrayOutput)
}

// DDoS queries for this day.
func (o GetBillingUsageByNetworkOutput) DdosQueries() pulumi.IntOutput {
	return o.ApplyT(func(v GetBillingUsageByNetwork) int { return v.DdosQueries }).(pulumi.IntOutput)
}

// The network ID.
func (o GetBillingUsageByNetworkOutput) Network() pulumi.IntOutput {
	return o.ApplyT(func(v GetBillingUsageByNetwork) int { return v.Network }).(pulumi.IntOutput)
}

// NXD responses for this day.
func (o GetBillingUsageByNetworkOutput) NxdResponses() pulumi.IntOutput {
	return o.ApplyT(func(v GetBillingUsageByNetwork) int { return v.NxdResponses }).(pulumi.IntOutput)
}

type GetBillingUsageByNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetBillingUsageByNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBillingUsageByNetwork)(nil)).Elem()
}

func (o GetBillingUsageByNetworkArrayOutput) ToGetBillingUsageByNetworkArrayOutput() GetBillingUsageByNetworkArrayOutput {
	return o
}

func (o GetBillingUsageByNetworkArrayOutput) ToGetBillingUsageByNetworkArrayOutputWithContext(ctx context.Context) GetBillingUsageByNetworkArrayOutput {
	return o
}

func (o GetBillingUsageByNetworkArrayOutput) Index(i pulumi.IntInput) GetBillingUsageByNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBillingUsageByNetwork {
		return vs[0].([]GetBillingUsageByNetwork)[vs[1].(int)]
	}).(GetBillingUsageByNetworkOutput)
}

type GetBillingUsageByNetworkDaily struct {
	// Clean queries for this day.
	CleanQueries int `pulumi:"cleanQueries"`
	// DDoS queries for this day.
	DdosQueries int `pulumi:"ddosQueries"`
	// NXD responses for this day.
	NxdResponses int `pulumi:"nxdResponses"`
	// The timestamp for the day.
	Timestamp int `pulumi:"timestamp"`
}

// GetBillingUsageByNetworkDailyInput is an input type that accepts GetBillingUsageByNetworkDailyArgs and GetBillingUsageByNetworkDailyOutput values.
// You can construct a concrete instance of `GetBillingUsageByNetworkDailyInput` via:
//
//	GetBillingUsageByNetworkDailyArgs{...}
type GetBillingUsageByNetworkDailyInput interface {
	pulumi.Input

	ToGetBillingUsageByNetworkDailyOutput() GetBillingUsageByNetworkDailyOutput
	ToGetBillingUsageByNetworkDailyOutputWithContext(context.Context) GetBillingUsageByNetworkDailyOutput
}

type GetBillingUsageByNetworkDailyArgs struct {
	// Clean queries for this day.
	CleanQueries pulumi.IntInput `pulumi:"cleanQueries"`
	// DDoS queries for this day.
	DdosQueries pulumi.IntInput `pulumi:"ddosQueries"`
	// NXD responses for this day.
	NxdResponses pulumi.IntInput `pulumi:"nxdResponses"`
	// The timestamp for the day.
	Timestamp pulumi.IntInput `pulumi:"timestamp"`
}

func (GetBillingUsageByNetworkDailyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBillingUsageByNetworkDaily)(nil)).Elem()
}

func (i GetBillingUsageByNetworkDailyArgs) ToGetBillingUsageByNetworkDailyOutput() GetBillingUsageByNetworkDailyOutput {
	return i.ToGetBillingUsageByNetworkDailyOutputWithContext(context.Background())
}

func (i GetBillingUsageByNetworkDailyArgs) ToGetBillingUsageByNetworkDailyOutputWithContext(ctx context.Context) GetBillingUsageByNetworkDailyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBillingUsageByNetworkDailyOutput)
}

// GetBillingUsageByNetworkDailyArrayInput is an input type that accepts GetBillingUsageByNetworkDailyArray and GetBillingUsageByNetworkDailyArrayOutput values.
// You can construct a concrete instance of `GetBillingUsageByNetworkDailyArrayInput` via:
//
//	GetBillingUsageByNetworkDailyArray{ GetBillingUsageByNetworkDailyArgs{...} }
type GetBillingUsageByNetworkDailyArrayInput interface {
	pulumi.Input

	ToGetBillingUsageByNetworkDailyArrayOutput() GetBillingUsageByNetworkDailyArrayOutput
	ToGetBillingUsageByNetworkDailyArrayOutputWithContext(context.Context) GetBillingUsageByNetworkDailyArrayOutput
}

type GetBillingUsageByNetworkDailyArray []GetBillingUsageByNetworkDailyInput

func (GetBillingUsageByNetworkDailyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBillingUsageByNetworkDaily)(nil)).Elem()
}

func (i GetBillingUsageByNetworkDailyArray) ToGetBillingUsageByNetworkDailyArrayOutput() GetBillingUsageByNetworkDailyArrayOutput {
	return i.ToGetBillingUsageByNetworkDailyArrayOutputWithContext(context.Background())
}

func (i GetBillingUsageByNetworkDailyArray) ToGetBillingUsageByNetworkDailyArrayOutputWithContext(ctx context.Context) GetBillingUsageByNetworkDailyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBillingUsageByNetworkDailyArrayOutput)
}

type GetBillingUsageByNetworkDailyOutput struct{ *pulumi.OutputState }

func (GetBillingUsageByNetworkDailyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBillingUsageByNetworkDaily)(nil)).Elem()
}

func (o GetBillingUsageByNetworkDailyOutput) ToGetBillingUsageByNetworkDailyOutput() GetBillingUsageByNetworkDailyOutput {
	return o
}

func (o GetBillingUsageByNetworkDailyOutput) ToGetBillingUsageByNetworkDailyOutputWithContext(ctx context.Context) GetBillingUsageByNetworkDailyOutput {
	return o
}

// Clean queries for this day.
func (o GetBillingUsageByNetworkDailyOutput) CleanQueries() pulumi.IntOutput {
	return o.ApplyT(func(v GetBillingUsageByNetworkDaily) int { return v.CleanQueries }).(pulumi.IntOutput)
}

// DDoS queries for this day.
func (o GetBillingUsageByNetworkDailyOutput) DdosQueries() pulumi.IntOutput {
	return o.ApplyT(func(v GetBillingUsageByNetworkDaily) int { return v.DdosQueries }).(pulumi.IntOutput)
}

// NXD responses for this day.
func (o GetBillingUsageByNetworkDailyOutput) NxdResponses() pulumi.IntOutput {
	return o.ApplyT(func(v GetBillingUsageByNetworkDaily) int { return v.NxdResponses }).(pulumi.IntOutput)
}

// The timestamp for the day.
func (o GetBillingUsageByNetworkDailyOutput) Timestamp() pulumi.IntOutput {
	return o.ApplyT(func(v GetBillingUsageByNetworkDaily) int { return v.Timestamp }).(pulumi.IntOutput)
}

type GetBillingUsageByNetworkDailyArrayOutput struct{ *pulumi.OutputState }

func (GetBillingUsageByNetworkDailyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBillingUsageByNetworkDaily)(nil)).Elem()
}

func (o GetBillingUsageByNetworkDailyArrayOutput) ToGetBillingUsageByNetworkDailyArrayOutput() GetBillingUsageByNetworkDailyArrayOutput {
	return o
}

func (o GetBillingUsageByNetworkDailyArrayOutput) ToGetBillingUsageByNetworkDailyArrayOutputWithContext(ctx context.Context) GetBillingUsageByNetworkDailyArrayOutput {
	return o
}

func (o GetBillingUsageByNetworkDailyArrayOutput) Index(i pulumi.IntInput) GetBillingUsageByNetworkDailyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBillingUsageByNetworkDaily {
		return vs[0].([]GetBillingUsageByNetworkDaily)[vs[1].(int)]
	}).(GetBillingUsageByNetworkDailyOutput)
}

type GetDNSSecDelegation struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys []GetDNSSecDelegationDnskey `pulumi:"dnskeys"`
	// (Computed) List of Keys. Key is documented below.
	Ds []GetDNSSecDelegationD `pulumi:"ds"`
	// (Computed) TTL for the Keys (int).
	Ttl int `pulumi:"ttl"`
}

// GetDNSSecDelegationInput is an input type that accepts GetDNSSecDelegationArgs and GetDNSSecDelegationOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationInput` via:
//
//	GetDNSSecDelegationArgs{...}
type GetDNSSecDelegationInput interface {
	pulumi.Input

	ToGetDNSSecDelegationOutput() GetDNSSecDelegationOutput
	ToGetDNSSecDelegationOutputWithContext(context.Context) GetDNSSecDelegationOutput
}

type GetDNSSecDelegationArgs struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys GetDNSSecDelegationDnskeyArrayInput `pulumi:"dnskeys"`
	// (Computed) List of Keys. Key is documented below.
	Ds GetDNSSecDelegationDArrayInput `pulumi:"ds"`
	// (Computed) TTL for the Keys (int).
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (GetDNSSecDelegationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegation)(nil)).Elem()
}

func (i GetDNSSecDelegationArgs) ToGetDNSSecDelegationOutput() GetDNSSecDelegationOutput {
	return i.ToGetDNSSecDelegationOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationArgs) ToGetDNSSecDelegationOutputWithContext(ctx context.Context) GetDNSSecDelegationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationOutput)
}

// GetDNSSecDelegationArrayInput is an input type that accepts GetDNSSecDelegationArray and GetDNSSecDelegationArrayOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationArrayInput` via:
//
//	GetDNSSecDelegationArray{ GetDNSSecDelegationArgs{...} }
type GetDNSSecDelegationArrayInput interface {
	pulumi.Input

	ToGetDNSSecDelegationArrayOutput() GetDNSSecDelegationArrayOutput
	ToGetDNSSecDelegationArrayOutputWithContext(context.Context) GetDNSSecDelegationArrayOutput
}

type GetDNSSecDelegationArray []GetDNSSecDelegationInput

func (GetDNSSecDelegationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegation)(nil)).Elem()
}

func (i GetDNSSecDelegationArray) ToGetDNSSecDelegationArrayOutput() GetDNSSecDelegationArrayOutput {
	return i.ToGetDNSSecDelegationArrayOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationArray) ToGetDNSSecDelegationArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationArrayOutput)
}

type GetDNSSecDelegationOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegation)(nil)).Elem()
}

func (o GetDNSSecDelegationOutput) ToGetDNSSecDelegationOutput() GetDNSSecDelegationOutput {
	return o
}

func (o GetDNSSecDelegationOutput) ToGetDNSSecDelegationOutputWithContext(ctx context.Context) GetDNSSecDelegationOutput {
	return o
}

// (Computed) List of Keys. Key is documented below.
func (o GetDNSSecDelegationOutput) Dnskeys() GetDNSSecDelegationDnskeyArrayOutput {
	return o.ApplyT(func(v GetDNSSecDelegation) []GetDNSSecDelegationDnskey { return v.Dnskeys }).(GetDNSSecDelegationDnskeyArrayOutput)
}

// (Computed) List of Keys. Key is documented below.
func (o GetDNSSecDelegationOutput) Ds() GetDNSSecDelegationDArrayOutput {
	return o.ApplyT(func(v GetDNSSecDelegation) []GetDNSSecDelegationD { return v.Ds }).(GetDNSSecDelegationDArrayOutput)
}

// (Computed) TTL for the Keys (int).
func (o GetDNSSecDelegationOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetDNSSecDelegation) int { return v.Ttl }).(pulumi.IntOutput)
}

type GetDNSSecDelegationArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegation)(nil)).Elem()
}

func (o GetDNSSecDelegationArrayOutput) ToGetDNSSecDelegationArrayOutput() GetDNSSecDelegationArrayOutput {
	return o
}

func (o GetDNSSecDelegationArrayOutput) ToGetDNSSecDelegationArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationArrayOutput {
	return o
}

func (o GetDNSSecDelegationArrayOutput) Index(i pulumi.IntInput) GetDNSSecDelegationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecDelegation {
		return vs[0].([]GetDNSSecDelegation)[vs[1].(int)]
	}).(GetDNSSecDelegationOutput)
}

type GetDNSSecDelegationD struct {
	// (Computed) Algorithm of the key.
	Algorithm string `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags string `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol string `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey string `pulumi:"publicKey"`
}

// GetDNSSecDelegationDInput is an input type that accepts GetDNSSecDelegationDArgs and GetDNSSecDelegationDOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDInput` via:
//
//	GetDNSSecDelegationDArgs{...}
type GetDNSSecDelegationDInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDOutput() GetDNSSecDelegationDOutput
	ToGetDNSSecDelegationDOutputWithContext(context.Context) GetDNSSecDelegationDOutput
}

type GetDNSSecDelegationDArgs struct {
	// (Computed) Algorithm of the key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags pulumi.StringInput `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetDNSSecDelegationDArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationD)(nil)).Elem()
}

func (i GetDNSSecDelegationDArgs) ToGetDNSSecDelegationDOutput() GetDNSSecDelegationDOutput {
	return i.ToGetDNSSecDelegationDOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDArgs) ToGetDNSSecDelegationDOutputWithContext(ctx context.Context) GetDNSSecDelegationDOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDOutput)
}

// GetDNSSecDelegationDArrayInput is an input type that accepts GetDNSSecDelegationDArray and GetDNSSecDelegationDArrayOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDArrayInput` via:
//
//	GetDNSSecDelegationDArray{ GetDNSSecDelegationDArgs{...} }
type GetDNSSecDelegationDArrayInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDArrayOutput() GetDNSSecDelegationDArrayOutput
	ToGetDNSSecDelegationDArrayOutputWithContext(context.Context) GetDNSSecDelegationDArrayOutput
}

type GetDNSSecDelegationDArray []GetDNSSecDelegationDInput

func (GetDNSSecDelegationDArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationD)(nil)).Elem()
}

func (i GetDNSSecDelegationDArray) ToGetDNSSecDelegationDArrayOutput() GetDNSSecDelegationDArrayOutput {
	return i.ToGetDNSSecDelegationDArrayOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDArray) ToGetDNSSecDelegationDArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDArrayOutput)
}

type GetDNSSecDelegationDOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationD)(nil)).Elem()
}

func (o GetDNSSecDelegationDOutput) ToGetDNSSecDelegationDOutput() GetDNSSecDelegationDOutput {
	return o
}

func (o GetDNSSecDelegationDOutput) ToGetDNSSecDelegationDOutputWithContext(ctx context.Context) GetDNSSecDelegationDOutput {
	return o
}

// (Computed) Algorithm of the key.
func (o GetDNSSecDelegationDOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.Algorithm }).(pulumi.StringOutput)
}

// (Computed) Flags for the key.
func (o GetDNSSecDelegationDOutput) Flags() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.Flags }).(pulumi.StringOutput)
}

// (Computed) Protocol of the key.
func (o GetDNSSecDelegationDOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Computed) Public key for the key.
func (o GetDNSSecDelegationDOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetDNSSecDelegationDArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationD)(nil)).Elem()
}

func (o GetDNSSecDelegationDArrayOutput) ToGetDNSSecDelegationDArrayOutput() GetDNSSecDelegationDArrayOutput {
	return o
}

func (o GetDNSSecDelegationDArrayOutput) ToGetDNSSecDelegationDArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDArrayOutput {
	return o
}

func (o GetDNSSecDelegationDArrayOutput) Index(i pulumi.IntInput) GetDNSSecDelegationDOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecDelegationD {
		return vs[0].([]GetDNSSecDelegationD)[vs[1].(int)]
	}).(GetDNSSecDelegationDOutput)
}

type GetDNSSecDelegationDnskey struct {
	// (Computed) Algorithm of the key.
	Algorithm string `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags string `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol string `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey string `pulumi:"publicKey"`
}

// GetDNSSecDelegationDnskeyInput is an input type that accepts GetDNSSecDelegationDnskeyArgs and GetDNSSecDelegationDnskeyOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDnskeyInput` via:
//
//	GetDNSSecDelegationDnskeyArgs{...}
type GetDNSSecDelegationDnskeyInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDnskeyOutput() GetDNSSecDelegationDnskeyOutput
	ToGetDNSSecDelegationDnskeyOutputWithContext(context.Context) GetDNSSecDelegationDnskeyOutput
}

type GetDNSSecDelegationDnskeyArgs struct {
	// (Computed) Algorithm of the key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags pulumi.StringInput `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetDNSSecDelegationDnskeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (i GetDNSSecDelegationDnskeyArgs) ToGetDNSSecDelegationDnskeyOutput() GetDNSSecDelegationDnskeyOutput {
	return i.ToGetDNSSecDelegationDnskeyOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDnskeyArgs) ToGetDNSSecDelegationDnskeyOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDnskeyOutput)
}

// GetDNSSecDelegationDnskeyArrayInput is an input type that accepts GetDNSSecDelegationDnskeyArray and GetDNSSecDelegationDnskeyArrayOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDnskeyArrayInput` via:
//
//	GetDNSSecDelegationDnskeyArray{ GetDNSSecDelegationDnskeyArgs{...} }
type GetDNSSecDelegationDnskeyArrayInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDnskeyArrayOutput() GetDNSSecDelegationDnskeyArrayOutput
	ToGetDNSSecDelegationDnskeyArrayOutputWithContext(context.Context) GetDNSSecDelegationDnskeyArrayOutput
}

type GetDNSSecDelegationDnskeyArray []GetDNSSecDelegationDnskeyInput

func (GetDNSSecDelegationDnskeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (i GetDNSSecDelegationDnskeyArray) ToGetDNSSecDelegationDnskeyArrayOutput() GetDNSSecDelegationDnskeyArrayOutput {
	return i.ToGetDNSSecDelegationDnskeyArrayOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDnskeyArray) ToGetDNSSecDelegationDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDnskeyArrayOutput)
}

type GetDNSSecDelegationDnskeyOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDnskeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (o GetDNSSecDelegationDnskeyOutput) ToGetDNSSecDelegationDnskeyOutput() GetDNSSecDelegationDnskeyOutput {
	return o
}

func (o GetDNSSecDelegationDnskeyOutput) ToGetDNSSecDelegationDnskeyOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyOutput {
	return o
}

// (Computed) Algorithm of the key.
func (o GetDNSSecDelegationDnskeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// (Computed) Flags for the key.
func (o GetDNSSecDelegationDnskeyOutput) Flags() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.Flags }).(pulumi.StringOutput)
}

// (Computed) Protocol of the key.
func (o GetDNSSecDelegationDnskeyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Computed) Public key for the key.
func (o GetDNSSecDelegationDnskeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetDNSSecDelegationDnskeyArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDnskeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (o GetDNSSecDelegationDnskeyArrayOutput) ToGetDNSSecDelegationDnskeyArrayOutput() GetDNSSecDelegationDnskeyArrayOutput {
	return o
}

func (o GetDNSSecDelegationDnskeyArrayOutput) ToGetDNSSecDelegationDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyArrayOutput {
	return o
}

func (o GetDNSSecDelegationDnskeyArrayOutput) Index(i pulumi.IntInput) GetDNSSecDelegationDnskeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecDelegationDnskey {
		return vs[0].([]GetDNSSecDelegationDnskey)[vs[1].(int)]
	}).(GetDNSSecDelegationDnskeyOutput)
}

type GetDNSSecKey struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys []GetDNSSecKeyDnskey `pulumi:"dnskeys"`
	// (Computed) TTL for the Keys (int).
	Ttl int `pulumi:"ttl"`
}

// GetDNSSecKeyInput is an input type that accepts GetDNSSecKeyArgs and GetDNSSecKeyOutput values.
// You can construct a concrete instance of `GetDNSSecKeyInput` via:
//
//	GetDNSSecKeyArgs{...}
type GetDNSSecKeyInput interface {
	pulumi.Input

	ToGetDNSSecKeyOutput() GetDNSSecKeyOutput
	ToGetDNSSecKeyOutputWithContext(context.Context) GetDNSSecKeyOutput
}

type GetDNSSecKeyArgs struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys GetDNSSecKeyDnskeyArrayInput `pulumi:"dnskeys"`
	// (Computed) TTL for the Keys (int).
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (GetDNSSecKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKey)(nil)).Elem()
}

func (i GetDNSSecKeyArgs) ToGetDNSSecKeyOutput() GetDNSSecKeyOutput {
	return i.ToGetDNSSecKeyOutputWithContext(context.Background())
}

func (i GetDNSSecKeyArgs) ToGetDNSSecKeyOutputWithContext(ctx context.Context) GetDNSSecKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeyOutput)
}

// GetDNSSecKeyArrayInput is an input type that accepts GetDNSSecKeyArray and GetDNSSecKeyArrayOutput values.
// You can construct a concrete instance of `GetDNSSecKeyArrayInput` via:
//
//	GetDNSSecKeyArray{ GetDNSSecKeyArgs{...} }
type GetDNSSecKeyArrayInput interface {
	pulumi.Input

	ToGetDNSSecKeyArrayOutput() GetDNSSecKeyArrayOutput
	ToGetDNSSecKeyArrayOutputWithContext(context.Context) GetDNSSecKeyArrayOutput
}

type GetDNSSecKeyArray []GetDNSSecKeyInput

func (GetDNSSecKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecKey)(nil)).Elem()
}

func (i GetDNSSecKeyArray) ToGetDNSSecKeyArrayOutput() GetDNSSecKeyArrayOutput {
	return i.ToGetDNSSecKeyArrayOutputWithContext(context.Background())
}

func (i GetDNSSecKeyArray) ToGetDNSSecKeyArrayOutputWithContext(ctx context.Context) GetDNSSecKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeyArrayOutput)
}

type GetDNSSecKeyOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKey)(nil)).Elem()
}

func (o GetDNSSecKeyOutput) ToGetDNSSecKeyOutput() GetDNSSecKeyOutput {
	return o
}

func (o GetDNSSecKeyOutput) ToGetDNSSecKeyOutputWithContext(ctx context.Context) GetDNSSecKeyOutput {
	return o
}

// (Computed) List of Keys. Key is documented below.
func (o GetDNSSecKeyOutput) Dnskeys() GetDNSSecKeyDnskeyArrayOutput {
	return o.ApplyT(func(v GetDNSSecKey) []GetDNSSecKeyDnskey { return v.Dnskeys }).(GetDNSSecKeyDnskeyArrayOutput)
}

// (Computed) TTL for the Keys (int).
func (o GetDNSSecKeyOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetDNSSecKey) int { return v.Ttl }).(pulumi.IntOutput)
}

type GetDNSSecKeyArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecKey)(nil)).Elem()
}

func (o GetDNSSecKeyArrayOutput) ToGetDNSSecKeyArrayOutput() GetDNSSecKeyArrayOutput {
	return o
}

func (o GetDNSSecKeyArrayOutput) ToGetDNSSecKeyArrayOutputWithContext(ctx context.Context) GetDNSSecKeyArrayOutput {
	return o
}

func (o GetDNSSecKeyArrayOutput) Index(i pulumi.IntInput) GetDNSSecKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecKey {
		return vs[0].([]GetDNSSecKey)[vs[1].(int)]
	}).(GetDNSSecKeyOutput)
}

type GetDNSSecKeyDnskey struct {
	// (Computed) Algorithm of the key.
	Algorithm string `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags string `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol string `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey string `pulumi:"publicKey"`
}

// GetDNSSecKeyDnskeyInput is an input type that accepts GetDNSSecKeyDnskeyArgs and GetDNSSecKeyDnskeyOutput values.
// You can construct a concrete instance of `GetDNSSecKeyDnskeyInput` via:
//
//	GetDNSSecKeyDnskeyArgs{...}
type GetDNSSecKeyDnskeyInput interface {
	pulumi.Input

	ToGetDNSSecKeyDnskeyOutput() GetDNSSecKeyDnskeyOutput
	ToGetDNSSecKeyDnskeyOutputWithContext(context.Context) GetDNSSecKeyDnskeyOutput
}

type GetDNSSecKeyDnskeyArgs struct {
	// (Computed) Algorithm of the key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags pulumi.StringInput `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetDNSSecKeyDnskeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeyDnskey)(nil)).Elem()
}

func (i GetDNSSecKeyDnskeyArgs) ToGetDNSSecKeyDnskeyOutput() GetDNSSecKeyDnskeyOutput {
	return i.ToGetDNSSecKeyDnskeyOutputWithContext(context.Background())
}

func (i GetDNSSecKeyDnskeyArgs) ToGetDNSSecKeyDnskeyOutputWithContext(ctx context.Context) GetDNSSecKeyDnskeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeyDnskeyOutput)
}

// GetDNSSecKeyDnskeyArrayInput is an input type that accepts GetDNSSecKeyDnskeyArray and GetDNSSecKeyDnskeyArrayOutput values.
// You can construct a concrete instance of `GetDNSSecKeyDnskeyArrayInput` via:
//
//	GetDNSSecKeyDnskeyArray{ GetDNSSecKeyDnskeyArgs{...} }
type GetDNSSecKeyDnskeyArrayInput interface {
	pulumi.Input

	ToGetDNSSecKeyDnskeyArrayOutput() GetDNSSecKeyDnskeyArrayOutput
	ToGetDNSSecKeyDnskeyArrayOutputWithContext(context.Context) GetDNSSecKeyDnskeyArrayOutput
}

type GetDNSSecKeyDnskeyArray []GetDNSSecKeyDnskeyInput

func (GetDNSSecKeyDnskeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecKeyDnskey)(nil)).Elem()
}

func (i GetDNSSecKeyDnskeyArray) ToGetDNSSecKeyDnskeyArrayOutput() GetDNSSecKeyDnskeyArrayOutput {
	return i.ToGetDNSSecKeyDnskeyArrayOutputWithContext(context.Background())
}

func (i GetDNSSecKeyDnskeyArray) ToGetDNSSecKeyDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecKeyDnskeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeyDnskeyArrayOutput)
}

type GetDNSSecKeyDnskeyOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeyDnskeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeyDnskey)(nil)).Elem()
}

func (o GetDNSSecKeyDnskeyOutput) ToGetDNSSecKeyDnskeyOutput() GetDNSSecKeyDnskeyOutput {
	return o
}

func (o GetDNSSecKeyDnskeyOutput) ToGetDNSSecKeyDnskeyOutputWithContext(ctx context.Context) GetDNSSecKeyDnskeyOutput {
	return o
}

// (Computed) Algorithm of the key.
func (o GetDNSSecKeyDnskeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeyDnskey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// (Computed) Flags for the key.
func (o GetDNSSecKeyDnskeyOutput) Flags() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeyDnskey) string { return v.Flags }).(pulumi.StringOutput)
}

// (Computed) Protocol of the key.
func (o GetDNSSecKeyDnskeyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeyDnskey) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Computed) Public key for the key.
func (o GetDNSSecKeyDnskeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeyDnskey) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetDNSSecKeyDnskeyArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeyDnskeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecKeyDnskey)(nil)).Elem()
}

func (o GetDNSSecKeyDnskeyArrayOutput) ToGetDNSSecKeyDnskeyArrayOutput() GetDNSSecKeyDnskeyArrayOutput {
	return o
}

func (o GetDNSSecKeyDnskeyArrayOutput) ToGetDNSSecKeyDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecKeyDnskeyArrayOutput {
	return o
}

func (o GetDNSSecKeyDnskeyArrayOutput) Index(i pulumi.IntInput) GetDNSSecKeyDnskeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecKeyDnskey {
		return vs[0].([]GetDNSSecKeyDnskey)[vs[1].(int)]
	}).(GetDNSSecKeyDnskeyOutput)
}

type GetMonitoringRegionsRegion struct {
	// 3-letter city code identifying the location of the monitor.
	Code *string `pulumi:"code"`
	// City name identifying the location of the monitor.
	Name *string `pulumi:"name"`
	// A list of IPv4 and IPv6 subnets the monitor sources requests from.
	Subnets []string `pulumi:"subnets"`
}

// GetMonitoringRegionsRegionInput is an input type that accepts GetMonitoringRegionsRegionArgs and GetMonitoringRegionsRegionOutput values.
// You can construct a concrete instance of `GetMonitoringRegionsRegionInput` via:
//
//	GetMonitoringRegionsRegionArgs{...}
type GetMonitoringRegionsRegionInput interface {
	pulumi.Input

	ToGetMonitoringRegionsRegionOutput() GetMonitoringRegionsRegionOutput
	ToGetMonitoringRegionsRegionOutputWithContext(context.Context) GetMonitoringRegionsRegionOutput
}

type GetMonitoringRegionsRegionArgs struct {
	// 3-letter city code identifying the location of the monitor.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// City name identifying the location of the monitor.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A list of IPv4 and IPv6 subnets the monitor sources requests from.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (GetMonitoringRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitoringRegionsRegion)(nil)).Elem()
}

func (i GetMonitoringRegionsRegionArgs) ToGetMonitoringRegionsRegionOutput() GetMonitoringRegionsRegionOutput {
	return i.ToGetMonitoringRegionsRegionOutputWithContext(context.Background())
}

func (i GetMonitoringRegionsRegionArgs) ToGetMonitoringRegionsRegionOutputWithContext(ctx context.Context) GetMonitoringRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitoringRegionsRegionOutput)
}

// GetMonitoringRegionsRegionArrayInput is an input type that accepts GetMonitoringRegionsRegionArray and GetMonitoringRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetMonitoringRegionsRegionArrayInput` via:
//
//	GetMonitoringRegionsRegionArray{ GetMonitoringRegionsRegionArgs{...} }
type GetMonitoringRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetMonitoringRegionsRegionArrayOutput() GetMonitoringRegionsRegionArrayOutput
	ToGetMonitoringRegionsRegionArrayOutputWithContext(context.Context) GetMonitoringRegionsRegionArrayOutput
}

type GetMonitoringRegionsRegionArray []GetMonitoringRegionsRegionInput

func (GetMonitoringRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitoringRegionsRegion)(nil)).Elem()
}

func (i GetMonitoringRegionsRegionArray) ToGetMonitoringRegionsRegionArrayOutput() GetMonitoringRegionsRegionArrayOutput {
	return i.ToGetMonitoringRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetMonitoringRegionsRegionArray) ToGetMonitoringRegionsRegionArrayOutputWithContext(ctx context.Context) GetMonitoringRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitoringRegionsRegionArrayOutput)
}

type GetMonitoringRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetMonitoringRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitoringRegionsRegion)(nil)).Elem()
}

func (o GetMonitoringRegionsRegionOutput) ToGetMonitoringRegionsRegionOutput() GetMonitoringRegionsRegionOutput {
	return o
}

func (o GetMonitoringRegionsRegionOutput) ToGetMonitoringRegionsRegionOutputWithContext(ctx context.Context) GetMonitoringRegionsRegionOutput {
	return o
}

// 3-letter city code identifying the location of the monitor.
func (o GetMonitoringRegionsRegionOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitoringRegionsRegion) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// City name identifying the location of the monitor.
func (o GetMonitoringRegionsRegionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitoringRegionsRegion) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of IPv4 and IPv6 subnets the monitor sources requests from.
func (o GetMonitoringRegionsRegionOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMonitoringRegionsRegion) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type GetMonitoringRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetMonitoringRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitoringRegionsRegion)(nil)).Elem()
}

func (o GetMonitoringRegionsRegionArrayOutput) ToGetMonitoringRegionsRegionArrayOutput() GetMonitoringRegionsRegionArrayOutput {
	return o
}

func (o GetMonitoringRegionsRegionArrayOutput) ToGetMonitoringRegionsRegionArrayOutputWithContext(ctx context.Context) GetMonitoringRegionsRegionArrayOutput {
	return o
}

func (o GetMonitoringRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetMonitoringRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitoringRegionsRegion {
		return vs[0].([]GetMonitoringRegionsRegion)[vs[1].(int)]
	}).(GetMonitoringRegionsRegionOutput)
}

type GetNetworksNetwork struct {
	// Label associated with the network.
	Label string `pulumi:"label"`
	// Name of the network.
	Name string `pulumi:"name"`
	// network ID (`int`). Default is network 0, the primary NS1 Managed DNS Network.
	NetworkId int `pulumi:"networkId"`
}

// GetNetworksNetworkInput is an input type that accepts GetNetworksNetworkArgs and GetNetworksNetworkOutput values.
// You can construct a concrete instance of `GetNetworksNetworkInput` via:
//
//	GetNetworksNetworkArgs{...}
type GetNetworksNetworkInput interface {
	pulumi.Input

	ToGetNetworksNetworkOutput() GetNetworksNetworkOutput
	ToGetNetworksNetworkOutputWithContext(context.Context) GetNetworksNetworkOutput
}

type GetNetworksNetworkArgs struct {
	// Label associated with the network.
	Label pulumi.StringInput `pulumi:"label"`
	// Name of the network.
	Name pulumi.StringInput `pulumi:"name"`
	// network ID (`int`). Default is network 0, the primary NS1 Managed DNS Network.
	NetworkId pulumi.IntInput `pulumi:"networkId"`
}

func (GetNetworksNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworksNetwork)(nil)).Elem()
}

func (i GetNetworksNetworkArgs) ToGetNetworksNetworkOutput() GetNetworksNetworkOutput {
	return i.ToGetNetworksNetworkOutputWithContext(context.Background())
}

func (i GetNetworksNetworkArgs) ToGetNetworksNetworkOutputWithContext(ctx context.Context) GetNetworksNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworksNetworkOutput)
}

// GetNetworksNetworkArrayInput is an input type that accepts GetNetworksNetworkArray and GetNetworksNetworkArrayOutput values.
// You can construct a concrete instance of `GetNetworksNetworkArrayInput` via:
//
//	GetNetworksNetworkArray{ GetNetworksNetworkArgs{...} }
type GetNetworksNetworkArrayInput interface {
	pulumi.Input

	ToGetNetworksNetworkArrayOutput() GetNetworksNetworkArrayOutput
	ToGetNetworksNetworkArrayOutputWithContext(context.Context) GetNetworksNetworkArrayOutput
}

type GetNetworksNetworkArray []GetNetworksNetworkInput

func (GetNetworksNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworksNetwork)(nil)).Elem()
}

func (i GetNetworksNetworkArray) ToGetNetworksNetworkArrayOutput() GetNetworksNetworkArrayOutput {
	return i.ToGetNetworksNetworkArrayOutputWithContext(context.Background())
}

func (i GetNetworksNetworkArray) ToGetNetworksNetworkArrayOutputWithContext(ctx context.Context) GetNetworksNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworksNetworkArrayOutput)
}

type GetNetworksNetworkOutput struct{ *pulumi.OutputState }

func (GetNetworksNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworksNetwork)(nil)).Elem()
}

func (o GetNetworksNetworkOutput) ToGetNetworksNetworkOutput() GetNetworksNetworkOutput {
	return o
}

func (o GetNetworksNetworkOutput) ToGetNetworksNetworkOutputWithContext(ctx context.Context) GetNetworksNetworkOutput {
	return o
}

// Label associated with the network.
func (o GetNetworksNetworkOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksNetwork) string { return v.Label }).(pulumi.StringOutput)
}

// Name of the network.
func (o GetNetworksNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksNetwork) string { return v.Name }).(pulumi.StringOutput)
}

// network ID (`int`). Default is network 0, the primary NS1 Managed DNS Network.
func (o GetNetworksNetworkOutput) NetworkId() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworksNetwork) int { return v.NetworkId }).(pulumi.IntOutput)
}

type GetNetworksNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetNetworksNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworksNetwork)(nil)).Elem()
}

func (o GetNetworksNetworkArrayOutput) ToGetNetworksNetworkArrayOutput() GetNetworksNetworkArrayOutput {
	return o
}

func (o GetNetworksNetworkArrayOutput) ToGetNetworksNetworkArrayOutputWithContext(ctx context.Context) GetNetworksNetworkArrayOutput {
	return o
}

func (o GetNetworksNetworkArrayOutput) Index(i pulumi.IntInput) GetNetworksNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworksNetwork {
		return vs[0].([]GetNetworksNetwork)[vs[1].(int)]
	}).(GetNetworksNetworkOutput)
}

type GetRecordAnswer struct {
	Answer string `pulumi:"answer"`
	// Map of metadata
	Meta   map[string]string `pulumi:"meta"`
	Region string            `pulumi:"region"`
}

// GetRecordAnswerInput is an input type that accepts GetRecordAnswerArgs and GetRecordAnswerOutput values.
// You can construct a concrete instance of `GetRecordAnswerInput` via:
//
//	GetRecordAnswerArgs{...}
type GetRecordAnswerInput interface {
	pulumi.Input

	ToGetRecordAnswerOutput() GetRecordAnswerOutput
	ToGetRecordAnswerOutputWithContext(context.Context) GetRecordAnswerOutput
}

type GetRecordAnswerArgs struct {
	Answer pulumi.StringInput `pulumi:"answer"`
	// Map of metadata
	Meta   pulumi.StringMapInput `pulumi:"meta"`
	Region pulumi.StringInput    `pulumi:"region"`
}

func (GetRecordAnswerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordAnswer)(nil)).Elem()
}

func (i GetRecordAnswerArgs) ToGetRecordAnswerOutput() GetRecordAnswerOutput {
	return i.ToGetRecordAnswerOutputWithContext(context.Background())
}

func (i GetRecordAnswerArgs) ToGetRecordAnswerOutputWithContext(ctx context.Context) GetRecordAnswerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordAnswerOutput)
}

// GetRecordAnswerArrayInput is an input type that accepts GetRecordAnswerArray and GetRecordAnswerArrayOutput values.
// You can construct a concrete instance of `GetRecordAnswerArrayInput` via:
//
//	GetRecordAnswerArray{ GetRecordAnswerArgs{...} }
type GetRecordAnswerArrayInput interface {
	pulumi.Input

	ToGetRecordAnswerArrayOutput() GetRecordAnswerArrayOutput
	ToGetRecordAnswerArrayOutputWithContext(context.Context) GetRecordAnswerArrayOutput
}

type GetRecordAnswerArray []GetRecordAnswerInput

func (GetRecordAnswerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordAnswer)(nil)).Elem()
}

func (i GetRecordAnswerArray) ToGetRecordAnswerArrayOutput() GetRecordAnswerArrayOutput {
	return i.ToGetRecordAnswerArrayOutputWithContext(context.Background())
}

func (i GetRecordAnswerArray) ToGetRecordAnswerArrayOutputWithContext(ctx context.Context) GetRecordAnswerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordAnswerArrayOutput)
}

type GetRecordAnswerOutput struct{ *pulumi.OutputState }

func (GetRecordAnswerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordAnswer)(nil)).Elem()
}

func (o GetRecordAnswerOutput) ToGetRecordAnswerOutput() GetRecordAnswerOutput {
	return o
}

func (o GetRecordAnswerOutput) ToGetRecordAnswerOutputWithContext(ctx context.Context) GetRecordAnswerOutput {
	return o
}

func (o GetRecordAnswerOutput) Answer() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordAnswer) string { return v.Answer }).(pulumi.StringOutput)
}

// Map of metadata
func (o GetRecordAnswerOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetRecordAnswer) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

func (o GetRecordAnswerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordAnswer) string { return v.Region }).(pulumi.StringOutput)
}

type GetRecordAnswerArrayOutput struct{ *pulumi.OutputState }

func (GetRecordAnswerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordAnswer)(nil)).Elem()
}

func (o GetRecordAnswerArrayOutput) ToGetRecordAnswerArrayOutput() GetRecordAnswerArrayOutput {
	return o
}

func (o GetRecordAnswerArrayOutput) ToGetRecordAnswerArrayOutputWithContext(ctx context.Context) GetRecordAnswerArrayOutput {
	return o
}

func (o GetRecordAnswerArrayOutput) Index(i pulumi.IntInput) GetRecordAnswerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordAnswer {
		return vs[0].([]GetRecordAnswer)[vs[1].(int)]
	}).(GetRecordAnswerOutput)
}

type GetRecordFilter struct {
	Config   map[string]string `pulumi:"config"`
	Disabled bool              `pulumi:"disabled"`
	Filter   string            `pulumi:"filter"`
}

// GetRecordFilterInput is an input type that accepts GetRecordFilterArgs and GetRecordFilterOutput values.
// You can construct a concrete instance of `GetRecordFilterInput` via:
//
//	GetRecordFilterArgs{...}
type GetRecordFilterInput interface {
	pulumi.Input

	ToGetRecordFilterOutput() GetRecordFilterOutput
	ToGetRecordFilterOutputWithContext(context.Context) GetRecordFilterOutput
}

type GetRecordFilterArgs struct {
	Config   pulumi.StringMapInput `pulumi:"config"`
	Disabled pulumi.BoolInput      `pulumi:"disabled"`
	Filter   pulumi.StringInput    `pulumi:"filter"`
}

func (GetRecordFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordFilter)(nil)).Elem()
}

func (i GetRecordFilterArgs) ToGetRecordFilterOutput() GetRecordFilterOutput {
	return i.ToGetRecordFilterOutputWithContext(context.Background())
}

func (i GetRecordFilterArgs) ToGetRecordFilterOutputWithContext(ctx context.Context) GetRecordFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordFilterOutput)
}

// GetRecordFilterArrayInput is an input type that accepts GetRecordFilterArray and GetRecordFilterArrayOutput values.
// You can construct a concrete instance of `GetRecordFilterArrayInput` via:
//
//	GetRecordFilterArray{ GetRecordFilterArgs{...} }
type GetRecordFilterArrayInput interface {
	pulumi.Input

	ToGetRecordFilterArrayOutput() GetRecordFilterArrayOutput
	ToGetRecordFilterArrayOutputWithContext(context.Context) GetRecordFilterArrayOutput
}

type GetRecordFilterArray []GetRecordFilterInput

func (GetRecordFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordFilter)(nil)).Elem()
}

func (i GetRecordFilterArray) ToGetRecordFilterArrayOutput() GetRecordFilterArrayOutput {
	return i.ToGetRecordFilterArrayOutputWithContext(context.Background())
}

func (i GetRecordFilterArray) ToGetRecordFilterArrayOutputWithContext(ctx context.Context) GetRecordFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordFilterArrayOutput)
}

type GetRecordFilterOutput struct{ *pulumi.OutputState }

func (GetRecordFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordFilter)(nil)).Elem()
}

func (o GetRecordFilterOutput) ToGetRecordFilterOutput() GetRecordFilterOutput {
	return o
}

func (o GetRecordFilterOutput) ToGetRecordFilterOutputWithContext(ctx context.Context) GetRecordFilterOutput {
	return o
}

func (o GetRecordFilterOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetRecordFilter) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

func (o GetRecordFilterOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRecordFilter) bool { return v.Disabled }).(pulumi.BoolOutput)
}

func (o GetRecordFilterOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordFilter) string { return v.Filter }).(pulumi.StringOutput)
}

type GetRecordFilterArrayOutput struct{ *pulumi.OutputState }

func (GetRecordFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordFilter)(nil)).Elem()
}

func (o GetRecordFilterArrayOutput) ToGetRecordFilterArrayOutput() GetRecordFilterArrayOutput {
	return o
}

func (o GetRecordFilterArrayOutput) ToGetRecordFilterArrayOutputWithContext(ctx context.Context) GetRecordFilterArrayOutput {
	return o
}

func (o GetRecordFilterArrayOutput) Index(i pulumi.IntInput) GetRecordFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordFilter {
		return vs[0].([]GetRecordFilter)[vs[1].(int)]
	}).(GetRecordFilterOutput)
}

type GetRecordRegion struct {
	// Map of metadata
	Meta map[string]string `pulumi:"meta"`
	Name string            `pulumi:"name"`
}

// GetRecordRegionInput is an input type that accepts GetRecordRegionArgs and GetRecordRegionOutput values.
// You can construct a concrete instance of `GetRecordRegionInput` via:
//
//	GetRecordRegionArgs{...}
type GetRecordRegionInput interface {
	pulumi.Input

	ToGetRecordRegionOutput() GetRecordRegionOutput
	ToGetRecordRegionOutputWithContext(context.Context) GetRecordRegionOutput
}

type GetRecordRegionArgs struct {
	// Map of metadata
	Meta pulumi.StringMapInput `pulumi:"meta"`
	Name pulumi.StringInput    `pulumi:"name"`
}

func (GetRecordRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordRegion)(nil)).Elem()
}

func (i GetRecordRegionArgs) ToGetRecordRegionOutput() GetRecordRegionOutput {
	return i.ToGetRecordRegionOutputWithContext(context.Background())
}

func (i GetRecordRegionArgs) ToGetRecordRegionOutputWithContext(ctx context.Context) GetRecordRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordRegionOutput)
}

// GetRecordRegionArrayInput is an input type that accepts GetRecordRegionArray and GetRecordRegionArrayOutput values.
// You can construct a concrete instance of `GetRecordRegionArrayInput` via:
//
//	GetRecordRegionArray{ GetRecordRegionArgs{...} }
type GetRecordRegionArrayInput interface {
	pulumi.Input

	ToGetRecordRegionArrayOutput() GetRecordRegionArrayOutput
	ToGetRecordRegionArrayOutputWithContext(context.Context) GetRecordRegionArrayOutput
}

type GetRecordRegionArray []GetRecordRegionInput

func (GetRecordRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordRegion)(nil)).Elem()
}

func (i GetRecordRegionArray) ToGetRecordRegionArrayOutput() GetRecordRegionArrayOutput {
	return i.ToGetRecordRegionArrayOutputWithContext(context.Background())
}

func (i GetRecordRegionArray) ToGetRecordRegionArrayOutputWithContext(ctx context.Context) GetRecordRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordRegionArrayOutput)
}

type GetRecordRegionOutput struct{ *pulumi.OutputState }

func (GetRecordRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordRegion)(nil)).Elem()
}

func (o GetRecordRegionOutput) ToGetRecordRegionOutput() GetRecordRegionOutput {
	return o
}

func (o GetRecordRegionOutput) ToGetRecordRegionOutputWithContext(ctx context.Context) GetRecordRegionOutput {
	return o
}

// Map of metadata
func (o GetRecordRegionOutput) Meta() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetRecordRegion) map[string]string { return v.Meta }).(pulumi.StringMapOutput)
}

func (o GetRecordRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordRegion) string { return v.Name }).(pulumi.StringOutput)
}

type GetRecordRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRecordRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordRegion)(nil)).Elem()
}

func (o GetRecordRegionArrayOutput) ToGetRecordRegionArrayOutput() GetRecordRegionArrayOutput {
	return o
}

func (o GetRecordRegionArrayOutput) ToGetRecordRegionArrayOutputWithContext(ctx context.Context) GetRecordRegionArrayOutput {
	return o
}

func (o GetRecordRegionArrayOutput) Index(i pulumi.IntInput) GetRecordRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordRegion {
		return vs[0].([]GetRecordRegion)[vs[1].(int)]
	}).(GetRecordRegionOutput)
}

type GetZoneSecondary struct {
	// IPv4 address of the secondary server.
	Ip string `pulumi:"ip"`
	// List of network IDs (`int`) for which the zone should be made
	// available. Default is network 0, the primary NSONE Global Network.
	Networks []int `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify bool `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port int `pulumi:"port"`
}

// GetZoneSecondaryInput is an input type that accepts GetZoneSecondaryArgs and GetZoneSecondaryOutput values.
// You can construct a concrete instance of `GetZoneSecondaryInput` via:
//
//	GetZoneSecondaryArgs{...}
type GetZoneSecondaryInput interface {
	pulumi.Input

	ToGetZoneSecondaryOutput() GetZoneSecondaryOutput
	ToGetZoneSecondaryOutputWithContext(context.Context) GetZoneSecondaryOutput
}

type GetZoneSecondaryArgs struct {
	// IPv4 address of the secondary server.
	Ip pulumi.StringInput `pulumi:"ip"`
	// List of network IDs (`int`) for which the zone should be made
	// available. Default is network 0, the primary NSONE Global Network.
	Networks pulumi.IntArrayInput `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify pulumi.BoolInput `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetZoneSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZoneSecondary)(nil)).Elem()
}

func (i GetZoneSecondaryArgs) ToGetZoneSecondaryOutput() GetZoneSecondaryOutput {
	return i.ToGetZoneSecondaryOutputWithContext(context.Background())
}

func (i GetZoneSecondaryArgs) ToGetZoneSecondaryOutputWithContext(ctx context.Context) GetZoneSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZoneSecondaryOutput)
}

// GetZoneSecondaryArrayInput is an input type that accepts GetZoneSecondaryArray and GetZoneSecondaryArrayOutput values.
// You can construct a concrete instance of `GetZoneSecondaryArrayInput` via:
//
//	GetZoneSecondaryArray{ GetZoneSecondaryArgs{...} }
type GetZoneSecondaryArrayInput interface {
	pulumi.Input

	ToGetZoneSecondaryArrayOutput() GetZoneSecondaryArrayOutput
	ToGetZoneSecondaryArrayOutputWithContext(context.Context) GetZoneSecondaryArrayOutput
}

type GetZoneSecondaryArray []GetZoneSecondaryInput

func (GetZoneSecondaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZoneSecondary)(nil)).Elem()
}

func (i GetZoneSecondaryArray) ToGetZoneSecondaryArrayOutput() GetZoneSecondaryArrayOutput {
	return i.ToGetZoneSecondaryArrayOutputWithContext(context.Background())
}

func (i GetZoneSecondaryArray) ToGetZoneSecondaryArrayOutputWithContext(ctx context.Context) GetZoneSecondaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZoneSecondaryArrayOutput)
}

type GetZoneSecondaryOutput struct{ *pulumi.OutputState }

func (GetZoneSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZoneSecondary)(nil)).Elem()
}

func (o GetZoneSecondaryOutput) ToGetZoneSecondaryOutput() GetZoneSecondaryOutput {
	return o
}

func (o GetZoneSecondaryOutput) ToGetZoneSecondaryOutputWithContext(ctx context.Context) GetZoneSecondaryOutput {
	return o
}

// IPv4 address of the secondary server.
func (o GetZoneSecondaryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetZoneSecondary) string { return v.Ip }).(pulumi.StringOutput)
}

// List of network IDs (`int`) for which the zone should be made
// available. Default is network 0, the primary NSONE Global Network.
func (o GetZoneSecondaryOutput) Networks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetZoneSecondary) []int { return v.Networks }).(pulumi.IntArrayOutput)
}

// Whether we send `NOTIFY` messages to the secondary host
// when the zone changes. Default `false`.
func (o GetZoneSecondaryOutput) Notify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetZoneSecondary) bool { return v.Notify }).(pulumi.BoolOutput)
}

// Port of the the secondary server. Default `53`.
func (o GetZoneSecondaryOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetZoneSecondary) int { return v.Port }).(pulumi.IntOutput)
}

type GetZoneSecondaryArrayOutput struct{ *pulumi.OutputState }

func (GetZoneSecondaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZoneSecondary)(nil)).Elem()
}

func (o GetZoneSecondaryArrayOutput) ToGetZoneSecondaryArrayOutput() GetZoneSecondaryArrayOutput {
	return o
}

func (o GetZoneSecondaryArrayOutput) ToGetZoneSecondaryArrayOutputWithContext(ctx context.Context) GetZoneSecondaryArrayOutput {
	return o
}

func (o GetZoneSecondaryArrayOutput) Index(i pulumi.IntInput) GetZoneSecondaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZoneSecondary {
		return vs[0].([]GetZoneSecondary)[vs[1].(int)]
	}).(GetZoneSecondaryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*APIKeyDnsRecordsAllowInput)(nil)).Elem(), APIKeyDnsRecordsAllowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*APIKeyDnsRecordsAllowArrayInput)(nil)).Elem(), APIKeyDnsRecordsAllowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*APIKeyDnsRecordsDenyInput)(nil)).Elem(), APIKeyDnsRecordsDenyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*APIKeyDnsRecordsDenyArrayInput)(nil)).Elem(), APIKeyDnsRecordsDenyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDefaultConfigInput)(nil)).Elem(), ApplicationDefaultConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDefaultConfigPtrInput)(nil)).Elem(), ApplicationDefaultConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetDatatypeInput)(nil)).Elem(), DatasetDatatypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetDatatypePtrInput)(nil)).Elem(), DatasetDatatypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetRepeatInput)(nil)).Elem(), DatasetRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetRepeatPtrInput)(nil)).Elem(), DatasetRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetReportInput)(nil)).Elem(), DatasetReportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetReportArrayInput)(nil)).Elem(), DatasetReportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetTimeframeInput)(nil)).Elem(), DatasetTimeframeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetTimeframePtrInput)(nil)).Elem(), DatasetTimeframeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringJobRuleInput)(nil)).Elem(), MonitoringJobRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringJobRuleArrayInput)(nil)).Elem(), MonitoringJobRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyListNotificationInput)(nil)).Elem(), NotifyListNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyListNotificationArrayInput)(nil)).Elem(), NotifyListNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PulsarJobBlendMetricWeightsInput)(nil)).Elem(), PulsarJobBlendMetricWeightsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PulsarJobBlendMetricWeightsPtrInput)(nil)).Elem(), PulsarJobBlendMetricWeightsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PulsarJobConfigInput)(nil)).Elem(), PulsarJobConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PulsarJobConfigPtrInput)(nil)).Elem(), PulsarJobConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PulsarJobWeightInput)(nil)).Elem(), PulsarJobWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PulsarJobWeightArrayInput)(nil)).Elem(), PulsarJobWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordAnswerInput)(nil)).Elem(), RecordAnswerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordAnswerArrayInput)(nil)).Elem(), RecordAnswerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordFilterInput)(nil)).Elem(), RecordFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordFilterArrayInput)(nil)).Elem(), RecordFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordRegionInput)(nil)).Elem(), RecordRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordRegionArrayInput)(nil)).Elem(), RecordRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamDnsRecordsAllowInput)(nil)).Elem(), TeamDnsRecordsAllowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamDnsRecordsAllowArrayInput)(nil)).Elem(), TeamDnsRecordsAllowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamDnsRecordsDenyInput)(nil)).Elem(), TeamDnsRecordsDenyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamDnsRecordsDenyArrayInput)(nil)).Elem(), TeamDnsRecordsDenyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamIpWhitelistInput)(nil)).Elem(), TeamIpWhitelistArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamIpWhitelistArrayInput)(nil)).Elem(), TeamIpWhitelistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDnsRecordsAllowInput)(nil)).Elem(), UserDnsRecordsAllowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDnsRecordsAllowArrayInput)(nil)).Elem(), UserDnsRecordsAllowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDnsRecordsDenyInput)(nil)).Elem(), UserDnsRecordsDenyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDnsRecordsDenyArrayInput)(nil)).Elem(), UserDnsRecordsDenyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSecondaryInput)(nil)).Elem(), ZoneSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSecondaryArrayInput)(nil)).Elem(), ZoneSecondaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBillingUsageByNetworkInput)(nil)).Elem(), GetBillingUsageByNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBillingUsageByNetworkArrayInput)(nil)).Elem(), GetBillingUsageByNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBillingUsageByNetworkDailyInput)(nil)).Elem(), GetBillingUsageByNetworkDailyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBillingUsageByNetworkDailyArrayInput)(nil)).Elem(), GetBillingUsageByNetworkDailyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecDelegationInput)(nil)).Elem(), GetDNSSecDelegationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecDelegationArrayInput)(nil)).Elem(), GetDNSSecDelegationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecDelegationDInput)(nil)).Elem(), GetDNSSecDelegationDArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecDelegationDArrayInput)(nil)).Elem(), GetDNSSecDelegationDArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecDelegationDnskeyInput)(nil)).Elem(), GetDNSSecDelegationDnskeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecDelegationDnskeyArrayInput)(nil)).Elem(), GetDNSSecDelegationDnskeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecKeyInput)(nil)).Elem(), GetDNSSecKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecKeyArrayInput)(nil)).Elem(), GetDNSSecKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecKeyDnskeyInput)(nil)).Elem(), GetDNSSecKeyDnskeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDNSSecKeyDnskeyArrayInput)(nil)).Elem(), GetDNSSecKeyDnskeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitoringRegionsRegionInput)(nil)).Elem(), GetMonitoringRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitoringRegionsRegionArrayInput)(nil)).Elem(), GetMonitoringRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworksNetworkInput)(nil)).Elem(), GetNetworksNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworksNetworkArrayInput)(nil)).Elem(), GetNetworksNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordAnswerInput)(nil)).Elem(), GetRecordAnswerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordAnswerArrayInput)(nil)).Elem(), GetRecordAnswerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordFilterInput)(nil)).Elem(), GetRecordFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordFilterArrayInput)(nil)).Elem(), GetRecordFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordRegionInput)(nil)).Elem(), GetRecordRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordRegionArrayInput)(nil)).Elem(), GetRecordRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZoneSecondaryInput)(nil)).Elem(), GetZoneSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZoneSecondaryArrayInput)(nil)).Elem(), GetZoneSecondaryArray{})
	pulumi.RegisterOutputType(APIKeyDnsRecordsAllowOutput{})
	pulumi.RegisterOutputType(APIKeyDnsRecordsAllowArrayOutput{})
	pulumi.RegisterOutputType(APIKeyDnsRecordsDenyOutput{})
	pulumi.RegisterOutputType(APIKeyDnsRecordsDenyArrayOutput{})
	pulumi.RegisterOutputType(ApplicationDefaultConfigOutput{})
	pulumi.RegisterOutputType(ApplicationDefaultConfigPtrOutput{})
	pulumi.RegisterOutputType(DatasetDatatypeOutput{})
	pulumi.RegisterOutputType(DatasetDatatypePtrOutput{})
	pulumi.RegisterOutputType(DatasetRepeatOutput{})
	pulumi.RegisterOutputType(DatasetRepeatPtrOutput{})
	pulumi.RegisterOutputType(DatasetReportOutput{})
	pulumi.RegisterOutputType(DatasetReportArrayOutput{})
	pulumi.RegisterOutputType(DatasetTimeframeOutput{})
	pulumi.RegisterOutputType(DatasetTimeframePtrOutput{})
	pulumi.RegisterOutputType(MonitoringJobRuleOutput{})
	pulumi.RegisterOutputType(MonitoringJobRuleArrayOutput{})
	pulumi.RegisterOutputType(NotifyListNotificationOutput{})
	pulumi.RegisterOutputType(NotifyListNotificationArrayOutput{})
	pulumi.RegisterOutputType(PulsarJobBlendMetricWeightsOutput{})
	pulumi.RegisterOutputType(PulsarJobBlendMetricWeightsPtrOutput{})
	pulumi.RegisterOutputType(PulsarJobConfigOutput{})
	pulumi.RegisterOutputType(PulsarJobConfigPtrOutput{})
	pulumi.RegisterOutputType(PulsarJobWeightOutput{})
	pulumi.RegisterOutputType(PulsarJobWeightArrayOutput{})
	pulumi.RegisterOutputType(RecordAnswerOutput{})
	pulumi.RegisterOutputType(RecordAnswerArrayOutput{})
	pulumi.RegisterOutputType(RecordFilterOutput{})
	pulumi.RegisterOutputType(RecordFilterArrayOutput{})
	pulumi.RegisterOutputType(RecordRegionOutput{})
	pulumi.RegisterOutputType(RecordRegionArrayOutput{})
	pulumi.RegisterOutputType(TeamDnsRecordsAllowOutput{})
	pulumi.RegisterOutputType(TeamDnsRecordsAllowArrayOutput{})
	pulumi.RegisterOutputType(TeamDnsRecordsDenyOutput{})
	pulumi.RegisterOutputType(TeamDnsRecordsDenyArrayOutput{})
	pulumi.RegisterOutputType(TeamIpWhitelistOutput{})
	pulumi.RegisterOutputType(TeamIpWhitelistArrayOutput{})
	pulumi.RegisterOutputType(UserDnsRecordsAllowOutput{})
	pulumi.RegisterOutputType(UserDnsRecordsAllowArrayOutput{})
	pulumi.RegisterOutputType(UserDnsRecordsDenyOutput{})
	pulumi.RegisterOutputType(UserDnsRecordsDenyArrayOutput{})
	pulumi.RegisterOutputType(ZoneSecondaryOutput{})
	pulumi.RegisterOutputType(ZoneSecondaryArrayOutput{})
	pulumi.RegisterOutputType(GetBillingUsageByNetworkOutput{})
	pulumi.RegisterOutputType(GetBillingUsageByNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetBillingUsageByNetworkDailyOutput{})
	pulumi.RegisterOutputType(GetBillingUsageByNetworkDailyArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDnskeyOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDnskeyArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeyOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeyArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeyDnskeyOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeyDnskeyArrayOutput{})
	pulumi.RegisterOutputType(GetMonitoringRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetMonitoringRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetNetworksNetworkOutput{})
	pulumi.RegisterOutputType(GetNetworksNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetRecordAnswerOutput{})
	pulumi.RegisterOutputType(GetRecordAnswerArrayOutput{})
	pulumi.RegisterOutputType(GetRecordFilterOutput{})
	pulumi.RegisterOutputType(GetRecordFilterArrayOutput{})
	pulumi.RegisterOutputType(GetRecordRegionOutput{})
	pulumi.RegisterOutputType(GetRecordRegionArrayOutput{})
	pulumi.RegisterOutputType(GetZoneSecondaryOutput{})
	pulumi.RegisterOutputType(GetZoneSecondaryArrayOutput{})
}
