// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type APIKeyDnsRecordsAllow struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// APIKeyDnsRecordsAllowInput is an input type that accepts APIKeyDnsRecordsAllowArgs and APIKeyDnsRecordsAllowOutput values.
// You can construct a concrete instance of `APIKeyDnsRecordsAllowInput` via:
//
//          APIKeyDnsRecordsAllowArgs{...}
type APIKeyDnsRecordsAllowInput interface {
	pulumi.Input

	ToAPIKeyDnsRecordsAllowOutput() APIKeyDnsRecordsAllowOutput
	ToAPIKeyDnsRecordsAllowOutputWithContext(context.Context) APIKeyDnsRecordsAllowOutput
}

type APIKeyDnsRecordsAllowArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (APIKeyDnsRecordsAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*APIKeyDnsRecordsAllow)(nil)).Elem()
}

func (i APIKeyDnsRecordsAllowArgs) ToAPIKeyDnsRecordsAllowOutput() APIKeyDnsRecordsAllowOutput {
	return i.ToAPIKeyDnsRecordsAllowOutputWithContext(context.Background())
}

func (i APIKeyDnsRecordsAllowArgs) ToAPIKeyDnsRecordsAllowOutputWithContext(ctx context.Context) APIKeyDnsRecordsAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIKeyDnsRecordsAllowOutput)
}

// APIKeyDnsRecordsAllowArrayInput is an input type that accepts APIKeyDnsRecordsAllowArray and APIKeyDnsRecordsAllowArrayOutput values.
// You can construct a concrete instance of `APIKeyDnsRecordsAllowArrayInput` via:
//
//          APIKeyDnsRecordsAllowArray{ APIKeyDnsRecordsAllowArgs{...} }
type APIKeyDnsRecordsAllowArrayInput interface {
	pulumi.Input

	ToAPIKeyDnsRecordsAllowArrayOutput() APIKeyDnsRecordsAllowArrayOutput
	ToAPIKeyDnsRecordsAllowArrayOutputWithContext(context.Context) APIKeyDnsRecordsAllowArrayOutput
}

type APIKeyDnsRecordsAllowArray []APIKeyDnsRecordsAllowInput

func (APIKeyDnsRecordsAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]APIKeyDnsRecordsAllow)(nil)).Elem()
}

func (i APIKeyDnsRecordsAllowArray) ToAPIKeyDnsRecordsAllowArrayOutput() APIKeyDnsRecordsAllowArrayOutput {
	return i.ToAPIKeyDnsRecordsAllowArrayOutputWithContext(context.Background())
}

func (i APIKeyDnsRecordsAllowArray) ToAPIKeyDnsRecordsAllowArrayOutputWithContext(ctx context.Context) APIKeyDnsRecordsAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIKeyDnsRecordsAllowArrayOutput)
}

type APIKeyDnsRecordsAllowOutput struct{ *pulumi.OutputState }

func (APIKeyDnsRecordsAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*APIKeyDnsRecordsAllow)(nil)).Elem()
}

func (o APIKeyDnsRecordsAllowOutput) ToAPIKeyDnsRecordsAllowOutput() APIKeyDnsRecordsAllowOutput {
	return o
}

func (o APIKeyDnsRecordsAllowOutput) ToAPIKeyDnsRecordsAllowOutputWithContext(ctx context.Context) APIKeyDnsRecordsAllowOutput {
	return o
}

func (o APIKeyDnsRecordsAllowOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsAllow) string { return v.Domain }).(pulumi.StringOutput)
}

func (o APIKeyDnsRecordsAllowOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsAllow) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o APIKeyDnsRecordsAllowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsAllow) string { return v.Type }).(pulumi.StringOutput)
}

func (o APIKeyDnsRecordsAllowOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsAllow) string { return v.Zone }).(pulumi.StringOutput)
}

type APIKeyDnsRecordsAllowArrayOutput struct{ *pulumi.OutputState }

func (APIKeyDnsRecordsAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]APIKeyDnsRecordsAllow)(nil)).Elem()
}

func (o APIKeyDnsRecordsAllowArrayOutput) ToAPIKeyDnsRecordsAllowArrayOutput() APIKeyDnsRecordsAllowArrayOutput {
	return o
}

func (o APIKeyDnsRecordsAllowArrayOutput) ToAPIKeyDnsRecordsAllowArrayOutputWithContext(ctx context.Context) APIKeyDnsRecordsAllowArrayOutput {
	return o
}

func (o APIKeyDnsRecordsAllowArrayOutput) Index(i pulumi.IntInput) APIKeyDnsRecordsAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) APIKeyDnsRecordsAllow {
		return vs[0].([]APIKeyDnsRecordsAllow)[vs[1].(int)]
	}).(APIKeyDnsRecordsAllowOutput)
}

type APIKeyDnsRecordsDeny struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// APIKeyDnsRecordsDenyInput is an input type that accepts APIKeyDnsRecordsDenyArgs and APIKeyDnsRecordsDenyOutput values.
// You can construct a concrete instance of `APIKeyDnsRecordsDenyInput` via:
//
//          APIKeyDnsRecordsDenyArgs{...}
type APIKeyDnsRecordsDenyInput interface {
	pulumi.Input

	ToAPIKeyDnsRecordsDenyOutput() APIKeyDnsRecordsDenyOutput
	ToAPIKeyDnsRecordsDenyOutputWithContext(context.Context) APIKeyDnsRecordsDenyOutput
}

type APIKeyDnsRecordsDenyArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (APIKeyDnsRecordsDenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*APIKeyDnsRecordsDeny)(nil)).Elem()
}

func (i APIKeyDnsRecordsDenyArgs) ToAPIKeyDnsRecordsDenyOutput() APIKeyDnsRecordsDenyOutput {
	return i.ToAPIKeyDnsRecordsDenyOutputWithContext(context.Background())
}

func (i APIKeyDnsRecordsDenyArgs) ToAPIKeyDnsRecordsDenyOutputWithContext(ctx context.Context) APIKeyDnsRecordsDenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIKeyDnsRecordsDenyOutput)
}

// APIKeyDnsRecordsDenyArrayInput is an input type that accepts APIKeyDnsRecordsDenyArray and APIKeyDnsRecordsDenyArrayOutput values.
// You can construct a concrete instance of `APIKeyDnsRecordsDenyArrayInput` via:
//
//          APIKeyDnsRecordsDenyArray{ APIKeyDnsRecordsDenyArgs{...} }
type APIKeyDnsRecordsDenyArrayInput interface {
	pulumi.Input

	ToAPIKeyDnsRecordsDenyArrayOutput() APIKeyDnsRecordsDenyArrayOutput
	ToAPIKeyDnsRecordsDenyArrayOutputWithContext(context.Context) APIKeyDnsRecordsDenyArrayOutput
}

type APIKeyDnsRecordsDenyArray []APIKeyDnsRecordsDenyInput

func (APIKeyDnsRecordsDenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]APIKeyDnsRecordsDeny)(nil)).Elem()
}

func (i APIKeyDnsRecordsDenyArray) ToAPIKeyDnsRecordsDenyArrayOutput() APIKeyDnsRecordsDenyArrayOutput {
	return i.ToAPIKeyDnsRecordsDenyArrayOutputWithContext(context.Background())
}

func (i APIKeyDnsRecordsDenyArray) ToAPIKeyDnsRecordsDenyArrayOutputWithContext(ctx context.Context) APIKeyDnsRecordsDenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIKeyDnsRecordsDenyArrayOutput)
}

type APIKeyDnsRecordsDenyOutput struct{ *pulumi.OutputState }

func (APIKeyDnsRecordsDenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*APIKeyDnsRecordsDeny)(nil)).Elem()
}

func (o APIKeyDnsRecordsDenyOutput) ToAPIKeyDnsRecordsDenyOutput() APIKeyDnsRecordsDenyOutput {
	return o
}

func (o APIKeyDnsRecordsDenyOutput) ToAPIKeyDnsRecordsDenyOutputWithContext(ctx context.Context) APIKeyDnsRecordsDenyOutput {
	return o
}

func (o APIKeyDnsRecordsDenyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsDeny) string { return v.Domain }).(pulumi.StringOutput)
}

func (o APIKeyDnsRecordsDenyOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsDeny) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o APIKeyDnsRecordsDenyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsDeny) string { return v.Type }).(pulumi.StringOutput)
}

func (o APIKeyDnsRecordsDenyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v APIKeyDnsRecordsDeny) string { return v.Zone }).(pulumi.StringOutput)
}

type APIKeyDnsRecordsDenyArrayOutput struct{ *pulumi.OutputState }

func (APIKeyDnsRecordsDenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]APIKeyDnsRecordsDeny)(nil)).Elem()
}

func (o APIKeyDnsRecordsDenyArrayOutput) ToAPIKeyDnsRecordsDenyArrayOutput() APIKeyDnsRecordsDenyArrayOutput {
	return o
}

func (o APIKeyDnsRecordsDenyArrayOutput) ToAPIKeyDnsRecordsDenyArrayOutputWithContext(ctx context.Context) APIKeyDnsRecordsDenyArrayOutput {
	return o
}

func (o APIKeyDnsRecordsDenyArrayOutput) Index(i pulumi.IntInput) APIKeyDnsRecordsDenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) APIKeyDnsRecordsDeny {
		return vs[0].([]APIKeyDnsRecordsDeny)[vs[1].(int)]
	}).(APIKeyDnsRecordsDenyOutput)
}

type MonitoringJobRule struct {
	Comparison string `pulumi:"comparison"`
	Key        string `pulumi:"key"`
	Value      string `pulumi:"value"`
}

// MonitoringJobRuleInput is an input type that accepts MonitoringJobRuleArgs and MonitoringJobRuleOutput values.
// You can construct a concrete instance of `MonitoringJobRuleInput` via:
//
//          MonitoringJobRuleArgs{...}
type MonitoringJobRuleInput interface {
	pulumi.Input

	ToMonitoringJobRuleOutput() MonitoringJobRuleOutput
	ToMonitoringJobRuleOutputWithContext(context.Context) MonitoringJobRuleOutput
}

type MonitoringJobRuleArgs struct {
	Comparison pulumi.StringInput `pulumi:"comparison"`
	Key        pulumi.StringInput `pulumi:"key"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (MonitoringJobRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringJobRule)(nil)).Elem()
}

func (i MonitoringJobRuleArgs) ToMonitoringJobRuleOutput() MonitoringJobRuleOutput {
	return i.ToMonitoringJobRuleOutputWithContext(context.Background())
}

func (i MonitoringJobRuleArgs) ToMonitoringJobRuleOutputWithContext(ctx context.Context) MonitoringJobRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringJobRuleOutput)
}

// MonitoringJobRuleArrayInput is an input type that accepts MonitoringJobRuleArray and MonitoringJobRuleArrayOutput values.
// You can construct a concrete instance of `MonitoringJobRuleArrayInput` via:
//
//          MonitoringJobRuleArray{ MonitoringJobRuleArgs{...} }
type MonitoringJobRuleArrayInput interface {
	pulumi.Input

	ToMonitoringJobRuleArrayOutput() MonitoringJobRuleArrayOutput
	ToMonitoringJobRuleArrayOutputWithContext(context.Context) MonitoringJobRuleArrayOutput
}

type MonitoringJobRuleArray []MonitoringJobRuleInput

func (MonitoringJobRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringJobRule)(nil)).Elem()
}

func (i MonitoringJobRuleArray) ToMonitoringJobRuleArrayOutput() MonitoringJobRuleArrayOutput {
	return i.ToMonitoringJobRuleArrayOutputWithContext(context.Background())
}

func (i MonitoringJobRuleArray) ToMonitoringJobRuleArrayOutputWithContext(ctx context.Context) MonitoringJobRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringJobRuleArrayOutput)
}

type MonitoringJobRuleOutput struct{ *pulumi.OutputState }

func (MonitoringJobRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringJobRule)(nil)).Elem()
}

func (o MonitoringJobRuleOutput) ToMonitoringJobRuleOutput() MonitoringJobRuleOutput {
	return o
}

func (o MonitoringJobRuleOutput) ToMonitoringJobRuleOutputWithContext(ctx context.Context) MonitoringJobRuleOutput {
	return o
}

func (o MonitoringJobRuleOutput) Comparison() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringJobRule) string { return v.Comparison }).(pulumi.StringOutput)
}

func (o MonitoringJobRuleOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringJobRule) string { return v.Key }).(pulumi.StringOutput)
}

func (o MonitoringJobRuleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringJobRule) string { return v.Value }).(pulumi.StringOutput)
}

type MonitoringJobRuleArrayOutput struct{ *pulumi.OutputState }

func (MonitoringJobRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringJobRule)(nil)).Elem()
}

func (o MonitoringJobRuleArrayOutput) ToMonitoringJobRuleArrayOutput() MonitoringJobRuleArrayOutput {
	return o
}

func (o MonitoringJobRuleArrayOutput) ToMonitoringJobRuleArrayOutputWithContext(ctx context.Context) MonitoringJobRuleArrayOutput {
	return o
}

func (o MonitoringJobRuleArrayOutput) Index(i pulumi.IntInput) MonitoringJobRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoringJobRule {
		return vs[0].([]MonitoringJobRule)[vs[1].(int)]
	}).(MonitoringJobRuleOutput)
}

type NotifyListNotification struct {
	// Configuration details for the given notifier type.
	Config map[string]interface{} `pulumi:"config"`
	// The type of notifier. Available notifiers are indicated in /notifytypes endpoint.
	Type string `pulumi:"type"`
}

// NotifyListNotificationInput is an input type that accepts NotifyListNotificationArgs and NotifyListNotificationOutput values.
// You can construct a concrete instance of `NotifyListNotificationInput` via:
//
//          NotifyListNotificationArgs{...}
type NotifyListNotificationInput interface {
	pulumi.Input

	ToNotifyListNotificationOutput() NotifyListNotificationOutput
	ToNotifyListNotificationOutputWithContext(context.Context) NotifyListNotificationOutput
}

type NotifyListNotificationArgs struct {
	// Configuration details for the given notifier type.
	Config pulumi.MapInput `pulumi:"config"`
	// The type of notifier. Available notifiers are indicated in /notifytypes endpoint.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NotifyListNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyListNotification)(nil)).Elem()
}

func (i NotifyListNotificationArgs) ToNotifyListNotificationOutput() NotifyListNotificationOutput {
	return i.ToNotifyListNotificationOutputWithContext(context.Background())
}

func (i NotifyListNotificationArgs) ToNotifyListNotificationOutputWithContext(ctx context.Context) NotifyListNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyListNotificationOutput)
}

// NotifyListNotificationArrayInput is an input type that accepts NotifyListNotificationArray and NotifyListNotificationArrayOutput values.
// You can construct a concrete instance of `NotifyListNotificationArrayInput` via:
//
//          NotifyListNotificationArray{ NotifyListNotificationArgs{...} }
type NotifyListNotificationArrayInput interface {
	pulumi.Input

	ToNotifyListNotificationArrayOutput() NotifyListNotificationArrayOutput
	ToNotifyListNotificationArrayOutputWithContext(context.Context) NotifyListNotificationArrayOutput
}

type NotifyListNotificationArray []NotifyListNotificationInput

func (NotifyListNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotifyListNotification)(nil)).Elem()
}

func (i NotifyListNotificationArray) ToNotifyListNotificationArrayOutput() NotifyListNotificationArrayOutput {
	return i.ToNotifyListNotificationArrayOutputWithContext(context.Background())
}

func (i NotifyListNotificationArray) ToNotifyListNotificationArrayOutputWithContext(ctx context.Context) NotifyListNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyListNotificationArrayOutput)
}

type NotifyListNotificationOutput struct{ *pulumi.OutputState }

func (NotifyListNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyListNotification)(nil)).Elem()
}

func (o NotifyListNotificationOutput) ToNotifyListNotificationOutput() NotifyListNotificationOutput {
	return o
}

func (o NotifyListNotificationOutput) ToNotifyListNotificationOutputWithContext(ctx context.Context) NotifyListNotificationOutput {
	return o
}

// Configuration details for the given notifier type.
func (o NotifyListNotificationOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v NotifyListNotification) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The type of notifier. Available notifiers are indicated in /notifytypes endpoint.
func (o NotifyListNotificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NotifyListNotification) string { return v.Type }).(pulumi.StringOutput)
}

type NotifyListNotificationArrayOutput struct{ *pulumi.OutputState }

func (NotifyListNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotifyListNotification)(nil)).Elem()
}

func (o NotifyListNotificationArrayOutput) ToNotifyListNotificationArrayOutput() NotifyListNotificationArrayOutput {
	return o
}

func (o NotifyListNotificationArrayOutput) ToNotifyListNotificationArrayOutputWithContext(ctx context.Context) NotifyListNotificationArrayOutput {
	return o
}

func (o NotifyListNotificationArrayOutput) Index(i pulumi.IntInput) NotifyListNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotifyListNotification {
		return vs[0].([]NotifyListNotification)[vs[1].(int)]
	}).(NotifyListNotificationOutput)
}

type RecordAnswer struct {
	// Space delimited string of RDATA fields dependent on the record type.
	Answer *string                `pulumi:"answer"`
	Meta   map[string]interface{} `pulumi:"meta"`
	// The region (Answer Group really) that this answer
	// belongs to. This should be one of the names specified in `regions`. Only a
	// single `region` per answer is currently supported. If you want an answer in
	// multiple regions, duplicating the answer (including metadata) is the correct
	// approach.
	// * `  meta ` - (Optional) meta is supported at the `answer` level. Meta
	//   is documented below.
	Region *string `pulumi:"region"`
}

// RecordAnswerInput is an input type that accepts RecordAnswerArgs and RecordAnswerOutput values.
// You can construct a concrete instance of `RecordAnswerInput` via:
//
//          RecordAnswerArgs{...}
type RecordAnswerInput interface {
	pulumi.Input

	ToRecordAnswerOutput() RecordAnswerOutput
	ToRecordAnswerOutputWithContext(context.Context) RecordAnswerOutput
}

type RecordAnswerArgs struct {
	// Space delimited string of RDATA fields dependent on the record type.
	Answer pulumi.StringPtrInput `pulumi:"answer"`
	Meta   pulumi.MapInput       `pulumi:"meta"`
	// The region (Answer Group really) that this answer
	// belongs to. This should be one of the names specified in `regions`. Only a
	// single `region` per answer is currently supported. If you want an answer in
	// multiple regions, duplicating the answer (including metadata) is the correct
	// approach.
	// * `  meta ` - (Optional) meta is supported at the `answer` level. Meta
	//   is documented below.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (RecordAnswerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAnswer)(nil)).Elem()
}

func (i RecordAnswerArgs) ToRecordAnswerOutput() RecordAnswerOutput {
	return i.ToRecordAnswerOutputWithContext(context.Background())
}

func (i RecordAnswerArgs) ToRecordAnswerOutputWithContext(ctx context.Context) RecordAnswerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAnswerOutput)
}

// RecordAnswerArrayInput is an input type that accepts RecordAnswerArray and RecordAnswerArrayOutput values.
// You can construct a concrete instance of `RecordAnswerArrayInput` via:
//
//          RecordAnswerArray{ RecordAnswerArgs{...} }
type RecordAnswerArrayInput interface {
	pulumi.Input

	ToRecordAnswerArrayOutput() RecordAnswerArrayOutput
	ToRecordAnswerArrayOutputWithContext(context.Context) RecordAnswerArrayOutput
}

type RecordAnswerArray []RecordAnswerInput

func (RecordAnswerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAnswer)(nil)).Elem()
}

func (i RecordAnswerArray) ToRecordAnswerArrayOutput() RecordAnswerArrayOutput {
	return i.ToRecordAnswerArrayOutputWithContext(context.Background())
}

func (i RecordAnswerArray) ToRecordAnswerArrayOutputWithContext(ctx context.Context) RecordAnswerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordAnswerArrayOutput)
}

type RecordAnswerOutput struct{ *pulumi.OutputState }

func (RecordAnswerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordAnswer)(nil)).Elem()
}

func (o RecordAnswerOutput) ToRecordAnswerOutput() RecordAnswerOutput {
	return o
}

func (o RecordAnswerOutput) ToRecordAnswerOutputWithContext(ctx context.Context) RecordAnswerOutput {
	return o
}

// Space delimited string of RDATA fields dependent on the record type.
func (o RecordAnswerOutput) Answer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAnswer) *string { return v.Answer }).(pulumi.StringPtrOutput)
}

func (o RecordAnswerOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v RecordAnswer) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

// The region (Answer Group really) that this answer
// belongs to. This should be one of the names specified in `regions`. Only a
// single `region` per answer is currently supported. If you want an answer in
// multiple regions, duplicating the answer (including metadata) is the correct
// approach.
// * `  meta ` - (Optional) meta is supported at the `answer` level. Meta
//   is documented below.
func (o RecordAnswerOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordAnswer) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type RecordAnswerArrayOutput struct{ *pulumi.OutputState }

func (RecordAnswerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordAnswer)(nil)).Elem()
}

func (o RecordAnswerArrayOutput) ToRecordAnswerArrayOutput() RecordAnswerArrayOutput {
	return o
}

func (o RecordAnswerArrayOutput) ToRecordAnswerArrayOutputWithContext(ctx context.Context) RecordAnswerArrayOutput {
	return o
}

func (o RecordAnswerArrayOutput) Index(i pulumi.IntInput) RecordAnswerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordAnswer {
		return vs[0].([]RecordAnswer)[vs[1].(int)]
	}).(RecordAnswerOutput)
}

type RecordFilter struct {
	// The filters' configuration. Simple key/value pairs
	// determined by the filter type.
	Config map[string]interface{} `pulumi:"config"`
	// Determines whether the filter is applied in the
	// filter chain.
	Disabled *bool `pulumi:"disabled"`
	// The type of filter.
	Filter string `pulumi:"filter"`
}

// RecordFilterInput is an input type that accepts RecordFilterArgs and RecordFilterOutput values.
// You can construct a concrete instance of `RecordFilterInput` via:
//
//          RecordFilterArgs{...}
type RecordFilterInput interface {
	pulumi.Input

	ToRecordFilterOutput() RecordFilterOutput
	ToRecordFilterOutputWithContext(context.Context) RecordFilterOutput
}

type RecordFilterArgs struct {
	// The filters' configuration. Simple key/value pairs
	// determined by the filter type.
	Config pulumi.MapInput `pulumi:"config"`
	// Determines whether the filter is applied in the
	// filter chain.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The type of filter.
	Filter pulumi.StringInput `pulumi:"filter"`
}

func (RecordFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFilter)(nil)).Elem()
}

func (i RecordFilterArgs) ToRecordFilterOutput() RecordFilterOutput {
	return i.ToRecordFilterOutputWithContext(context.Background())
}

func (i RecordFilterArgs) ToRecordFilterOutputWithContext(ctx context.Context) RecordFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFilterOutput)
}

// RecordFilterArrayInput is an input type that accepts RecordFilterArray and RecordFilterArrayOutput values.
// You can construct a concrete instance of `RecordFilterArrayInput` via:
//
//          RecordFilterArray{ RecordFilterArgs{...} }
type RecordFilterArrayInput interface {
	pulumi.Input

	ToRecordFilterArrayOutput() RecordFilterArrayOutput
	ToRecordFilterArrayOutputWithContext(context.Context) RecordFilterArrayOutput
}

type RecordFilterArray []RecordFilterInput

func (RecordFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFilter)(nil)).Elem()
}

func (i RecordFilterArray) ToRecordFilterArrayOutput() RecordFilterArrayOutput {
	return i.ToRecordFilterArrayOutputWithContext(context.Background())
}

func (i RecordFilterArray) ToRecordFilterArrayOutputWithContext(ctx context.Context) RecordFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordFilterArrayOutput)
}

type RecordFilterOutput struct{ *pulumi.OutputState }

func (RecordFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordFilter)(nil)).Elem()
}

func (o RecordFilterOutput) ToRecordFilterOutput() RecordFilterOutput {
	return o
}

func (o RecordFilterOutput) ToRecordFilterOutputWithContext(ctx context.Context) RecordFilterOutput {
	return o
}

// The filters' configuration. Simple key/value pairs
// determined by the filter type.
func (o RecordFilterOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v RecordFilter) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// Determines whether the filter is applied in the
// filter chain.
func (o RecordFilterOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RecordFilter) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The type of filter.
func (o RecordFilterOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v RecordFilter) string { return v.Filter }).(pulumi.StringOutput)
}

type RecordFilterArrayOutput struct{ *pulumi.OutputState }

func (RecordFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordFilter)(nil)).Elem()
}

func (o RecordFilterArrayOutput) ToRecordFilterArrayOutput() RecordFilterArrayOutput {
	return o
}

func (o RecordFilterArrayOutput) ToRecordFilterArrayOutputWithContext(ctx context.Context) RecordFilterArrayOutput {
	return o
}

func (o RecordFilterArrayOutput) Index(i pulumi.IntInput) RecordFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordFilter {
		return vs[0].([]RecordFilter)[vs[1].(int)]
	}).(RecordFilterOutput)
}

type RecordRegion struct {
	Meta map[string]interface{} `pulumi:"meta"`
	// Name of the region (or Answer Group).
	Name string `pulumi:"name"`
}

// RecordRegionInput is an input type that accepts RecordRegionArgs and RecordRegionOutput values.
// You can construct a concrete instance of `RecordRegionInput` via:
//
//          RecordRegionArgs{...}
type RecordRegionInput interface {
	pulumi.Input

	ToRecordRegionOutput() RecordRegionOutput
	ToRecordRegionOutputWithContext(context.Context) RecordRegionOutput
}

type RecordRegionArgs struct {
	Meta pulumi.MapInput `pulumi:"meta"`
	// Name of the region (or Answer Group).
	Name pulumi.StringInput `pulumi:"name"`
}

func (RecordRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordRegion)(nil)).Elem()
}

func (i RecordRegionArgs) ToRecordRegionOutput() RecordRegionOutput {
	return i.ToRecordRegionOutputWithContext(context.Background())
}

func (i RecordRegionArgs) ToRecordRegionOutputWithContext(ctx context.Context) RecordRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordRegionOutput)
}

// RecordRegionArrayInput is an input type that accepts RecordRegionArray and RecordRegionArrayOutput values.
// You can construct a concrete instance of `RecordRegionArrayInput` via:
//
//          RecordRegionArray{ RecordRegionArgs{...} }
type RecordRegionArrayInput interface {
	pulumi.Input

	ToRecordRegionArrayOutput() RecordRegionArrayOutput
	ToRecordRegionArrayOutputWithContext(context.Context) RecordRegionArrayOutput
}

type RecordRegionArray []RecordRegionInput

func (RecordRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordRegion)(nil)).Elem()
}

func (i RecordRegionArray) ToRecordRegionArrayOutput() RecordRegionArrayOutput {
	return i.ToRecordRegionArrayOutputWithContext(context.Background())
}

func (i RecordRegionArray) ToRecordRegionArrayOutputWithContext(ctx context.Context) RecordRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordRegionArrayOutput)
}

type RecordRegionOutput struct{ *pulumi.OutputState }

func (RecordRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordRegion)(nil)).Elem()
}

func (o RecordRegionOutput) ToRecordRegionOutput() RecordRegionOutput {
	return o
}

func (o RecordRegionOutput) ToRecordRegionOutputWithContext(ctx context.Context) RecordRegionOutput {
	return o
}

func (o RecordRegionOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v RecordRegion) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

// Name of the region (or Answer Group).
func (o RecordRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RecordRegion) string { return v.Name }).(pulumi.StringOutput)
}

type RecordRegionArrayOutput struct{ *pulumi.OutputState }

func (RecordRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordRegion)(nil)).Elem()
}

func (o RecordRegionArrayOutput) ToRecordRegionArrayOutput() RecordRegionArrayOutput {
	return o
}

func (o RecordRegionArrayOutput) ToRecordRegionArrayOutputWithContext(ctx context.Context) RecordRegionArrayOutput {
	return o
}

func (o RecordRegionArrayOutput) Index(i pulumi.IntInput) RecordRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordRegion {
		return vs[0].([]RecordRegion)[vs[1].(int)]
	}).(RecordRegionOutput)
}

type TeamDnsRecordsAllow struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// TeamDnsRecordsAllowInput is an input type that accepts TeamDnsRecordsAllowArgs and TeamDnsRecordsAllowOutput values.
// You can construct a concrete instance of `TeamDnsRecordsAllowInput` via:
//
//          TeamDnsRecordsAllowArgs{...}
type TeamDnsRecordsAllowInput interface {
	pulumi.Input

	ToTeamDnsRecordsAllowOutput() TeamDnsRecordsAllowOutput
	ToTeamDnsRecordsAllowOutputWithContext(context.Context) TeamDnsRecordsAllowOutput
}

type TeamDnsRecordsAllowArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (TeamDnsRecordsAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDnsRecordsAllow)(nil)).Elem()
}

func (i TeamDnsRecordsAllowArgs) ToTeamDnsRecordsAllowOutput() TeamDnsRecordsAllowOutput {
	return i.ToTeamDnsRecordsAllowOutputWithContext(context.Background())
}

func (i TeamDnsRecordsAllowArgs) ToTeamDnsRecordsAllowOutputWithContext(ctx context.Context) TeamDnsRecordsAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamDnsRecordsAllowOutput)
}

// TeamDnsRecordsAllowArrayInput is an input type that accepts TeamDnsRecordsAllowArray and TeamDnsRecordsAllowArrayOutput values.
// You can construct a concrete instance of `TeamDnsRecordsAllowArrayInput` via:
//
//          TeamDnsRecordsAllowArray{ TeamDnsRecordsAllowArgs{...} }
type TeamDnsRecordsAllowArrayInput interface {
	pulumi.Input

	ToTeamDnsRecordsAllowArrayOutput() TeamDnsRecordsAllowArrayOutput
	ToTeamDnsRecordsAllowArrayOutputWithContext(context.Context) TeamDnsRecordsAllowArrayOutput
}

type TeamDnsRecordsAllowArray []TeamDnsRecordsAllowInput

func (TeamDnsRecordsAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamDnsRecordsAllow)(nil)).Elem()
}

func (i TeamDnsRecordsAllowArray) ToTeamDnsRecordsAllowArrayOutput() TeamDnsRecordsAllowArrayOutput {
	return i.ToTeamDnsRecordsAllowArrayOutputWithContext(context.Background())
}

func (i TeamDnsRecordsAllowArray) ToTeamDnsRecordsAllowArrayOutputWithContext(ctx context.Context) TeamDnsRecordsAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamDnsRecordsAllowArrayOutput)
}

type TeamDnsRecordsAllowOutput struct{ *pulumi.OutputState }

func (TeamDnsRecordsAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDnsRecordsAllow)(nil)).Elem()
}

func (o TeamDnsRecordsAllowOutput) ToTeamDnsRecordsAllowOutput() TeamDnsRecordsAllowOutput {
	return o
}

func (o TeamDnsRecordsAllowOutput) ToTeamDnsRecordsAllowOutputWithContext(ctx context.Context) TeamDnsRecordsAllowOutput {
	return o
}

func (o TeamDnsRecordsAllowOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsAllow) string { return v.Domain }).(pulumi.StringOutput)
}

func (o TeamDnsRecordsAllowOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v TeamDnsRecordsAllow) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o TeamDnsRecordsAllowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsAllow) string { return v.Type }).(pulumi.StringOutput)
}

func (o TeamDnsRecordsAllowOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsAllow) string { return v.Zone }).(pulumi.StringOutput)
}

type TeamDnsRecordsAllowArrayOutput struct{ *pulumi.OutputState }

func (TeamDnsRecordsAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamDnsRecordsAllow)(nil)).Elem()
}

func (o TeamDnsRecordsAllowArrayOutput) ToTeamDnsRecordsAllowArrayOutput() TeamDnsRecordsAllowArrayOutput {
	return o
}

func (o TeamDnsRecordsAllowArrayOutput) ToTeamDnsRecordsAllowArrayOutputWithContext(ctx context.Context) TeamDnsRecordsAllowArrayOutput {
	return o
}

func (o TeamDnsRecordsAllowArrayOutput) Index(i pulumi.IntInput) TeamDnsRecordsAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamDnsRecordsAllow {
		return vs[0].([]TeamDnsRecordsAllow)[vs[1].(int)]
	}).(TeamDnsRecordsAllowOutput)
}

type TeamDnsRecordsDeny struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// TeamDnsRecordsDenyInput is an input type that accepts TeamDnsRecordsDenyArgs and TeamDnsRecordsDenyOutput values.
// You can construct a concrete instance of `TeamDnsRecordsDenyInput` via:
//
//          TeamDnsRecordsDenyArgs{...}
type TeamDnsRecordsDenyInput interface {
	pulumi.Input

	ToTeamDnsRecordsDenyOutput() TeamDnsRecordsDenyOutput
	ToTeamDnsRecordsDenyOutputWithContext(context.Context) TeamDnsRecordsDenyOutput
}

type TeamDnsRecordsDenyArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (TeamDnsRecordsDenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDnsRecordsDeny)(nil)).Elem()
}

func (i TeamDnsRecordsDenyArgs) ToTeamDnsRecordsDenyOutput() TeamDnsRecordsDenyOutput {
	return i.ToTeamDnsRecordsDenyOutputWithContext(context.Background())
}

func (i TeamDnsRecordsDenyArgs) ToTeamDnsRecordsDenyOutputWithContext(ctx context.Context) TeamDnsRecordsDenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamDnsRecordsDenyOutput)
}

// TeamDnsRecordsDenyArrayInput is an input type that accepts TeamDnsRecordsDenyArray and TeamDnsRecordsDenyArrayOutput values.
// You can construct a concrete instance of `TeamDnsRecordsDenyArrayInput` via:
//
//          TeamDnsRecordsDenyArray{ TeamDnsRecordsDenyArgs{...} }
type TeamDnsRecordsDenyArrayInput interface {
	pulumi.Input

	ToTeamDnsRecordsDenyArrayOutput() TeamDnsRecordsDenyArrayOutput
	ToTeamDnsRecordsDenyArrayOutputWithContext(context.Context) TeamDnsRecordsDenyArrayOutput
}

type TeamDnsRecordsDenyArray []TeamDnsRecordsDenyInput

func (TeamDnsRecordsDenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamDnsRecordsDeny)(nil)).Elem()
}

func (i TeamDnsRecordsDenyArray) ToTeamDnsRecordsDenyArrayOutput() TeamDnsRecordsDenyArrayOutput {
	return i.ToTeamDnsRecordsDenyArrayOutputWithContext(context.Background())
}

func (i TeamDnsRecordsDenyArray) ToTeamDnsRecordsDenyArrayOutputWithContext(ctx context.Context) TeamDnsRecordsDenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamDnsRecordsDenyArrayOutput)
}

type TeamDnsRecordsDenyOutput struct{ *pulumi.OutputState }

func (TeamDnsRecordsDenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDnsRecordsDeny)(nil)).Elem()
}

func (o TeamDnsRecordsDenyOutput) ToTeamDnsRecordsDenyOutput() TeamDnsRecordsDenyOutput {
	return o
}

func (o TeamDnsRecordsDenyOutput) ToTeamDnsRecordsDenyOutputWithContext(ctx context.Context) TeamDnsRecordsDenyOutput {
	return o
}

func (o TeamDnsRecordsDenyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsDeny) string { return v.Domain }).(pulumi.StringOutput)
}

func (o TeamDnsRecordsDenyOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v TeamDnsRecordsDeny) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o TeamDnsRecordsDenyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsDeny) string { return v.Type }).(pulumi.StringOutput)
}

func (o TeamDnsRecordsDenyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDnsRecordsDeny) string { return v.Zone }).(pulumi.StringOutput)
}

type TeamDnsRecordsDenyArrayOutput struct{ *pulumi.OutputState }

func (TeamDnsRecordsDenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamDnsRecordsDeny)(nil)).Elem()
}

func (o TeamDnsRecordsDenyArrayOutput) ToTeamDnsRecordsDenyArrayOutput() TeamDnsRecordsDenyArrayOutput {
	return o
}

func (o TeamDnsRecordsDenyArrayOutput) ToTeamDnsRecordsDenyArrayOutputWithContext(ctx context.Context) TeamDnsRecordsDenyArrayOutput {
	return o
}

func (o TeamDnsRecordsDenyArrayOutput) Index(i pulumi.IntInput) TeamDnsRecordsDenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamDnsRecordsDeny {
		return vs[0].([]TeamDnsRecordsDeny)[vs[1].(int)]
	}).(TeamDnsRecordsDenyOutput)
}

type TeamIpWhitelist struct {
	// The free form name of the team.
	Name   string   `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// TeamIpWhitelistInput is an input type that accepts TeamIpWhitelistArgs and TeamIpWhitelistOutput values.
// You can construct a concrete instance of `TeamIpWhitelistInput` via:
//
//          TeamIpWhitelistArgs{...}
type TeamIpWhitelistInput interface {
	pulumi.Input

	ToTeamIpWhitelistOutput() TeamIpWhitelistOutput
	ToTeamIpWhitelistOutputWithContext(context.Context) TeamIpWhitelistOutput
}

type TeamIpWhitelistArgs struct {
	// The free form name of the team.
	Name   pulumi.StringInput      `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TeamIpWhitelistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamIpWhitelist)(nil)).Elem()
}

func (i TeamIpWhitelistArgs) ToTeamIpWhitelistOutput() TeamIpWhitelistOutput {
	return i.ToTeamIpWhitelistOutputWithContext(context.Background())
}

func (i TeamIpWhitelistArgs) ToTeamIpWhitelistOutputWithContext(ctx context.Context) TeamIpWhitelistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamIpWhitelistOutput)
}

// TeamIpWhitelistArrayInput is an input type that accepts TeamIpWhitelistArray and TeamIpWhitelistArrayOutput values.
// You can construct a concrete instance of `TeamIpWhitelistArrayInput` via:
//
//          TeamIpWhitelistArray{ TeamIpWhitelistArgs{...} }
type TeamIpWhitelistArrayInput interface {
	pulumi.Input

	ToTeamIpWhitelistArrayOutput() TeamIpWhitelistArrayOutput
	ToTeamIpWhitelistArrayOutputWithContext(context.Context) TeamIpWhitelistArrayOutput
}

type TeamIpWhitelistArray []TeamIpWhitelistInput

func (TeamIpWhitelistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamIpWhitelist)(nil)).Elem()
}

func (i TeamIpWhitelistArray) ToTeamIpWhitelistArrayOutput() TeamIpWhitelistArrayOutput {
	return i.ToTeamIpWhitelistArrayOutputWithContext(context.Background())
}

func (i TeamIpWhitelistArray) ToTeamIpWhitelistArrayOutputWithContext(ctx context.Context) TeamIpWhitelistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamIpWhitelistArrayOutput)
}

type TeamIpWhitelistOutput struct{ *pulumi.OutputState }

func (TeamIpWhitelistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamIpWhitelist)(nil)).Elem()
}

func (o TeamIpWhitelistOutput) ToTeamIpWhitelistOutput() TeamIpWhitelistOutput {
	return o
}

func (o TeamIpWhitelistOutput) ToTeamIpWhitelistOutputWithContext(ctx context.Context) TeamIpWhitelistOutput {
	return o
}

// The free form name of the team.
func (o TeamIpWhitelistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TeamIpWhitelist) string { return v.Name }).(pulumi.StringOutput)
}

func (o TeamIpWhitelistOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TeamIpWhitelist) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TeamIpWhitelistArrayOutput struct{ *pulumi.OutputState }

func (TeamIpWhitelistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamIpWhitelist)(nil)).Elem()
}

func (o TeamIpWhitelistArrayOutput) ToTeamIpWhitelistArrayOutput() TeamIpWhitelistArrayOutput {
	return o
}

func (o TeamIpWhitelistArrayOutput) ToTeamIpWhitelistArrayOutputWithContext(ctx context.Context) TeamIpWhitelistArrayOutput {
	return o
}

func (o TeamIpWhitelistArrayOutput) Index(i pulumi.IntInput) TeamIpWhitelistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamIpWhitelist {
		return vs[0].([]TeamIpWhitelist)[vs[1].(int)]
	}).(TeamIpWhitelistOutput)
}

type UserDnsRecordsAllow struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// UserDnsRecordsAllowInput is an input type that accepts UserDnsRecordsAllowArgs and UserDnsRecordsAllowOutput values.
// You can construct a concrete instance of `UserDnsRecordsAllowInput` via:
//
//          UserDnsRecordsAllowArgs{...}
type UserDnsRecordsAllowInput interface {
	pulumi.Input

	ToUserDnsRecordsAllowOutput() UserDnsRecordsAllowOutput
	ToUserDnsRecordsAllowOutputWithContext(context.Context) UserDnsRecordsAllowOutput
}

type UserDnsRecordsAllowArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (UserDnsRecordsAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDnsRecordsAllow)(nil)).Elem()
}

func (i UserDnsRecordsAllowArgs) ToUserDnsRecordsAllowOutput() UserDnsRecordsAllowOutput {
	return i.ToUserDnsRecordsAllowOutputWithContext(context.Background())
}

func (i UserDnsRecordsAllowArgs) ToUserDnsRecordsAllowOutputWithContext(ctx context.Context) UserDnsRecordsAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDnsRecordsAllowOutput)
}

// UserDnsRecordsAllowArrayInput is an input type that accepts UserDnsRecordsAllowArray and UserDnsRecordsAllowArrayOutput values.
// You can construct a concrete instance of `UserDnsRecordsAllowArrayInput` via:
//
//          UserDnsRecordsAllowArray{ UserDnsRecordsAllowArgs{...} }
type UserDnsRecordsAllowArrayInput interface {
	pulumi.Input

	ToUserDnsRecordsAllowArrayOutput() UserDnsRecordsAllowArrayOutput
	ToUserDnsRecordsAllowArrayOutputWithContext(context.Context) UserDnsRecordsAllowArrayOutput
}

type UserDnsRecordsAllowArray []UserDnsRecordsAllowInput

func (UserDnsRecordsAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDnsRecordsAllow)(nil)).Elem()
}

func (i UserDnsRecordsAllowArray) ToUserDnsRecordsAllowArrayOutput() UserDnsRecordsAllowArrayOutput {
	return i.ToUserDnsRecordsAllowArrayOutputWithContext(context.Background())
}

func (i UserDnsRecordsAllowArray) ToUserDnsRecordsAllowArrayOutputWithContext(ctx context.Context) UserDnsRecordsAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDnsRecordsAllowArrayOutput)
}

type UserDnsRecordsAllowOutput struct{ *pulumi.OutputState }

func (UserDnsRecordsAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDnsRecordsAllow)(nil)).Elem()
}

func (o UserDnsRecordsAllowOutput) ToUserDnsRecordsAllowOutput() UserDnsRecordsAllowOutput {
	return o
}

func (o UserDnsRecordsAllowOutput) ToUserDnsRecordsAllowOutputWithContext(ctx context.Context) UserDnsRecordsAllowOutput {
	return o
}

func (o UserDnsRecordsAllowOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsAllow) string { return v.Domain }).(pulumi.StringOutput)
}

func (o UserDnsRecordsAllowOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v UserDnsRecordsAllow) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o UserDnsRecordsAllowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsAllow) string { return v.Type }).(pulumi.StringOutput)
}

func (o UserDnsRecordsAllowOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsAllow) string { return v.Zone }).(pulumi.StringOutput)
}

type UserDnsRecordsAllowArrayOutput struct{ *pulumi.OutputState }

func (UserDnsRecordsAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDnsRecordsAllow)(nil)).Elem()
}

func (o UserDnsRecordsAllowArrayOutput) ToUserDnsRecordsAllowArrayOutput() UserDnsRecordsAllowArrayOutput {
	return o
}

func (o UserDnsRecordsAllowArrayOutput) ToUserDnsRecordsAllowArrayOutputWithContext(ctx context.Context) UserDnsRecordsAllowArrayOutput {
	return o
}

func (o UserDnsRecordsAllowArrayOutput) Index(i pulumi.IntInput) UserDnsRecordsAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDnsRecordsAllow {
		return vs[0].([]UserDnsRecordsAllow)[vs[1].(int)]
	}).(UserDnsRecordsAllowOutput)
}

type UserDnsRecordsDeny struct {
	Domain            string `pulumi:"domain"`
	IncludeSubdomains bool   `pulumi:"includeSubdomains"`
	Type              string `pulumi:"type"`
	Zone              string `pulumi:"zone"`
}

// UserDnsRecordsDenyInput is an input type that accepts UserDnsRecordsDenyArgs and UserDnsRecordsDenyOutput values.
// You can construct a concrete instance of `UserDnsRecordsDenyInput` via:
//
//          UserDnsRecordsDenyArgs{...}
type UserDnsRecordsDenyInput interface {
	pulumi.Input

	ToUserDnsRecordsDenyOutput() UserDnsRecordsDenyOutput
	ToUserDnsRecordsDenyOutputWithContext(context.Context) UserDnsRecordsDenyOutput
}

type UserDnsRecordsDenyArgs struct {
	Domain            pulumi.StringInput `pulumi:"domain"`
	IncludeSubdomains pulumi.BoolInput   `pulumi:"includeSubdomains"`
	Type              pulumi.StringInput `pulumi:"type"`
	Zone              pulumi.StringInput `pulumi:"zone"`
}

func (UserDnsRecordsDenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDnsRecordsDeny)(nil)).Elem()
}

func (i UserDnsRecordsDenyArgs) ToUserDnsRecordsDenyOutput() UserDnsRecordsDenyOutput {
	return i.ToUserDnsRecordsDenyOutputWithContext(context.Background())
}

func (i UserDnsRecordsDenyArgs) ToUserDnsRecordsDenyOutputWithContext(ctx context.Context) UserDnsRecordsDenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDnsRecordsDenyOutput)
}

// UserDnsRecordsDenyArrayInput is an input type that accepts UserDnsRecordsDenyArray and UserDnsRecordsDenyArrayOutput values.
// You can construct a concrete instance of `UserDnsRecordsDenyArrayInput` via:
//
//          UserDnsRecordsDenyArray{ UserDnsRecordsDenyArgs{...} }
type UserDnsRecordsDenyArrayInput interface {
	pulumi.Input

	ToUserDnsRecordsDenyArrayOutput() UserDnsRecordsDenyArrayOutput
	ToUserDnsRecordsDenyArrayOutputWithContext(context.Context) UserDnsRecordsDenyArrayOutput
}

type UserDnsRecordsDenyArray []UserDnsRecordsDenyInput

func (UserDnsRecordsDenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDnsRecordsDeny)(nil)).Elem()
}

func (i UserDnsRecordsDenyArray) ToUserDnsRecordsDenyArrayOutput() UserDnsRecordsDenyArrayOutput {
	return i.ToUserDnsRecordsDenyArrayOutputWithContext(context.Background())
}

func (i UserDnsRecordsDenyArray) ToUserDnsRecordsDenyArrayOutputWithContext(ctx context.Context) UserDnsRecordsDenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDnsRecordsDenyArrayOutput)
}

type UserDnsRecordsDenyOutput struct{ *pulumi.OutputState }

func (UserDnsRecordsDenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDnsRecordsDeny)(nil)).Elem()
}

func (o UserDnsRecordsDenyOutput) ToUserDnsRecordsDenyOutput() UserDnsRecordsDenyOutput {
	return o
}

func (o UserDnsRecordsDenyOutput) ToUserDnsRecordsDenyOutputWithContext(ctx context.Context) UserDnsRecordsDenyOutput {
	return o
}

func (o UserDnsRecordsDenyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsDeny) string { return v.Domain }).(pulumi.StringOutput)
}

func (o UserDnsRecordsDenyOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v UserDnsRecordsDeny) bool { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

func (o UserDnsRecordsDenyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsDeny) string { return v.Type }).(pulumi.StringOutput)
}

func (o UserDnsRecordsDenyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v UserDnsRecordsDeny) string { return v.Zone }).(pulumi.StringOutput)
}

type UserDnsRecordsDenyArrayOutput struct{ *pulumi.OutputState }

func (UserDnsRecordsDenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDnsRecordsDeny)(nil)).Elem()
}

func (o UserDnsRecordsDenyArrayOutput) ToUserDnsRecordsDenyArrayOutput() UserDnsRecordsDenyArrayOutput {
	return o
}

func (o UserDnsRecordsDenyArrayOutput) ToUserDnsRecordsDenyArrayOutputWithContext(ctx context.Context) UserDnsRecordsDenyArrayOutput {
	return o
}

func (o UserDnsRecordsDenyArrayOutput) Index(i pulumi.IntInput) UserDnsRecordsDenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDnsRecordsDeny {
		return vs[0].([]UserDnsRecordsDeny)[vs[1].(int)]
	}).(UserDnsRecordsDenyOutput)
}

type ZoneSecondary struct {
	// IPv4 address of the secondary server.
	Ip string `pulumi:"ip"`
	// - List of network IDs (`int`) for which the zone
	//   should be made available. Default is network 0, the primary NSONE Global
	//   Network. Normally, you should not have to worry about this.
	Networks []int `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify *bool `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port *int `pulumi:"port"`
}

// ZoneSecondaryInput is an input type that accepts ZoneSecondaryArgs and ZoneSecondaryOutput values.
// You can construct a concrete instance of `ZoneSecondaryInput` via:
//
//          ZoneSecondaryArgs{...}
type ZoneSecondaryInput interface {
	pulumi.Input

	ToZoneSecondaryOutput() ZoneSecondaryOutput
	ToZoneSecondaryOutputWithContext(context.Context) ZoneSecondaryOutput
}

type ZoneSecondaryArgs struct {
	// IPv4 address of the secondary server.
	Ip pulumi.StringInput `pulumi:"ip"`
	// - List of network IDs (`int`) for which the zone
	//   should be made available. Default is network 0, the primary NSONE Global
	//   Network. Normally, you should not have to worry about this.
	Networks pulumi.IntArrayInput `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify pulumi.BoolPtrInput `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ZoneSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneSecondary)(nil)).Elem()
}

func (i ZoneSecondaryArgs) ToZoneSecondaryOutput() ZoneSecondaryOutput {
	return i.ToZoneSecondaryOutputWithContext(context.Background())
}

func (i ZoneSecondaryArgs) ToZoneSecondaryOutputWithContext(ctx context.Context) ZoneSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSecondaryOutput)
}

// ZoneSecondaryArrayInput is an input type that accepts ZoneSecondaryArray and ZoneSecondaryArrayOutput values.
// You can construct a concrete instance of `ZoneSecondaryArrayInput` via:
//
//          ZoneSecondaryArray{ ZoneSecondaryArgs{...} }
type ZoneSecondaryArrayInput interface {
	pulumi.Input

	ToZoneSecondaryArrayOutput() ZoneSecondaryArrayOutput
	ToZoneSecondaryArrayOutputWithContext(context.Context) ZoneSecondaryArrayOutput
}

type ZoneSecondaryArray []ZoneSecondaryInput

func (ZoneSecondaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneSecondary)(nil)).Elem()
}

func (i ZoneSecondaryArray) ToZoneSecondaryArrayOutput() ZoneSecondaryArrayOutput {
	return i.ToZoneSecondaryArrayOutputWithContext(context.Background())
}

func (i ZoneSecondaryArray) ToZoneSecondaryArrayOutputWithContext(ctx context.Context) ZoneSecondaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSecondaryArrayOutput)
}

type ZoneSecondaryOutput struct{ *pulumi.OutputState }

func (ZoneSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneSecondary)(nil)).Elem()
}

func (o ZoneSecondaryOutput) ToZoneSecondaryOutput() ZoneSecondaryOutput {
	return o
}

func (o ZoneSecondaryOutput) ToZoneSecondaryOutputWithContext(ctx context.Context) ZoneSecondaryOutput {
	return o
}

// IPv4 address of the secondary server.
func (o ZoneSecondaryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneSecondary) string { return v.Ip }).(pulumi.StringOutput)
}

// - List of network IDs (`int`) for which the zone
//   should be made available. Default is network 0, the primary NSONE Global
//   Network. Normally, you should not have to worry about this.
func (o ZoneSecondaryOutput) Networks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ZoneSecondary) []int { return v.Networks }).(pulumi.IntArrayOutput)
}

// Whether we send `NOTIFY` messages to the secondary host
// when the zone changes. Default `false`.
func (o ZoneSecondaryOutput) Notify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ZoneSecondary) *bool { return v.Notify }).(pulumi.BoolPtrOutput)
}

// Port of the the secondary server. Default `53`.
func (o ZoneSecondaryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZoneSecondary) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ZoneSecondaryArrayOutput struct{ *pulumi.OutputState }

func (ZoneSecondaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneSecondary)(nil)).Elem()
}

func (o ZoneSecondaryArrayOutput) ToZoneSecondaryArrayOutput() ZoneSecondaryArrayOutput {
	return o
}

func (o ZoneSecondaryArrayOutput) ToZoneSecondaryArrayOutputWithContext(ctx context.Context) ZoneSecondaryArrayOutput {
	return o
}

func (o ZoneSecondaryArrayOutput) Index(i pulumi.IntInput) ZoneSecondaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneSecondary {
		return vs[0].([]ZoneSecondary)[vs[1].(int)]
	}).(ZoneSecondaryOutput)
}

type GetDNSSecDelegation struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys []GetDNSSecDelegationDnskey `pulumi:"dnskeys"`
	// (Computed) List of Keys. Key is documented below.
	Ds []GetDNSSecDelegationD `pulumi:"ds"`
	// (Computed) TTL for the Keys (int).
	Ttl int `pulumi:"ttl"`
}

// GetDNSSecDelegationInput is an input type that accepts GetDNSSecDelegationArgs and GetDNSSecDelegationOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationInput` via:
//
//          GetDNSSecDelegationArgs{...}
type GetDNSSecDelegationInput interface {
	pulumi.Input

	ToGetDNSSecDelegationOutput() GetDNSSecDelegationOutput
	ToGetDNSSecDelegationOutputWithContext(context.Context) GetDNSSecDelegationOutput
}

type GetDNSSecDelegationArgs struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys GetDNSSecDelegationDnskeyArrayInput `pulumi:"dnskeys"`
	// (Computed) List of Keys. Key is documented below.
	Ds GetDNSSecDelegationDArrayInput `pulumi:"ds"`
	// (Computed) TTL for the Keys (int).
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (GetDNSSecDelegationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegation)(nil)).Elem()
}

func (i GetDNSSecDelegationArgs) ToGetDNSSecDelegationOutput() GetDNSSecDelegationOutput {
	return i.ToGetDNSSecDelegationOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationArgs) ToGetDNSSecDelegationOutputWithContext(ctx context.Context) GetDNSSecDelegationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationOutput)
}

type GetDNSSecDelegationOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegation)(nil)).Elem()
}

func (o GetDNSSecDelegationOutput) ToGetDNSSecDelegationOutput() GetDNSSecDelegationOutput {
	return o
}

func (o GetDNSSecDelegationOutput) ToGetDNSSecDelegationOutputWithContext(ctx context.Context) GetDNSSecDelegationOutput {
	return o
}

// (Computed) List of Keys. Key is documented below.
func (o GetDNSSecDelegationOutput) Dnskeys() GetDNSSecDelegationDnskeyArrayOutput {
	return o.ApplyT(func(v GetDNSSecDelegation) []GetDNSSecDelegationDnskey { return v.Dnskeys }).(GetDNSSecDelegationDnskeyArrayOutput)
}

// (Computed) List of Keys. Key is documented below.
func (o GetDNSSecDelegationOutput) Ds() GetDNSSecDelegationDArrayOutput {
	return o.ApplyT(func(v GetDNSSecDelegation) []GetDNSSecDelegationD { return v.Ds }).(GetDNSSecDelegationDArrayOutput)
}

// (Computed) TTL for the Keys (int).
func (o GetDNSSecDelegationOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetDNSSecDelegation) int { return v.Ttl }).(pulumi.IntOutput)
}

type GetDNSSecDelegationD struct {
	// (Computed) Algorithm of the key.
	Algorithm string `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags string `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol string `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey string `pulumi:"publicKey"`
}

// GetDNSSecDelegationDInput is an input type that accepts GetDNSSecDelegationDArgs and GetDNSSecDelegationDOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDInput` via:
//
//          GetDNSSecDelegationDArgs{...}
type GetDNSSecDelegationDInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDOutput() GetDNSSecDelegationDOutput
	ToGetDNSSecDelegationDOutputWithContext(context.Context) GetDNSSecDelegationDOutput
}

type GetDNSSecDelegationDArgs struct {
	// (Computed) Algorithm of the key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags pulumi.StringInput `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetDNSSecDelegationDArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationD)(nil)).Elem()
}

func (i GetDNSSecDelegationDArgs) ToGetDNSSecDelegationDOutput() GetDNSSecDelegationDOutput {
	return i.ToGetDNSSecDelegationDOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDArgs) ToGetDNSSecDelegationDOutputWithContext(ctx context.Context) GetDNSSecDelegationDOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDOutput)
}

// GetDNSSecDelegationDArrayInput is an input type that accepts GetDNSSecDelegationDArray and GetDNSSecDelegationDArrayOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDArrayInput` via:
//
//          GetDNSSecDelegationDArray{ GetDNSSecDelegationDArgs{...} }
type GetDNSSecDelegationDArrayInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDArrayOutput() GetDNSSecDelegationDArrayOutput
	ToGetDNSSecDelegationDArrayOutputWithContext(context.Context) GetDNSSecDelegationDArrayOutput
}

type GetDNSSecDelegationDArray []GetDNSSecDelegationDInput

func (GetDNSSecDelegationDArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationD)(nil)).Elem()
}

func (i GetDNSSecDelegationDArray) ToGetDNSSecDelegationDArrayOutput() GetDNSSecDelegationDArrayOutput {
	return i.ToGetDNSSecDelegationDArrayOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDArray) ToGetDNSSecDelegationDArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDArrayOutput)
}

type GetDNSSecDelegationDOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationD)(nil)).Elem()
}

func (o GetDNSSecDelegationDOutput) ToGetDNSSecDelegationDOutput() GetDNSSecDelegationDOutput {
	return o
}

func (o GetDNSSecDelegationDOutput) ToGetDNSSecDelegationDOutputWithContext(ctx context.Context) GetDNSSecDelegationDOutput {
	return o
}

// (Computed) Algorithm of the key.
func (o GetDNSSecDelegationDOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.Algorithm }).(pulumi.StringOutput)
}

// (Computed) Flags for the key.
func (o GetDNSSecDelegationDOutput) Flags() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.Flags }).(pulumi.StringOutput)
}

// (Computed) Protocol of the key.
func (o GetDNSSecDelegationDOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Computed) Public key for the key.
func (o GetDNSSecDelegationDOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationD) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetDNSSecDelegationDArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationD)(nil)).Elem()
}

func (o GetDNSSecDelegationDArrayOutput) ToGetDNSSecDelegationDArrayOutput() GetDNSSecDelegationDArrayOutput {
	return o
}

func (o GetDNSSecDelegationDArrayOutput) ToGetDNSSecDelegationDArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDArrayOutput {
	return o
}

func (o GetDNSSecDelegationDArrayOutput) Index(i pulumi.IntInput) GetDNSSecDelegationDOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecDelegationD {
		return vs[0].([]GetDNSSecDelegationD)[vs[1].(int)]
	}).(GetDNSSecDelegationDOutput)
}

type GetDNSSecDelegationDnskey struct {
	// (Computed) Algorithm of the key.
	Algorithm string `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags string `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol string `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey string `pulumi:"publicKey"`
}

// GetDNSSecDelegationDnskeyInput is an input type that accepts GetDNSSecDelegationDnskeyArgs and GetDNSSecDelegationDnskeyOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDnskeyInput` via:
//
//          GetDNSSecDelegationDnskeyArgs{...}
type GetDNSSecDelegationDnskeyInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDnskeyOutput() GetDNSSecDelegationDnskeyOutput
	ToGetDNSSecDelegationDnskeyOutputWithContext(context.Context) GetDNSSecDelegationDnskeyOutput
}

type GetDNSSecDelegationDnskeyArgs struct {
	// (Computed) Algorithm of the key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags pulumi.StringInput `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetDNSSecDelegationDnskeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (i GetDNSSecDelegationDnskeyArgs) ToGetDNSSecDelegationDnskeyOutput() GetDNSSecDelegationDnskeyOutput {
	return i.ToGetDNSSecDelegationDnskeyOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDnskeyArgs) ToGetDNSSecDelegationDnskeyOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDnskeyOutput)
}

// GetDNSSecDelegationDnskeyArrayInput is an input type that accepts GetDNSSecDelegationDnskeyArray and GetDNSSecDelegationDnskeyArrayOutput values.
// You can construct a concrete instance of `GetDNSSecDelegationDnskeyArrayInput` via:
//
//          GetDNSSecDelegationDnskeyArray{ GetDNSSecDelegationDnskeyArgs{...} }
type GetDNSSecDelegationDnskeyArrayInput interface {
	pulumi.Input

	ToGetDNSSecDelegationDnskeyArrayOutput() GetDNSSecDelegationDnskeyArrayOutput
	ToGetDNSSecDelegationDnskeyArrayOutputWithContext(context.Context) GetDNSSecDelegationDnskeyArrayOutput
}

type GetDNSSecDelegationDnskeyArray []GetDNSSecDelegationDnskeyInput

func (GetDNSSecDelegationDnskeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (i GetDNSSecDelegationDnskeyArray) ToGetDNSSecDelegationDnskeyArrayOutput() GetDNSSecDelegationDnskeyArrayOutput {
	return i.ToGetDNSSecDelegationDnskeyArrayOutputWithContext(context.Background())
}

func (i GetDNSSecDelegationDnskeyArray) ToGetDNSSecDelegationDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecDelegationDnskeyArrayOutput)
}

type GetDNSSecDelegationDnskeyOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDnskeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (o GetDNSSecDelegationDnskeyOutput) ToGetDNSSecDelegationDnskeyOutput() GetDNSSecDelegationDnskeyOutput {
	return o
}

func (o GetDNSSecDelegationDnskeyOutput) ToGetDNSSecDelegationDnskeyOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyOutput {
	return o
}

// (Computed) Algorithm of the key.
func (o GetDNSSecDelegationDnskeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// (Computed) Flags for the key.
func (o GetDNSSecDelegationDnskeyOutput) Flags() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.Flags }).(pulumi.StringOutput)
}

// (Computed) Protocol of the key.
func (o GetDNSSecDelegationDnskeyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Computed) Public key for the key.
func (o GetDNSSecDelegationDnskeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecDelegationDnskey) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetDNSSecDelegationDnskeyArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecDelegationDnskeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecDelegationDnskey)(nil)).Elem()
}

func (o GetDNSSecDelegationDnskeyArrayOutput) ToGetDNSSecDelegationDnskeyArrayOutput() GetDNSSecDelegationDnskeyArrayOutput {
	return o
}

func (o GetDNSSecDelegationDnskeyArrayOutput) ToGetDNSSecDelegationDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecDelegationDnskeyArrayOutput {
	return o
}

func (o GetDNSSecDelegationDnskeyArrayOutput) Index(i pulumi.IntInput) GetDNSSecDelegationDnskeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecDelegationDnskey {
		return vs[0].([]GetDNSSecDelegationDnskey)[vs[1].(int)]
	}).(GetDNSSecDelegationDnskeyOutput)
}

type GetDNSSecKeys struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys []GetDNSSecKeysDnskey `pulumi:"dnskeys"`
	// (Computed) TTL for the Keys (int).
	Ttl int `pulumi:"ttl"`
}

// GetDNSSecKeysInput is an input type that accepts GetDNSSecKeysArgs and GetDNSSecKeysOutput values.
// You can construct a concrete instance of `GetDNSSecKeysInput` via:
//
//          GetDNSSecKeysArgs{...}
type GetDNSSecKeysInput interface {
	pulumi.Input

	ToGetDNSSecKeysOutput() GetDNSSecKeysOutput
	ToGetDNSSecKeysOutputWithContext(context.Context) GetDNSSecKeysOutput
}

type GetDNSSecKeysArgs struct {
	// (Computed) List of Keys. Key is documented below.
	Dnskeys GetDNSSecKeysDnskeyArrayInput `pulumi:"dnskeys"`
	// (Computed) TTL for the Keys (int).
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (GetDNSSecKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeys)(nil)).Elem()
}

func (i GetDNSSecKeysArgs) ToGetDNSSecKeysOutput() GetDNSSecKeysOutput {
	return i.ToGetDNSSecKeysOutputWithContext(context.Background())
}

func (i GetDNSSecKeysArgs) ToGetDNSSecKeysOutputWithContext(ctx context.Context) GetDNSSecKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeysOutput)
}

type GetDNSSecKeysOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeys)(nil)).Elem()
}

func (o GetDNSSecKeysOutput) ToGetDNSSecKeysOutput() GetDNSSecKeysOutput {
	return o
}

func (o GetDNSSecKeysOutput) ToGetDNSSecKeysOutputWithContext(ctx context.Context) GetDNSSecKeysOutput {
	return o
}

// (Computed) List of Keys. Key is documented below.
func (o GetDNSSecKeysOutput) Dnskeys() GetDNSSecKeysDnskeyArrayOutput {
	return o.ApplyT(func(v GetDNSSecKeys) []GetDNSSecKeysDnskey { return v.Dnskeys }).(GetDNSSecKeysDnskeyArrayOutput)
}

// (Computed) TTL for the Keys (int).
func (o GetDNSSecKeysOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetDNSSecKeys) int { return v.Ttl }).(pulumi.IntOutput)
}

type GetDNSSecKeysDnskey struct {
	// (Computed) Algorithm of the key.
	Algorithm string `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags string `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol string `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey string `pulumi:"publicKey"`
}

// GetDNSSecKeysDnskeyInput is an input type that accepts GetDNSSecKeysDnskeyArgs and GetDNSSecKeysDnskeyOutput values.
// You can construct a concrete instance of `GetDNSSecKeysDnskeyInput` via:
//
//          GetDNSSecKeysDnskeyArgs{...}
type GetDNSSecKeysDnskeyInput interface {
	pulumi.Input

	ToGetDNSSecKeysDnskeyOutput() GetDNSSecKeysDnskeyOutput
	ToGetDNSSecKeysDnskeyOutputWithContext(context.Context) GetDNSSecKeysDnskeyOutput
}

type GetDNSSecKeysDnskeyArgs struct {
	// (Computed) Algorithm of the key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// (Computed) Flags for the key.
	Flags pulumi.StringInput `pulumi:"flags"`
	// (Computed) Protocol of the key.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (Computed) Public key for the key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
}

func (GetDNSSecKeysDnskeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeysDnskey)(nil)).Elem()
}

func (i GetDNSSecKeysDnskeyArgs) ToGetDNSSecKeysDnskeyOutput() GetDNSSecKeysDnskeyOutput {
	return i.ToGetDNSSecKeysDnskeyOutputWithContext(context.Background())
}

func (i GetDNSSecKeysDnskeyArgs) ToGetDNSSecKeysDnskeyOutputWithContext(ctx context.Context) GetDNSSecKeysDnskeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeysDnskeyOutput)
}

// GetDNSSecKeysDnskeyArrayInput is an input type that accepts GetDNSSecKeysDnskeyArray and GetDNSSecKeysDnskeyArrayOutput values.
// You can construct a concrete instance of `GetDNSSecKeysDnskeyArrayInput` via:
//
//          GetDNSSecKeysDnskeyArray{ GetDNSSecKeysDnskeyArgs{...} }
type GetDNSSecKeysDnskeyArrayInput interface {
	pulumi.Input

	ToGetDNSSecKeysDnskeyArrayOutput() GetDNSSecKeysDnskeyArrayOutput
	ToGetDNSSecKeysDnskeyArrayOutputWithContext(context.Context) GetDNSSecKeysDnskeyArrayOutput
}

type GetDNSSecKeysDnskeyArray []GetDNSSecKeysDnskeyInput

func (GetDNSSecKeysDnskeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecKeysDnskey)(nil)).Elem()
}

func (i GetDNSSecKeysDnskeyArray) ToGetDNSSecKeysDnskeyArrayOutput() GetDNSSecKeysDnskeyArrayOutput {
	return i.ToGetDNSSecKeysDnskeyArrayOutputWithContext(context.Background())
}

func (i GetDNSSecKeysDnskeyArray) ToGetDNSSecKeysDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecKeysDnskeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDNSSecKeysDnskeyArrayOutput)
}

type GetDNSSecKeysDnskeyOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeysDnskeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDNSSecKeysDnskey)(nil)).Elem()
}

func (o GetDNSSecKeysDnskeyOutput) ToGetDNSSecKeysDnskeyOutput() GetDNSSecKeysDnskeyOutput {
	return o
}

func (o GetDNSSecKeysDnskeyOutput) ToGetDNSSecKeysDnskeyOutputWithContext(ctx context.Context) GetDNSSecKeysDnskeyOutput {
	return o
}

// (Computed) Algorithm of the key.
func (o GetDNSSecKeysDnskeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeysDnskey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// (Computed) Flags for the key.
func (o GetDNSSecKeysDnskeyOutput) Flags() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeysDnskey) string { return v.Flags }).(pulumi.StringOutput)
}

// (Computed) Protocol of the key.
func (o GetDNSSecKeysDnskeyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeysDnskey) string { return v.Protocol }).(pulumi.StringOutput)
}

// (Computed) Public key for the key.
func (o GetDNSSecKeysDnskeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetDNSSecKeysDnskey) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetDNSSecKeysDnskeyArrayOutput struct{ *pulumi.OutputState }

func (GetDNSSecKeysDnskeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDNSSecKeysDnskey)(nil)).Elem()
}

func (o GetDNSSecKeysDnskeyArrayOutput) ToGetDNSSecKeysDnskeyArrayOutput() GetDNSSecKeysDnskeyArrayOutput {
	return o
}

func (o GetDNSSecKeysDnskeyArrayOutput) ToGetDNSSecKeysDnskeyArrayOutputWithContext(ctx context.Context) GetDNSSecKeysDnskeyArrayOutput {
	return o
}

func (o GetDNSSecKeysDnskeyArrayOutput) Index(i pulumi.IntInput) GetDNSSecKeysDnskeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDNSSecKeysDnskey {
		return vs[0].([]GetDNSSecKeysDnskey)[vs[1].(int)]
	}).(GetDNSSecKeysDnskeyOutput)
}

type GetRecordAnswer struct {
	Answer string `pulumi:"answer"`
	// Map of metadata
	Meta   map[string]interface{} `pulumi:"meta"`
	Region string                 `pulumi:"region"`
}

// GetRecordAnswerInput is an input type that accepts GetRecordAnswerArgs and GetRecordAnswerOutput values.
// You can construct a concrete instance of `GetRecordAnswerInput` via:
//
//          GetRecordAnswerArgs{...}
type GetRecordAnswerInput interface {
	pulumi.Input

	ToGetRecordAnswerOutput() GetRecordAnswerOutput
	ToGetRecordAnswerOutputWithContext(context.Context) GetRecordAnswerOutput
}

type GetRecordAnswerArgs struct {
	Answer pulumi.StringInput `pulumi:"answer"`
	// Map of metadata
	Meta   pulumi.MapInput    `pulumi:"meta"`
	Region pulumi.StringInput `pulumi:"region"`
}

func (GetRecordAnswerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordAnswer)(nil)).Elem()
}

func (i GetRecordAnswerArgs) ToGetRecordAnswerOutput() GetRecordAnswerOutput {
	return i.ToGetRecordAnswerOutputWithContext(context.Background())
}

func (i GetRecordAnswerArgs) ToGetRecordAnswerOutputWithContext(ctx context.Context) GetRecordAnswerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordAnswerOutput)
}

// GetRecordAnswerArrayInput is an input type that accepts GetRecordAnswerArray and GetRecordAnswerArrayOutput values.
// You can construct a concrete instance of `GetRecordAnswerArrayInput` via:
//
//          GetRecordAnswerArray{ GetRecordAnswerArgs{...} }
type GetRecordAnswerArrayInput interface {
	pulumi.Input

	ToGetRecordAnswerArrayOutput() GetRecordAnswerArrayOutput
	ToGetRecordAnswerArrayOutputWithContext(context.Context) GetRecordAnswerArrayOutput
}

type GetRecordAnswerArray []GetRecordAnswerInput

func (GetRecordAnswerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordAnswer)(nil)).Elem()
}

func (i GetRecordAnswerArray) ToGetRecordAnswerArrayOutput() GetRecordAnswerArrayOutput {
	return i.ToGetRecordAnswerArrayOutputWithContext(context.Background())
}

func (i GetRecordAnswerArray) ToGetRecordAnswerArrayOutputWithContext(ctx context.Context) GetRecordAnswerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordAnswerArrayOutput)
}

type GetRecordAnswerOutput struct{ *pulumi.OutputState }

func (GetRecordAnswerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordAnswer)(nil)).Elem()
}

func (o GetRecordAnswerOutput) ToGetRecordAnswerOutput() GetRecordAnswerOutput {
	return o
}

func (o GetRecordAnswerOutput) ToGetRecordAnswerOutputWithContext(ctx context.Context) GetRecordAnswerOutput {
	return o
}

func (o GetRecordAnswerOutput) Answer() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordAnswer) string { return v.Answer }).(pulumi.StringOutput)
}

// Map of metadata
func (o GetRecordAnswerOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v GetRecordAnswer) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

func (o GetRecordAnswerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordAnswer) string { return v.Region }).(pulumi.StringOutput)
}

type GetRecordAnswerArrayOutput struct{ *pulumi.OutputState }

func (GetRecordAnswerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordAnswer)(nil)).Elem()
}

func (o GetRecordAnswerArrayOutput) ToGetRecordAnswerArrayOutput() GetRecordAnswerArrayOutput {
	return o
}

func (o GetRecordAnswerArrayOutput) ToGetRecordAnswerArrayOutputWithContext(ctx context.Context) GetRecordAnswerArrayOutput {
	return o
}

func (o GetRecordAnswerArrayOutput) Index(i pulumi.IntInput) GetRecordAnswerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordAnswer {
		return vs[0].([]GetRecordAnswer)[vs[1].(int)]
	}).(GetRecordAnswerOutput)
}

type GetRecordFilter struct {
	Config   map[string]interface{} `pulumi:"config"`
	Disabled bool                   `pulumi:"disabled"`
	Filter   string                 `pulumi:"filter"`
}

// GetRecordFilterInput is an input type that accepts GetRecordFilterArgs and GetRecordFilterOutput values.
// You can construct a concrete instance of `GetRecordFilterInput` via:
//
//          GetRecordFilterArgs{...}
type GetRecordFilterInput interface {
	pulumi.Input

	ToGetRecordFilterOutput() GetRecordFilterOutput
	ToGetRecordFilterOutputWithContext(context.Context) GetRecordFilterOutput
}

type GetRecordFilterArgs struct {
	Config   pulumi.MapInput    `pulumi:"config"`
	Disabled pulumi.BoolInput   `pulumi:"disabled"`
	Filter   pulumi.StringInput `pulumi:"filter"`
}

func (GetRecordFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordFilter)(nil)).Elem()
}

func (i GetRecordFilterArgs) ToGetRecordFilterOutput() GetRecordFilterOutput {
	return i.ToGetRecordFilterOutputWithContext(context.Background())
}

func (i GetRecordFilterArgs) ToGetRecordFilterOutputWithContext(ctx context.Context) GetRecordFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordFilterOutput)
}

// GetRecordFilterArrayInput is an input type that accepts GetRecordFilterArray and GetRecordFilterArrayOutput values.
// You can construct a concrete instance of `GetRecordFilterArrayInput` via:
//
//          GetRecordFilterArray{ GetRecordFilterArgs{...} }
type GetRecordFilterArrayInput interface {
	pulumi.Input

	ToGetRecordFilterArrayOutput() GetRecordFilterArrayOutput
	ToGetRecordFilterArrayOutputWithContext(context.Context) GetRecordFilterArrayOutput
}

type GetRecordFilterArray []GetRecordFilterInput

func (GetRecordFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordFilter)(nil)).Elem()
}

func (i GetRecordFilterArray) ToGetRecordFilterArrayOutput() GetRecordFilterArrayOutput {
	return i.ToGetRecordFilterArrayOutputWithContext(context.Background())
}

func (i GetRecordFilterArray) ToGetRecordFilterArrayOutputWithContext(ctx context.Context) GetRecordFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordFilterArrayOutput)
}

type GetRecordFilterOutput struct{ *pulumi.OutputState }

func (GetRecordFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordFilter)(nil)).Elem()
}

func (o GetRecordFilterOutput) ToGetRecordFilterOutput() GetRecordFilterOutput {
	return o
}

func (o GetRecordFilterOutput) ToGetRecordFilterOutputWithContext(ctx context.Context) GetRecordFilterOutput {
	return o
}

func (o GetRecordFilterOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v GetRecordFilter) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

func (o GetRecordFilterOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRecordFilter) bool { return v.Disabled }).(pulumi.BoolOutput)
}

func (o GetRecordFilterOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordFilter) string { return v.Filter }).(pulumi.StringOutput)
}

type GetRecordFilterArrayOutput struct{ *pulumi.OutputState }

func (GetRecordFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordFilter)(nil)).Elem()
}

func (o GetRecordFilterArrayOutput) ToGetRecordFilterArrayOutput() GetRecordFilterArrayOutput {
	return o
}

func (o GetRecordFilterArrayOutput) ToGetRecordFilterArrayOutputWithContext(ctx context.Context) GetRecordFilterArrayOutput {
	return o
}

func (o GetRecordFilterArrayOutput) Index(i pulumi.IntInput) GetRecordFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordFilter {
		return vs[0].([]GetRecordFilter)[vs[1].(int)]
	}).(GetRecordFilterOutput)
}

type GetRecordRegion struct {
	// Map of metadata
	Meta map[string]interface{} `pulumi:"meta"`
	Name string                 `pulumi:"name"`
}

// GetRecordRegionInput is an input type that accepts GetRecordRegionArgs and GetRecordRegionOutput values.
// You can construct a concrete instance of `GetRecordRegionInput` via:
//
//          GetRecordRegionArgs{...}
type GetRecordRegionInput interface {
	pulumi.Input

	ToGetRecordRegionOutput() GetRecordRegionOutput
	ToGetRecordRegionOutputWithContext(context.Context) GetRecordRegionOutput
}

type GetRecordRegionArgs struct {
	// Map of metadata
	Meta pulumi.MapInput    `pulumi:"meta"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetRecordRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordRegion)(nil)).Elem()
}

func (i GetRecordRegionArgs) ToGetRecordRegionOutput() GetRecordRegionOutput {
	return i.ToGetRecordRegionOutputWithContext(context.Background())
}

func (i GetRecordRegionArgs) ToGetRecordRegionOutputWithContext(ctx context.Context) GetRecordRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordRegionOutput)
}

// GetRecordRegionArrayInput is an input type that accepts GetRecordRegionArray and GetRecordRegionArrayOutput values.
// You can construct a concrete instance of `GetRecordRegionArrayInput` via:
//
//          GetRecordRegionArray{ GetRecordRegionArgs{...} }
type GetRecordRegionArrayInput interface {
	pulumi.Input

	ToGetRecordRegionArrayOutput() GetRecordRegionArrayOutput
	ToGetRecordRegionArrayOutputWithContext(context.Context) GetRecordRegionArrayOutput
}

type GetRecordRegionArray []GetRecordRegionInput

func (GetRecordRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordRegion)(nil)).Elem()
}

func (i GetRecordRegionArray) ToGetRecordRegionArrayOutput() GetRecordRegionArrayOutput {
	return i.ToGetRecordRegionArrayOutputWithContext(context.Background())
}

func (i GetRecordRegionArray) ToGetRecordRegionArrayOutputWithContext(ctx context.Context) GetRecordRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordRegionArrayOutput)
}

type GetRecordRegionOutput struct{ *pulumi.OutputState }

func (GetRecordRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordRegion)(nil)).Elem()
}

func (o GetRecordRegionOutput) ToGetRecordRegionOutput() GetRecordRegionOutput {
	return o
}

func (o GetRecordRegionOutput) ToGetRecordRegionOutputWithContext(ctx context.Context) GetRecordRegionOutput {
	return o
}

// Map of metadata
func (o GetRecordRegionOutput) Meta() pulumi.MapOutput {
	return o.ApplyT(func(v GetRecordRegion) map[string]interface{} { return v.Meta }).(pulumi.MapOutput)
}

func (o GetRecordRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordRegion) string { return v.Name }).(pulumi.StringOutput)
}

type GetRecordRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRecordRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordRegion)(nil)).Elem()
}

func (o GetRecordRegionArrayOutput) ToGetRecordRegionArrayOutput() GetRecordRegionArrayOutput {
	return o
}

func (o GetRecordRegionArrayOutput) ToGetRecordRegionArrayOutputWithContext(ctx context.Context) GetRecordRegionArrayOutput {
	return o
}

func (o GetRecordRegionArrayOutput) Index(i pulumi.IntInput) GetRecordRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordRegion {
		return vs[0].([]GetRecordRegion)[vs[1].(int)]
	}).(GetRecordRegionOutput)
}

type GetZoneSecondary struct {
	// IPv4 address of the secondary server.
	Ip string `pulumi:"ip"`
	// List of network IDs (`int`) for which the zone should be made
	// available. Default is network 0, the primary NSONE Global Network.
	Networks []int `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify bool `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port int `pulumi:"port"`
}

// GetZoneSecondaryInput is an input type that accepts GetZoneSecondaryArgs and GetZoneSecondaryOutput values.
// You can construct a concrete instance of `GetZoneSecondaryInput` via:
//
//          GetZoneSecondaryArgs{...}
type GetZoneSecondaryInput interface {
	pulumi.Input

	ToGetZoneSecondaryOutput() GetZoneSecondaryOutput
	ToGetZoneSecondaryOutputWithContext(context.Context) GetZoneSecondaryOutput
}

type GetZoneSecondaryArgs struct {
	// IPv4 address of the secondary server.
	Ip pulumi.StringInput `pulumi:"ip"`
	// List of network IDs (`int`) for which the zone should be made
	// available. Default is network 0, the primary NSONE Global Network.
	Networks pulumi.IntArrayInput `pulumi:"networks"`
	// Whether we send `NOTIFY` messages to the secondary host
	// when the zone changes. Default `false`.
	Notify pulumi.BoolInput `pulumi:"notify"`
	// Port of the the secondary server. Default `53`.
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetZoneSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZoneSecondary)(nil)).Elem()
}

func (i GetZoneSecondaryArgs) ToGetZoneSecondaryOutput() GetZoneSecondaryOutput {
	return i.ToGetZoneSecondaryOutputWithContext(context.Background())
}

func (i GetZoneSecondaryArgs) ToGetZoneSecondaryOutputWithContext(ctx context.Context) GetZoneSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZoneSecondaryOutput)
}

// GetZoneSecondaryArrayInput is an input type that accepts GetZoneSecondaryArray and GetZoneSecondaryArrayOutput values.
// You can construct a concrete instance of `GetZoneSecondaryArrayInput` via:
//
//          GetZoneSecondaryArray{ GetZoneSecondaryArgs{...} }
type GetZoneSecondaryArrayInput interface {
	pulumi.Input

	ToGetZoneSecondaryArrayOutput() GetZoneSecondaryArrayOutput
	ToGetZoneSecondaryArrayOutputWithContext(context.Context) GetZoneSecondaryArrayOutput
}

type GetZoneSecondaryArray []GetZoneSecondaryInput

func (GetZoneSecondaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZoneSecondary)(nil)).Elem()
}

func (i GetZoneSecondaryArray) ToGetZoneSecondaryArrayOutput() GetZoneSecondaryArrayOutput {
	return i.ToGetZoneSecondaryArrayOutputWithContext(context.Background())
}

func (i GetZoneSecondaryArray) ToGetZoneSecondaryArrayOutputWithContext(ctx context.Context) GetZoneSecondaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZoneSecondaryArrayOutput)
}

type GetZoneSecondaryOutput struct{ *pulumi.OutputState }

func (GetZoneSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZoneSecondary)(nil)).Elem()
}

func (o GetZoneSecondaryOutput) ToGetZoneSecondaryOutput() GetZoneSecondaryOutput {
	return o
}

func (o GetZoneSecondaryOutput) ToGetZoneSecondaryOutputWithContext(ctx context.Context) GetZoneSecondaryOutput {
	return o
}

// IPv4 address of the secondary server.
func (o GetZoneSecondaryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetZoneSecondary) string { return v.Ip }).(pulumi.StringOutput)
}

// List of network IDs (`int`) for which the zone should be made
// available. Default is network 0, the primary NSONE Global Network.
func (o GetZoneSecondaryOutput) Networks() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetZoneSecondary) []int { return v.Networks }).(pulumi.IntArrayOutput)
}

// Whether we send `NOTIFY` messages to the secondary host
// when the zone changes. Default `false`.
func (o GetZoneSecondaryOutput) Notify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetZoneSecondary) bool { return v.Notify }).(pulumi.BoolOutput)
}

// Port of the the secondary server. Default `53`.
func (o GetZoneSecondaryOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetZoneSecondary) int { return v.Port }).(pulumi.IntOutput)
}

type GetZoneSecondaryArrayOutput struct{ *pulumi.OutputState }

func (GetZoneSecondaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZoneSecondary)(nil)).Elem()
}

func (o GetZoneSecondaryArrayOutput) ToGetZoneSecondaryArrayOutput() GetZoneSecondaryArrayOutput {
	return o
}

func (o GetZoneSecondaryArrayOutput) ToGetZoneSecondaryArrayOutputWithContext(ctx context.Context) GetZoneSecondaryArrayOutput {
	return o
}

func (o GetZoneSecondaryArrayOutput) Index(i pulumi.IntInput) GetZoneSecondaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZoneSecondary {
		return vs[0].([]GetZoneSecondary)[vs[1].(int)]
	}).(GetZoneSecondaryOutput)
}

func init() {
	pulumi.RegisterOutputType(APIKeyDnsRecordsAllowOutput{})
	pulumi.RegisterOutputType(APIKeyDnsRecordsAllowArrayOutput{})
	pulumi.RegisterOutputType(APIKeyDnsRecordsDenyOutput{})
	pulumi.RegisterOutputType(APIKeyDnsRecordsDenyArrayOutput{})
	pulumi.RegisterOutputType(MonitoringJobRuleOutput{})
	pulumi.RegisterOutputType(MonitoringJobRuleArrayOutput{})
	pulumi.RegisterOutputType(NotifyListNotificationOutput{})
	pulumi.RegisterOutputType(NotifyListNotificationArrayOutput{})
	pulumi.RegisterOutputType(RecordAnswerOutput{})
	pulumi.RegisterOutputType(RecordAnswerArrayOutput{})
	pulumi.RegisterOutputType(RecordFilterOutput{})
	pulumi.RegisterOutputType(RecordFilterArrayOutput{})
	pulumi.RegisterOutputType(RecordRegionOutput{})
	pulumi.RegisterOutputType(RecordRegionArrayOutput{})
	pulumi.RegisterOutputType(TeamDnsRecordsAllowOutput{})
	pulumi.RegisterOutputType(TeamDnsRecordsAllowArrayOutput{})
	pulumi.RegisterOutputType(TeamDnsRecordsDenyOutput{})
	pulumi.RegisterOutputType(TeamDnsRecordsDenyArrayOutput{})
	pulumi.RegisterOutputType(TeamIpWhitelistOutput{})
	pulumi.RegisterOutputType(TeamIpWhitelistArrayOutput{})
	pulumi.RegisterOutputType(UserDnsRecordsAllowOutput{})
	pulumi.RegisterOutputType(UserDnsRecordsAllowArrayOutput{})
	pulumi.RegisterOutputType(UserDnsRecordsDenyOutput{})
	pulumi.RegisterOutputType(UserDnsRecordsDenyArrayOutput{})
	pulumi.RegisterOutputType(ZoneSecondaryOutput{})
	pulumi.RegisterOutputType(ZoneSecondaryArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDnskeyOutput{})
	pulumi.RegisterOutputType(GetDNSSecDelegationDnskeyArrayOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeysOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeysDnskeyOutput{})
	pulumi.RegisterOutputType(GetDNSSecKeysDnskeyArrayOutput{})
	pulumi.RegisterOutputType(GetRecordAnswerOutput{})
	pulumi.RegisterOutputType(GetRecordAnswerArrayOutput{})
	pulumi.RegisterOutputType(GetRecordFilterOutput{})
	pulumi.RegisterOutputType(GetRecordFilterArrayOutput{})
	pulumi.RegisterOutputType(GetRecordRegionOutput{})
	pulumi.RegisterOutputType(GetRecordRegionArrayOutput{})
	pulumi.RegisterOutputType(GetZoneSecondaryOutput{})
	pulumi.RegisterOutputType(GetZoneSecondaryArrayOutput{})
}
