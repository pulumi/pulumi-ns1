// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a NS1 Redirect resource. This can be used to create, modify, and delete redirects.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ns1.NewRedirect(ctx, "example", &ns1.RedirectArgs{
//				Domain: pulumi.String("www.example.com"),
//				Path:   pulumi.String("/from/path"),
//				Target: pulumi.String("https://url.com/target/path"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Additional Examples
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ns1.NewRedirectCertificate(ctx, "example", &ns1.RedirectCertificateArgs{
//				Domain: pulumi.String("www.example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## NS1 Documentation
//
// [Redirect Api Doc](https://ns1.com/api#redirect)
//
// # ns1\_redirect\_certificate
//
// Provides a NS1 Redirect Certificate resource. This can be used to create, modify, and delete redirect certificates.
//
// ## NS1 Documentation
//
// [Redirect Api Doc](https://ns1.com/api#redirect)
type Redirect struct {
	pulumi.CustomResourceState

	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// The domain the redirect refers to.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// How the target is interpreted:
	// * __all__       appends the entire incoming path to the target destination;
	// * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
	// * __none__      does not append any part of the incoming path.
	ForwardingMode pulumi.StringPtrOutput `pulumi:"forwardingMode"`
	// How the redirect is executed:
	// * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
	//   their database and replace it with the new target page (this is recommended for SEO);
	// * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
	//   page indexed as the redirect is only temporary (while both pages might appear in the
	//   search results, a temporary redirect suggests to the search engine that it should
	//   prefer the new target page);
	// * __masking__   preserves the redirected domain in the browser's address bar (this lets users see the
	//   address they entered, even though the displayed content comes from a different web page).
	ForwardingType pulumi.StringPtrOutput `pulumi:"forwardingType"`
	// True if HTTPS is supported on the source domain by using Let's Encrypt certificates.
	HttpsEnabled pulumi.BoolOutput `pulumi:"httpsEnabled"`
	// Forces redirect for users that try to visit HTTP domain to HTTPS instead.
	HttpsForced pulumi.BoolOutput `pulumi:"httpsForced"`
	// The Unix timestamp representing when the certificate was last signed.
	LastUpdated pulumi.IntOutput `pulumi:"lastUpdated"`
	// The path on the domain to redirect from.
	Path pulumi.StringOutput `pulumi:"path"`
	// Enables the query string of a URL to be applied directly to the new target URL.
	QueryForwarding pulumi.BoolPtrOutput `pulumi:"queryForwarding"`
	// Tags associated with the configuration.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The URL to redirect to.
	Target pulumi.StringOutput `pulumi:"target"`
}

// NewRedirect registers a new resource with the given unique name, arguments, and options.
func NewRedirect(ctx *pulumi.Context,
	name string, args *RedirectArgs, opts ...pulumi.ResourceOption) (*Redirect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Redirect
	err := ctx.RegisterResource("ns1:index/redirect:Redirect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedirect gets an existing Redirect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedirect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedirectState, opts ...pulumi.ResourceOption) (*Redirect, error) {
	var resource Redirect
	err := ctx.ReadResource("ns1:index/redirect:Redirect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Redirect resources.
type redirectState struct {
	CertificateId *string `pulumi:"certificateId"`
	// The domain the redirect refers to.
	Domain *string `pulumi:"domain"`
	// How the target is interpreted:
	// * __all__       appends the entire incoming path to the target destination;
	// * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
	// * __none__      does not append any part of the incoming path.
	ForwardingMode *string `pulumi:"forwardingMode"`
	// How the redirect is executed:
	// * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
	//   their database and replace it with the new target page (this is recommended for SEO);
	// * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
	//   page indexed as the redirect is only temporary (while both pages might appear in the
	//   search results, a temporary redirect suggests to the search engine that it should
	//   prefer the new target page);
	// * __masking__   preserves the redirected domain in the browser's address bar (this lets users see the
	//   address they entered, even though the displayed content comes from a different web page).
	ForwardingType *string `pulumi:"forwardingType"`
	// True if HTTPS is supported on the source domain by using Let's Encrypt certificates.
	HttpsEnabled *bool `pulumi:"httpsEnabled"`
	// Forces redirect for users that try to visit HTTP domain to HTTPS instead.
	HttpsForced *bool `pulumi:"httpsForced"`
	// The Unix timestamp representing when the certificate was last signed.
	LastUpdated *int `pulumi:"lastUpdated"`
	// The path on the domain to redirect from.
	Path *string `pulumi:"path"`
	// Enables the query string of a URL to be applied directly to the new target URL.
	QueryForwarding *bool `pulumi:"queryForwarding"`
	// Tags associated with the configuration.
	Tags []string `pulumi:"tags"`
	// The URL to redirect to.
	Target *string `pulumi:"target"`
}

type RedirectState struct {
	CertificateId pulumi.StringPtrInput
	// The domain the redirect refers to.
	Domain pulumi.StringPtrInput
	// How the target is interpreted:
	// * __all__       appends the entire incoming path to the target destination;
	// * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
	// * __none__      does not append any part of the incoming path.
	ForwardingMode pulumi.StringPtrInput
	// How the redirect is executed:
	// * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
	//   their database and replace it with the new target page (this is recommended for SEO);
	// * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
	//   page indexed as the redirect is only temporary (while both pages might appear in the
	//   search results, a temporary redirect suggests to the search engine that it should
	//   prefer the new target page);
	// * __masking__   preserves the redirected domain in the browser's address bar (this lets users see the
	//   address they entered, even though the displayed content comes from a different web page).
	ForwardingType pulumi.StringPtrInput
	// True if HTTPS is supported on the source domain by using Let's Encrypt certificates.
	HttpsEnabled pulumi.BoolPtrInput
	// Forces redirect for users that try to visit HTTP domain to HTTPS instead.
	HttpsForced pulumi.BoolPtrInput
	// The Unix timestamp representing when the certificate was last signed.
	LastUpdated pulumi.IntPtrInput
	// The path on the domain to redirect from.
	Path pulumi.StringPtrInput
	// Enables the query string of a URL to be applied directly to the new target URL.
	QueryForwarding pulumi.BoolPtrInput
	// Tags associated with the configuration.
	Tags pulumi.StringArrayInput
	// The URL to redirect to.
	Target pulumi.StringPtrInput
}

func (RedirectState) ElementType() reflect.Type {
	return reflect.TypeOf((*redirectState)(nil)).Elem()
}

type redirectArgs struct {
	CertificateId *string `pulumi:"certificateId"`
	// The domain the redirect refers to.
	Domain string `pulumi:"domain"`
	// How the target is interpreted:
	// * __all__       appends the entire incoming path to the target destination;
	// * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
	// * __none__      does not append any part of the incoming path.
	ForwardingMode *string `pulumi:"forwardingMode"`
	// How the redirect is executed:
	// * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
	//   their database and replace it with the new target page (this is recommended for SEO);
	// * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
	//   page indexed as the redirect is only temporary (while both pages might appear in the
	//   search results, a temporary redirect suggests to the search engine that it should
	//   prefer the new target page);
	// * __masking__   preserves the redirected domain in the browser's address bar (this lets users see the
	//   address they entered, even though the displayed content comes from a different web page).
	ForwardingType *string `pulumi:"forwardingType"`
	// Forces redirect for users that try to visit HTTP domain to HTTPS instead.
	HttpsForced *bool `pulumi:"httpsForced"`
	// The path on the domain to redirect from.
	Path string `pulumi:"path"`
	// Enables the query string of a URL to be applied directly to the new target URL.
	QueryForwarding *bool `pulumi:"queryForwarding"`
	// Tags associated with the configuration.
	Tags []string `pulumi:"tags"`
	// The URL to redirect to.
	Target string `pulumi:"target"`
}

// The set of arguments for constructing a Redirect resource.
type RedirectArgs struct {
	CertificateId pulumi.StringPtrInput
	// The domain the redirect refers to.
	Domain pulumi.StringInput
	// How the target is interpreted:
	// * __all__       appends the entire incoming path to the target destination;
	// * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
	// * __none__      does not append any part of the incoming path.
	ForwardingMode pulumi.StringPtrInput
	// How the redirect is executed:
	// * __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
	//   their database and replace it with the new target page (this is recommended for SEO);
	// * __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
	//   page indexed as the redirect is only temporary (while both pages might appear in the
	//   search results, a temporary redirect suggests to the search engine that it should
	//   prefer the new target page);
	// * __masking__   preserves the redirected domain in the browser's address bar (this lets users see the
	//   address they entered, even though the displayed content comes from a different web page).
	ForwardingType pulumi.StringPtrInput
	// Forces redirect for users that try to visit HTTP domain to HTTPS instead.
	HttpsForced pulumi.BoolPtrInput
	// The path on the domain to redirect from.
	Path pulumi.StringInput
	// Enables the query string of a URL to be applied directly to the new target URL.
	QueryForwarding pulumi.BoolPtrInput
	// Tags associated with the configuration.
	Tags pulumi.StringArrayInput
	// The URL to redirect to.
	Target pulumi.StringInput
}

func (RedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redirectArgs)(nil)).Elem()
}

type RedirectInput interface {
	pulumi.Input

	ToRedirectOutput() RedirectOutput
	ToRedirectOutputWithContext(ctx context.Context) RedirectOutput
}

func (*Redirect) ElementType() reflect.Type {
	return reflect.TypeOf((**Redirect)(nil)).Elem()
}

func (i *Redirect) ToRedirectOutput() RedirectOutput {
	return i.ToRedirectOutputWithContext(context.Background())
}

func (i *Redirect) ToRedirectOutputWithContext(ctx context.Context) RedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectOutput)
}

// RedirectArrayInput is an input type that accepts RedirectArray and RedirectArrayOutput values.
// You can construct a concrete instance of `RedirectArrayInput` via:
//
//	RedirectArray{ RedirectArgs{...} }
type RedirectArrayInput interface {
	pulumi.Input

	ToRedirectArrayOutput() RedirectArrayOutput
	ToRedirectArrayOutputWithContext(context.Context) RedirectArrayOutput
}

type RedirectArray []RedirectInput

func (RedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Redirect)(nil)).Elem()
}

func (i RedirectArray) ToRedirectArrayOutput() RedirectArrayOutput {
	return i.ToRedirectArrayOutputWithContext(context.Background())
}

func (i RedirectArray) ToRedirectArrayOutputWithContext(ctx context.Context) RedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectArrayOutput)
}

// RedirectMapInput is an input type that accepts RedirectMap and RedirectMapOutput values.
// You can construct a concrete instance of `RedirectMapInput` via:
//
//	RedirectMap{ "key": RedirectArgs{...} }
type RedirectMapInput interface {
	pulumi.Input

	ToRedirectMapOutput() RedirectMapOutput
	ToRedirectMapOutputWithContext(context.Context) RedirectMapOutput
}

type RedirectMap map[string]RedirectInput

func (RedirectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Redirect)(nil)).Elem()
}

func (i RedirectMap) ToRedirectMapOutput() RedirectMapOutput {
	return i.ToRedirectMapOutputWithContext(context.Background())
}

func (i RedirectMap) ToRedirectMapOutputWithContext(ctx context.Context) RedirectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectMapOutput)
}

type RedirectOutput struct{ *pulumi.OutputState }

func (RedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Redirect)(nil)).Elem()
}

func (o RedirectOutput) ToRedirectOutput() RedirectOutput {
	return o
}

func (o RedirectOutput) ToRedirectOutputWithContext(ctx context.Context) RedirectOutput {
	return o
}

func (o RedirectOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Redirect) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// The domain the redirect refers to.
func (o RedirectOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Redirect) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// How the target is interpreted:
// * __all__       appends the entire incoming path to the target destination;
// * __capture__   appends only the part of the incoming path corresponding to the wildcard (*);
// * __none__      does not append any part of the incoming path.
func (o RedirectOutput) ForwardingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redirect) pulumi.StringPtrOutput { return v.ForwardingMode }).(pulumi.StringPtrOutput)
}

// How the redirect is executed:
//   - __permanent__ (HTTP 301) indicates to search engines that they should remove the old page from
//     their database and replace it with the new target page (this is recommended for SEO);
//   - __temporary__ (HTTP 302) less common, indicates that search engines should keep the old domain or
//     page indexed as the redirect is only temporary (while both pages might appear in the
//     search results, a temporary redirect suggests to the search engine that it should
//     prefer the new target page);
//   - __masking__   preserves the redirected domain in the browser's address bar (this lets users see the
//     address they entered, even though the displayed content comes from a different web page).
func (o RedirectOutput) ForwardingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redirect) pulumi.StringPtrOutput { return v.ForwardingType }).(pulumi.StringPtrOutput)
}

// True if HTTPS is supported on the source domain by using Let's Encrypt certificates.
func (o RedirectOutput) HttpsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Redirect) pulumi.BoolOutput { return v.HttpsEnabled }).(pulumi.BoolOutput)
}

// Forces redirect for users that try to visit HTTP domain to HTTPS instead.
func (o RedirectOutput) HttpsForced() pulumi.BoolOutput {
	return o.ApplyT(func(v *Redirect) pulumi.BoolOutput { return v.HttpsForced }).(pulumi.BoolOutput)
}

// The Unix timestamp representing when the certificate was last signed.
func (o RedirectOutput) LastUpdated() pulumi.IntOutput {
	return o.ApplyT(func(v *Redirect) pulumi.IntOutput { return v.LastUpdated }).(pulumi.IntOutput)
}

// The path on the domain to redirect from.
func (o RedirectOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Redirect) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Enables the query string of a URL to be applied directly to the new target URL.
func (o RedirectOutput) QueryForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Redirect) pulumi.BoolPtrOutput { return v.QueryForwarding }).(pulumi.BoolPtrOutput)
}

// Tags associated with the configuration.
func (o RedirectOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Redirect) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The URL to redirect to.
func (o RedirectOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *Redirect) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

type RedirectArrayOutput struct{ *pulumi.OutputState }

func (RedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Redirect)(nil)).Elem()
}

func (o RedirectArrayOutput) ToRedirectArrayOutput() RedirectArrayOutput {
	return o
}

func (o RedirectArrayOutput) ToRedirectArrayOutputWithContext(ctx context.Context) RedirectArrayOutput {
	return o
}

func (o RedirectArrayOutput) Index(i pulumi.IntInput) RedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Redirect {
		return vs[0].([]*Redirect)[vs[1].(int)]
	}).(RedirectOutput)
}

type RedirectMapOutput struct{ *pulumi.OutputState }

func (RedirectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Redirect)(nil)).Elem()
}

func (o RedirectMapOutput) ToRedirectMapOutput() RedirectMapOutput {
	return o
}

func (o RedirectMapOutput) ToRedirectMapOutputWithContext(ctx context.Context) RedirectMapOutput {
	return o
}

func (o RedirectMapOutput) MapIndex(k pulumi.StringInput) RedirectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Redirect {
		return vs[0].(map[string]*Redirect)[vs[1].(string)]
	}).(RedirectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectInput)(nil)).Elem(), &Redirect{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectArrayInput)(nil)).Elem(), RedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectMapInput)(nil)).Elem(), RedirectMap{})
	pulumi.RegisterOutputType(RedirectOutput{})
	pulumi.RegisterOutputType(RedirectArrayOutput{})
	pulumi.RegisterOutputType(RedirectMapOutput{})
}
