// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RedirectCertificate struct {
	pulumi.CustomResourceState

	Certificate pulumi.StringOutput `pulumi:"certificate"`
	Domain      pulumi.StringOutput `pulumi:"domain"`
	Errors      pulumi.StringOutput `pulumi:"errors"`
	LastUpdated pulumi.IntOutput    `pulumi:"lastUpdated"`
	ValidFrom   pulumi.IntOutput    `pulumi:"validFrom"`
	ValidUntil  pulumi.IntOutput    `pulumi:"validUntil"`
}

// NewRedirectCertificate registers a new resource with the given unique name, arguments, and options.
func NewRedirectCertificate(ctx *pulumi.Context,
	name string, args *RedirectCertificateArgs, opts ...pulumi.ResourceOption) (*RedirectCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RedirectCertificate
	err := ctx.RegisterResource("ns1:index/redirectCertificate:RedirectCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedirectCertificate gets an existing RedirectCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedirectCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedirectCertificateState, opts ...pulumi.ResourceOption) (*RedirectCertificate, error) {
	var resource RedirectCertificate
	err := ctx.ReadResource("ns1:index/redirectCertificate:RedirectCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedirectCertificate resources.
type redirectCertificateState struct {
	Certificate *string `pulumi:"certificate"`
	Domain      *string `pulumi:"domain"`
	Errors      *string `pulumi:"errors"`
	LastUpdated *int    `pulumi:"lastUpdated"`
	ValidFrom   *int    `pulumi:"validFrom"`
	ValidUntil  *int    `pulumi:"validUntil"`
}

type RedirectCertificateState struct {
	Certificate pulumi.StringPtrInput
	Domain      pulumi.StringPtrInput
	Errors      pulumi.StringPtrInput
	LastUpdated pulumi.IntPtrInput
	ValidFrom   pulumi.IntPtrInput
	ValidUntil  pulumi.IntPtrInput
}

func (RedirectCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*redirectCertificateState)(nil)).Elem()
}

type redirectCertificateArgs struct {
	Domain string `pulumi:"domain"`
}

// The set of arguments for constructing a RedirectCertificate resource.
type RedirectCertificateArgs struct {
	Domain pulumi.StringInput
}

func (RedirectCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redirectCertificateArgs)(nil)).Elem()
}

type RedirectCertificateInput interface {
	pulumi.Input

	ToRedirectCertificateOutput() RedirectCertificateOutput
	ToRedirectCertificateOutputWithContext(ctx context.Context) RedirectCertificateOutput
}

func (*RedirectCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**RedirectCertificate)(nil)).Elem()
}

func (i *RedirectCertificate) ToRedirectCertificateOutput() RedirectCertificateOutput {
	return i.ToRedirectCertificateOutputWithContext(context.Background())
}

func (i *RedirectCertificate) ToRedirectCertificateOutputWithContext(ctx context.Context) RedirectCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectCertificateOutput)
}

// RedirectCertificateArrayInput is an input type that accepts RedirectCertificateArray and RedirectCertificateArrayOutput values.
// You can construct a concrete instance of `RedirectCertificateArrayInput` via:
//
//	RedirectCertificateArray{ RedirectCertificateArgs{...} }
type RedirectCertificateArrayInput interface {
	pulumi.Input

	ToRedirectCertificateArrayOutput() RedirectCertificateArrayOutput
	ToRedirectCertificateArrayOutputWithContext(context.Context) RedirectCertificateArrayOutput
}

type RedirectCertificateArray []RedirectCertificateInput

func (RedirectCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedirectCertificate)(nil)).Elem()
}

func (i RedirectCertificateArray) ToRedirectCertificateArrayOutput() RedirectCertificateArrayOutput {
	return i.ToRedirectCertificateArrayOutputWithContext(context.Background())
}

func (i RedirectCertificateArray) ToRedirectCertificateArrayOutputWithContext(ctx context.Context) RedirectCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectCertificateArrayOutput)
}

// RedirectCertificateMapInput is an input type that accepts RedirectCertificateMap and RedirectCertificateMapOutput values.
// You can construct a concrete instance of `RedirectCertificateMapInput` via:
//
//	RedirectCertificateMap{ "key": RedirectCertificateArgs{...} }
type RedirectCertificateMapInput interface {
	pulumi.Input

	ToRedirectCertificateMapOutput() RedirectCertificateMapOutput
	ToRedirectCertificateMapOutputWithContext(context.Context) RedirectCertificateMapOutput
}

type RedirectCertificateMap map[string]RedirectCertificateInput

func (RedirectCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedirectCertificate)(nil)).Elem()
}

func (i RedirectCertificateMap) ToRedirectCertificateMapOutput() RedirectCertificateMapOutput {
	return i.ToRedirectCertificateMapOutputWithContext(context.Background())
}

func (i RedirectCertificateMap) ToRedirectCertificateMapOutputWithContext(ctx context.Context) RedirectCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectCertificateMapOutput)
}

type RedirectCertificateOutput struct{ *pulumi.OutputState }

func (RedirectCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedirectCertificate)(nil)).Elem()
}

func (o RedirectCertificateOutput) ToRedirectCertificateOutput() RedirectCertificateOutput {
	return o
}

func (o RedirectCertificateOutput) ToRedirectCertificateOutputWithContext(ctx context.Context) RedirectCertificateOutput {
	return o
}

func (o RedirectCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *RedirectCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

func (o RedirectCertificateOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *RedirectCertificate) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o RedirectCertificateOutput) Errors() pulumi.StringOutput {
	return o.ApplyT(func(v *RedirectCertificate) pulumi.StringOutput { return v.Errors }).(pulumi.StringOutput)
}

func (o RedirectCertificateOutput) LastUpdated() pulumi.IntOutput {
	return o.ApplyT(func(v *RedirectCertificate) pulumi.IntOutput { return v.LastUpdated }).(pulumi.IntOutput)
}

func (o RedirectCertificateOutput) ValidFrom() pulumi.IntOutput {
	return o.ApplyT(func(v *RedirectCertificate) pulumi.IntOutput { return v.ValidFrom }).(pulumi.IntOutput)
}

func (o RedirectCertificateOutput) ValidUntil() pulumi.IntOutput {
	return o.ApplyT(func(v *RedirectCertificate) pulumi.IntOutput { return v.ValidUntil }).(pulumi.IntOutput)
}

type RedirectCertificateArrayOutput struct{ *pulumi.OutputState }

func (RedirectCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedirectCertificate)(nil)).Elem()
}

func (o RedirectCertificateArrayOutput) ToRedirectCertificateArrayOutput() RedirectCertificateArrayOutput {
	return o
}

func (o RedirectCertificateArrayOutput) ToRedirectCertificateArrayOutputWithContext(ctx context.Context) RedirectCertificateArrayOutput {
	return o
}

func (o RedirectCertificateArrayOutput) Index(i pulumi.IntInput) RedirectCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedirectCertificate {
		return vs[0].([]*RedirectCertificate)[vs[1].(int)]
	}).(RedirectCertificateOutput)
}

type RedirectCertificateMapOutput struct{ *pulumi.OutputState }

func (RedirectCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedirectCertificate)(nil)).Elem()
}

func (o RedirectCertificateMapOutput) ToRedirectCertificateMapOutput() RedirectCertificateMapOutput {
	return o
}

func (o RedirectCertificateMapOutput) ToRedirectCertificateMapOutputWithContext(ctx context.Context) RedirectCertificateMapOutput {
	return o
}

func (o RedirectCertificateMapOutput) MapIndex(k pulumi.StringInput) RedirectCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedirectCertificate {
		return vs[0].(map[string]*RedirectCertificate)[vs[1].(string)]
	}).(RedirectCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectCertificateInput)(nil)).Elem(), &RedirectCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectCertificateArrayInput)(nil)).Elem(), RedirectCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectCertificateMapInput)(nil)).Elem(), RedirectCertificateMap{})
	pulumi.RegisterOutputType(RedirectCertificateOutput{})
	pulumi.RegisterOutputType(RedirectCertificateArrayOutput{})
	pulumi.RegisterOutputType(RedirectCertificateMapOutput{})
}
