// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Dataset struct {
	pulumi.CustomResourceState

	Datatype        DatasetDatatypeOutput    `pulumi:"datatype"`
	ExportType      pulumi.StringOutput      `pulumi:"exportType"`
	Name            pulumi.StringOutput      `pulumi:"name"`
	RecipientEmails pulumi.StringArrayOutput `pulumi:"recipientEmails"`
	Repeat          DatasetRepeatPtrOutput   `pulumi:"repeat"`
	Reports         DatasetReportArrayOutput `pulumi:"reports"`
	Timeframe       DatasetTimeframeOutput   `pulumi:"timeframe"`
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOption) (*Dataset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Datatype == nil {
		return nil, errors.New("invalid value for required argument 'Datatype'")
	}
	if args.ExportType == nil {
		return nil, errors.New("invalid value for required argument 'ExportType'")
	}
	if args.Timeframe == nil {
		return nil, errors.New("invalid value for required argument 'Timeframe'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dataset
	err := ctx.RegisterResource("ns1:index/dataset:Dataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetState, opts ...pulumi.ResourceOption) (*Dataset, error) {
	var resource Dataset
	err := ctx.ReadResource("ns1:index/dataset:Dataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dataset resources.
type datasetState struct {
	Datatype        *DatasetDatatype  `pulumi:"datatype"`
	ExportType      *string           `pulumi:"exportType"`
	Name            *string           `pulumi:"name"`
	RecipientEmails []string          `pulumi:"recipientEmails"`
	Repeat          *DatasetRepeat    `pulumi:"repeat"`
	Reports         []DatasetReport   `pulumi:"reports"`
	Timeframe       *DatasetTimeframe `pulumi:"timeframe"`
}

type DatasetState struct {
	Datatype        DatasetDatatypePtrInput
	ExportType      pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	RecipientEmails pulumi.StringArrayInput
	Repeat          DatasetRepeatPtrInput
	Reports         DatasetReportArrayInput
	Timeframe       DatasetTimeframePtrInput
}

func (DatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetState)(nil)).Elem()
}

type datasetArgs struct {
	Datatype        DatasetDatatype  `pulumi:"datatype"`
	ExportType      string           `pulumi:"exportType"`
	Name            *string          `pulumi:"name"`
	RecipientEmails []string         `pulumi:"recipientEmails"`
	Repeat          *DatasetRepeat   `pulumi:"repeat"`
	Timeframe       DatasetTimeframe `pulumi:"timeframe"`
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	Datatype        DatasetDatatypeInput
	ExportType      pulumi.StringInput
	Name            pulumi.StringPtrInput
	RecipientEmails pulumi.StringArrayInput
	Repeat          DatasetRepeatPtrInput
	Timeframe       DatasetTimeframeInput
}

func (DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetArgs)(nil)).Elem()
}

type DatasetInput interface {
	pulumi.Input

	ToDatasetOutput() DatasetOutput
	ToDatasetOutputWithContext(ctx context.Context) DatasetOutput
}

func (*Dataset) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (i *Dataset) ToDatasetOutput() DatasetOutput {
	return i.ToDatasetOutputWithContext(context.Background())
}

func (i *Dataset) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetOutput)
}

// DatasetArrayInput is an input type that accepts DatasetArray and DatasetArrayOutput values.
// You can construct a concrete instance of `DatasetArrayInput` via:
//
//	DatasetArray{ DatasetArgs{...} }
type DatasetArrayInput interface {
	pulumi.Input

	ToDatasetArrayOutput() DatasetArrayOutput
	ToDatasetArrayOutputWithContext(context.Context) DatasetArrayOutput
}

type DatasetArray []DatasetInput

func (DatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dataset)(nil)).Elem()
}

func (i DatasetArray) ToDatasetArrayOutput() DatasetArrayOutput {
	return i.ToDatasetArrayOutputWithContext(context.Background())
}

func (i DatasetArray) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetArrayOutput)
}

// DatasetMapInput is an input type that accepts DatasetMap and DatasetMapOutput values.
// You can construct a concrete instance of `DatasetMapInput` via:
//
//	DatasetMap{ "key": DatasetArgs{...} }
type DatasetMapInput interface {
	pulumi.Input

	ToDatasetMapOutput() DatasetMapOutput
	ToDatasetMapOutputWithContext(context.Context) DatasetMapOutput
}

type DatasetMap map[string]DatasetInput

func (DatasetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dataset)(nil)).Elem()
}

func (i DatasetMap) ToDatasetMapOutput() DatasetMapOutput {
	return i.ToDatasetMapOutputWithContext(context.Background())
}

func (i DatasetMap) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMapOutput)
}

type DatasetOutput struct{ *pulumi.OutputState }

func (DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (o DatasetOutput) ToDatasetOutput() DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return o
}

func (o DatasetOutput) Datatype() DatasetDatatypeOutput {
	return o.ApplyT(func(v *Dataset) DatasetDatatypeOutput { return v.Datatype }).(DatasetDatatypeOutput)
}

func (o DatasetOutput) ExportType() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.ExportType }).(pulumi.StringOutput)
}

func (o DatasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatasetOutput) RecipientEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringArrayOutput { return v.RecipientEmails }).(pulumi.StringArrayOutput)
}

func (o DatasetOutput) Repeat() DatasetRepeatPtrOutput {
	return o.ApplyT(func(v *Dataset) DatasetRepeatPtrOutput { return v.Repeat }).(DatasetRepeatPtrOutput)
}

func (o DatasetOutput) Reports() DatasetReportArrayOutput {
	return o.ApplyT(func(v *Dataset) DatasetReportArrayOutput { return v.Reports }).(DatasetReportArrayOutput)
}

func (o DatasetOutput) Timeframe() DatasetTimeframeOutput {
	return o.ApplyT(func(v *Dataset) DatasetTimeframeOutput { return v.Timeframe }).(DatasetTimeframeOutput)
}

type DatasetArrayOutput struct{ *pulumi.OutputState }

func (DatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dataset)(nil)).Elem()
}

func (o DatasetArrayOutput) ToDatasetArrayOutput() DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) Index(i pulumi.IntInput) DatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dataset {
		return vs[0].([]*Dataset)[vs[1].(int)]
	}).(DatasetOutput)
}

type DatasetMapOutput struct{ *pulumi.OutputState }

func (DatasetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dataset)(nil)).Elem()
}

func (o DatasetMapOutput) ToDatasetMapOutput() DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) MapIndex(k pulumi.StringInput) DatasetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dataset {
		return vs[0].(map[string]*Dataset)[vs[1].(string)]
	}).(DatasetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetInput)(nil)).Elem(), &Dataset{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetArrayInput)(nil)).Elem(), DatasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetMapInput)(nil)).Elem(), DatasetMap{})
	pulumi.RegisterOutputType(DatasetOutput{})
	pulumi.RegisterOutputType(DatasetArrayOutput{})
	pulumi.RegisterOutputType(DatasetMapOutput{})
}
