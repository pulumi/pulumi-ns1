// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a NS1 Pulsar application resource. This can be used to create, modify, and delete applications.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ns1/sdk/v3/go/ns1"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new pulsar application with default config
//			_, err := ns1.NewApplication(ctx, "ns1App", &ns1.ApplicationArgs{
//				DefaultConfig: &ns1.ApplicationDefaultConfigArgs{
//					Http:                 pulumi.Bool(true),
//					Https:                pulumi.Bool(false),
//					JobTimeoutMillis:     pulumi.Int(100),
//					RequestTimeoutMillis: pulumi.Int(100),
//					StaticValues:         pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## NS1 Documentation
//
// [Application Api Docs](https://ns1.com/api#get-list-pulsar-applications)
//
// ## Import
//
// ```sh
//
//	$ pulumi import ns1:index/application:Application `ns1_application`
//
// ```
//
//	So for the example above:
//
// ```sh
// $ pulumi import ns1:index/application:Application example terraform.example.io`
// ```
type Application struct {
	pulumi.CustomResourceState

	// Indicates whether or not this application is currently active and usable for traffic
	// steering.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The amount of time (in milliseconds) the browser should wait before running
	// measurements.
	BrowserWaitMillis pulumi.IntPtrOutput `pulumi:"browserWaitMillis"`
	// Default job configuration. If a field is present here and not on a specific job
	// associated with this application, the default value specified here is used..
	DefaultConfig ApplicationDefaultConfigOutput `pulumi:"defaultConfig"`
	// Number of jobs to measure per user impression.
	JobsPerTransaction pulumi.IntPtrOutput `pulumi:"jobsPerTransaction"`
	// Descriptive name for this Pulsar app.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		args = &ApplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("ns1:index/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("ns1:index/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// Indicates whether or not this application is currently active and usable for traffic
	// steering.
	Active *bool `pulumi:"active"`
	// The amount of time (in milliseconds) the browser should wait before running
	// measurements.
	BrowserWaitMillis *int `pulumi:"browserWaitMillis"`
	// Default job configuration. If a field is present here and not on a specific job
	// associated with this application, the default value specified here is used..
	DefaultConfig *ApplicationDefaultConfig `pulumi:"defaultConfig"`
	// Number of jobs to measure per user impression.
	JobsPerTransaction *int `pulumi:"jobsPerTransaction"`
	// Descriptive name for this Pulsar app.
	Name *string `pulumi:"name"`
}

type ApplicationState struct {
	// Indicates whether or not this application is currently active and usable for traffic
	// steering.
	Active pulumi.BoolPtrInput
	// The amount of time (in milliseconds) the browser should wait before running
	// measurements.
	BrowserWaitMillis pulumi.IntPtrInput
	// Default job configuration. If a field is present here and not on a specific job
	// associated with this application, the default value specified here is used..
	DefaultConfig ApplicationDefaultConfigPtrInput
	// Number of jobs to measure per user impression.
	JobsPerTransaction pulumi.IntPtrInput
	// Descriptive name for this Pulsar app.
	Name pulumi.StringPtrInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// Indicates whether or not this application is currently active and usable for traffic
	// steering.
	Active *bool `pulumi:"active"`
	// The amount of time (in milliseconds) the browser should wait before running
	// measurements.
	BrowserWaitMillis *int `pulumi:"browserWaitMillis"`
	// Default job configuration. If a field is present here and not on a specific job
	// associated with this application, the default value specified here is used..
	DefaultConfig *ApplicationDefaultConfig `pulumi:"defaultConfig"`
	// Number of jobs to measure per user impression.
	JobsPerTransaction *int `pulumi:"jobsPerTransaction"`
	// Descriptive name for this Pulsar app.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// Indicates whether or not this application is currently active and usable for traffic
	// steering.
	Active pulumi.BoolPtrInput
	// The amount of time (in milliseconds) the browser should wait before running
	// measurements.
	BrowserWaitMillis pulumi.IntPtrInput
	// Default job configuration. If a field is present here and not on a specific job
	// associated with this application, the default value specified here is used..
	DefaultConfig ApplicationDefaultConfigPtrInput
	// Number of jobs to measure per user impression.
	JobsPerTransaction pulumi.IntPtrInput
	// Descriptive name for this Pulsar app.
	Name pulumi.StringPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// Indicates whether or not this application is currently active and usable for traffic
// steering.
func (o ApplicationOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The amount of time (in milliseconds) the browser should wait before running
// measurements.
func (o ApplicationOutput) BrowserWaitMillis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.IntPtrOutput { return v.BrowserWaitMillis }).(pulumi.IntPtrOutput)
}

// Default job configuration. If a field is present here and not on a specific job
// associated with this application, the default value specified here is used..
func (o ApplicationOutput) DefaultConfig() ApplicationDefaultConfigOutput {
	return o.ApplyT(func(v *Application) ApplicationDefaultConfigOutput { return v.DefaultConfig }).(ApplicationDefaultConfigOutput)
}

// Number of jobs to measure per user impression.
func (o ApplicationOutput) JobsPerTransaction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.IntPtrOutput { return v.JobsPerTransaction }).(pulumi.IntPtrOutput)
}

// Descriptive name for this Pulsar app.
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
