// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Subnet struct {
	pulumi.CustomResourceState

	Children       pulumi.IntOutput       `pulumi:"children"`
	Desc           pulumi.StringPtrOutput `pulumi:"desc"`
	DhcpScoped     pulumi.BoolOutput      `pulumi:"dhcpScoped"`
	FreeAddresses  pulumi.StringOutput    `pulumi:"freeAddresses"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	NetworkId      pulumi.IntPtrOutput    `pulumi:"networkId"`
	ParentId       pulumi.IntOutput       `pulumi:"parentId"`
	Prefix         pulumi.StringPtrOutput `pulumi:"prefix"`
	Status         pulumi.StringOutput    `pulumi:"status"`
	Tags           pulumi.MapOutput       `pulumi:"tags"`
	TotalAddresses pulumi.StringOutput    `pulumi:"totalAddresses"`
	UsedAddresses  pulumi.StringOutput    `pulumi:"usedAddresses"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		args = &SubnetArgs{}
	}

	var resource Subnet
	err := ctx.RegisterResource("ns1:index/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("ns1:index/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	Children       *int                   `pulumi:"children"`
	Desc           *string                `pulumi:"desc"`
	DhcpScoped     *bool                  `pulumi:"dhcpScoped"`
	FreeAddresses  *string                `pulumi:"freeAddresses"`
	Name           *string                `pulumi:"name"`
	NetworkId      *int                   `pulumi:"networkId"`
	ParentId       *int                   `pulumi:"parentId"`
	Prefix         *string                `pulumi:"prefix"`
	Status         *string                `pulumi:"status"`
	Tags           map[string]interface{} `pulumi:"tags"`
	TotalAddresses *string                `pulumi:"totalAddresses"`
	UsedAddresses  *string                `pulumi:"usedAddresses"`
}

type SubnetState struct {
	Children       pulumi.IntPtrInput
	Desc           pulumi.StringPtrInput
	DhcpScoped     pulumi.BoolPtrInput
	FreeAddresses  pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	NetworkId      pulumi.IntPtrInput
	ParentId       pulumi.IntPtrInput
	Prefix         pulumi.StringPtrInput
	Status         pulumi.StringPtrInput
	Tags           pulumi.MapInput
	TotalAddresses pulumi.StringPtrInput
	UsedAddresses  pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	Children       *int                   `pulumi:"children"`
	Desc           *string                `pulumi:"desc"`
	DhcpScoped     *bool                  `pulumi:"dhcpScoped"`
	FreeAddresses  *string                `pulumi:"freeAddresses"`
	Name           *string                `pulumi:"name"`
	NetworkId      *int                   `pulumi:"networkId"`
	ParentId       *int                   `pulumi:"parentId"`
	Prefix         *string                `pulumi:"prefix"`
	Status         *string                `pulumi:"status"`
	Tags           map[string]interface{} `pulumi:"tags"`
	TotalAddresses *string                `pulumi:"totalAddresses"`
	UsedAddresses  *string                `pulumi:"usedAddresses"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	Children       pulumi.IntPtrInput
	Desc           pulumi.StringPtrInput
	DhcpScoped     pulumi.BoolPtrInput
	FreeAddresses  pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	NetworkId      pulumi.IntPtrInput
	ParentId       pulumi.IntPtrInput
	Prefix         pulumi.StringPtrInput
	Status         pulumi.StringPtrInput
	Tags           pulumi.MapInput
	TotalAddresses pulumi.StringPtrInput
	UsedAddresses  pulumi.StringPtrInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//          SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//          SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
