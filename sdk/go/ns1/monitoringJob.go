// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ns1

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a NS1 Monitoring Job resource. This can be used to create, modify, and delete monitoring jobs.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-ns1/sdk/go/ns1"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ns1.NewMonitoringJob(ctx, "uswestMonitor", &ns1.MonitoringJobArgs{
// 			Active: pulumi.Bool(true),
// 			Config: pulumi.Map{
// 				"host": pulumi.String("example-elb-uswest.aws.amazon.com"),
// 				"port": pulumi.Float64(443),
// 				"send": pulumi.String(fmt.Sprintf("%v%v%v", "HEAD / HTTP/1.0\n", "\n", "\n")),
// 				"ssl": pulumi.Float64(1),
// 			},
// 			Frequency:    pulumi.Int(60),
// 			JobType:      pulumi.String("tcp"),
// 			Policy:       pulumi.String("quorum"),
// 			RapidRecheck: pulumi.Bool(true),
// 			Regions: pulumi.StringArray{
// 				pulumi.String("sjc"),
// 				pulumi.String("sin"),
// 				pulumi.String("lga"),
// 			},
// 			Rules: ns1.MonitoringJobRuleArray{
// 				&ns1.MonitoringJobRuleArgs{
// 					Comparison: pulumi.String("contains"),
// 					Key:        pulumi.String("output"),
// 					Value:      pulumi.String("200 OK"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## NS1 Documentation
//
// [MonitoringJob Api Doc](https://ns1.com/api#monitoring-jobs)
type MonitoringJob struct {
	pulumi.CustomResourceState

	// Indicates if the job is active or temporarily disabled.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// A configuration dictionary with keys and values depending on the jobs' type.
	Config pulumi.MapOutput `pulumi:"config"`
	// The frequency, in seconds, at which to run the monitoring job in each region.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// The type of monitoring job to be run. See NS1 API
	// docs for supported values.
	JobType pulumi.StringOutput `pulumi:"jobType"`
	// The free-form display name for the monitoring job.
	Name pulumi.StringOutput `pulumi:"name"`
	// Freeform notes to be included in any notifications about this job.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The time in seconds after a failure to wait before sending a notification.
	NotifyDelay pulumi.IntPtrOutput `pulumi:"notifyDelay"`
	// If true, a notification is sent when a job returns to an "up" state.
	NotifyFailback pulumi.BoolPtrOutput `pulumi:"notifyFailback"`
	// The id of the notification list to send notifications to.
	NotifyList pulumi.StringPtrOutput `pulumi:"notifyList"`
	// If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
	NotifyRegional pulumi.BoolPtrOutput `pulumi:"notifyRegional"`
	// The time in seconds between repeat notifications of a failed job.
	NotifyRepeat pulumi.IntPtrOutput `pulumi:"notifyRepeat"`
	// The policy for determining the monitor's global status
	// based on the status of the job in all regions. See NS1 API docs for supported values.
	Policy pulumi.StringPtrOutput `pulumi:"policy"`
	// If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
	RapidRecheck pulumi.BoolPtrOutput `pulumi:"rapidRecheck"`
	// The list of region codes in which to run the monitoring
	// job. See NS1 API docs for supported values.
	Regions pulumi.StringArrayOutput `pulumi:"regions"`
	// A list of rules for determining failure conditions. Job Rules are documented below.
	Rules MonitoringJobRuleArrayOutput `pulumi:"rules"`
}

// NewMonitoringJob registers a new resource with the given unique name, arguments, and options.
func NewMonitoringJob(ctx *pulumi.Context,
	name string, args *MonitoringJobArgs, opts ...pulumi.ResourceOption) (*MonitoringJob, error) {
	if args == nil || args.Config == nil {
		return nil, errors.New("missing required argument 'Config'")
	}
	if args == nil || args.Frequency == nil {
		return nil, errors.New("missing required argument 'Frequency'")
	}
	if args == nil || args.JobType == nil {
		return nil, errors.New("missing required argument 'JobType'")
	}
	if args == nil || args.Regions == nil {
		return nil, errors.New("missing required argument 'Regions'")
	}
	if args == nil {
		args = &MonitoringJobArgs{}
	}
	var resource MonitoringJob
	err := ctx.RegisterResource("ns1:index/monitoringJob:MonitoringJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringJob gets an existing MonitoringJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringJobState, opts ...pulumi.ResourceOption) (*MonitoringJob, error) {
	var resource MonitoringJob
	err := ctx.ReadResource("ns1:index/monitoringJob:MonitoringJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringJob resources.
type monitoringJobState struct {
	// Indicates if the job is active or temporarily disabled.
	Active *bool `pulumi:"active"`
	// A configuration dictionary with keys and values depending on the jobs' type.
	Config map[string]interface{} `pulumi:"config"`
	// The frequency, in seconds, at which to run the monitoring job in each region.
	Frequency *int `pulumi:"frequency"`
	// The type of monitoring job to be run. See NS1 API
	// docs for supported values.
	JobType *string `pulumi:"jobType"`
	// The free-form display name for the monitoring job.
	Name *string `pulumi:"name"`
	// Freeform notes to be included in any notifications about this job.
	Notes *string `pulumi:"notes"`
	// The time in seconds after a failure to wait before sending a notification.
	NotifyDelay *int `pulumi:"notifyDelay"`
	// If true, a notification is sent when a job returns to an "up" state.
	NotifyFailback *bool `pulumi:"notifyFailback"`
	// The id of the notification list to send notifications to.
	NotifyList *string `pulumi:"notifyList"`
	// If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
	NotifyRegional *bool `pulumi:"notifyRegional"`
	// The time in seconds between repeat notifications of a failed job.
	NotifyRepeat *int `pulumi:"notifyRepeat"`
	// The policy for determining the monitor's global status
	// based on the status of the job in all regions. See NS1 API docs for supported values.
	Policy *string `pulumi:"policy"`
	// If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
	RapidRecheck *bool `pulumi:"rapidRecheck"`
	// The list of region codes in which to run the monitoring
	// job. See NS1 API docs for supported values.
	Regions []string `pulumi:"regions"`
	// A list of rules for determining failure conditions. Job Rules are documented below.
	Rules []MonitoringJobRule `pulumi:"rules"`
}

type MonitoringJobState struct {
	// Indicates if the job is active or temporarily disabled.
	Active pulumi.BoolPtrInput
	// A configuration dictionary with keys and values depending on the jobs' type.
	Config pulumi.MapInput
	// The frequency, in seconds, at which to run the monitoring job in each region.
	Frequency pulumi.IntPtrInput
	// The type of monitoring job to be run. See NS1 API
	// docs for supported values.
	JobType pulumi.StringPtrInput
	// The free-form display name for the monitoring job.
	Name pulumi.StringPtrInput
	// Freeform notes to be included in any notifications about this job.
	Notes pulumi.StringPtrInput
	// The time in seconds after a failure to wait before sending a notification.
	NotifyDelay pulumi.IntPtrInput
	// If true, a notification is sent when a job returns to an "up" state.
	NotifyFailback pulumi.BoolPtrInput
	// The id of the notification list to send notifications to.
	NotifyList pulumi.StringPtrInput
	// If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
	NotifyRegional pulumi.BoolPtrInput
	// The time in seconds between repeat notifications of a failed job.
	NotifyRepeat pulumi.IntPtrInput
	// The policy for determining the monitor's global status
	// based on the status of the job in all regions. See NS1 API docs for supported values.
	Policy pulumi.StringPtrInput
	// If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
	RapidRecheck pulumi.BoolPtrInput
	// The list of region codes in which to run the monitoring
	// job. See NS1 API docs for supported values.
	Regions pulumi.StringArrayInput
	// A list of rules for determining failure conditions. Job Rules are documented below.
	Rules MonitoringJobRuleArrayInput
}

func (MonitoringJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringJobState)(nil)).Elem()
}

type monitoringJobArgs struct {
	// Indicates if the job is active or temporarily disabled.
	Active *bool `pulumi:"active"`
	// A configuration dictionary with keys and values depending on the jobs' type.
	Config map[string]interface{} `pulumi:"config"`
	// The frequency, in seconds, at which to run the monitoring job in each region.
	Frequency int `pulumi:"frequency"`
	// The type of monitoring job to be run. See NS1 API
	// docs for supported values.
	JobType string `pulumi:"jobType"`
	// The free-form display name for the monitoring job.
	Name *string `pulumi:"name"`
	// Freeform notes to be included in any notifications about this job.
	Notes *string `pulumi:"notes"`
	// The time in seconds after a failure to wait before sending a notification.
	NotifyDelay *int `pulumi:"notifyDelay"`
	// If true, a notification is sent when a job returns to an "up" state.
	NotifyFailback *bool `pulumi:"notifyFailback"`
	// The id of the notification list to send notifications to.
	NotifyList *string `pulumi:"notifyList"`
	// If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
	NotifyRegional *bool `pulumi:"notifyRegional"`
	// The time in seconds between repeat notifications of a failed job.
	NotifyRepeat *int `pulumi:"notifyRepeat"`
	// The policy for determining the monitor's global status
	// based on the status of the job in all regions. See NS1 API docs for supported values.
	Policy *string `pulumi:"policy"`
	// If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
	RapidRecheck *bool `pulumi:"rapidRecheck"`
	// The list of region codes in which to run the monitoring
	// job. See NS1 API docs for supported values.
	Regions []string `pulumi:"regions"`
	// A list of rules for determining failure conditions. Job Rules are documented below.
	Rules []MonitoringJobRule `pulumi:"rules"`
}

// The set of arguments for constructing a MonitoringJob resource.
type MonitoringJobArgs struct {
	// Indicates if the job is active or temporarily disabled.
	Active pulumi.BoolPtrInput
	// A configuration dictionary with keys and values depending on the jobs' type.
	Config pulumi.MapInput
	// The frequency, in seconds, at which to run the monitoring job in each region.
	Frequency pulumi.IntInput
	// The type of monitoring job to be run. See NS1 API
	// docs for supported values.
	JobType pulumi.StringInput
	// The free-form display name for the monitoring job.
	Name pulumi.StringPtrInput
	// Freeform notes to be included in any notifications about this job.
	Notes pulumi.StringPtrInput
	// The time in seconds after a failure to wait before sending a notification.
	NotifyDelay pulumi.IntPtrInput
	// If true, a notification is sent when a job returns to an "up" state.
	NotifyFailback pulumi.BoolPtrInput
	// The id of the notification list to send notifications to.
	NotifyList pulumi.StringPtrInput
	// If true, notifications are sent for any regional failure (and failback if desired), in addition to global state notifications.
	NotifyRegional pulumi.BoolPtrInput
	// The time in seconds between repeat notifications of a failed job.
	NotifyRepeat pulumi.IntPtrInput
	// The policy for determining the monitor's global status
	// based on the status of the job in all regions. See NS1 API docs for supported values.
	Policy pulumi.StringPtrInput
	// If true, on any apparent state change, the job is quickly re-run after one second to confirm the state change before notification.
	RapidRecheck pulumi.BoolPtrInput
	// The list of region codes in which to run the monitoring
	// job. See NS1 API docs for supported values.
	Regions pulumi.StringArrayInput
	// A list of rules for determining failure conditions. Job Rules are documented below.
	Rules MonitoringJobRuleArrayInput
}

func (MonitoringJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringJobArgs)(nil)).Elem()
}
